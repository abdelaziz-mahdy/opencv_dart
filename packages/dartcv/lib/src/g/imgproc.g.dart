// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Imgproc
///
class CvNativeImgproc {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeImgproc(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeImgproc.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> AdaptiveThreshold(
    Mat src,
    Mat dst,
    double maxValue,
    int adaptiveTyp,
    int typ,
    int blockSize,
    double c,
  ) {
    return _AdaptiveThreshold(
      src,
      dst,
      maxValue,
      adaptiveTyp,
      typ,
      blockSize,
      c,
    );
  }

  late final _AdaptiveThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
              ffi.Int, ffi.Double)>>('AdaptiveThreshold');
  late final _AdaptiveThreshold = _AdaptiveThresholdPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, int, int, int, double)>();

  ffi.Pointer<CvStatus> AdaptiveThreshold_Async(
    Mat src,
    double maxValue,
    int adaptiveTyp,
    int typ,
    int blockSize,
    double c,
    imp1.CvCallback_1 callback,
  ) {
    return _AdaptiveThreshold_Async(
      src,
      maxValue,
      adaptiveTyp,
      typ,
      blockSize,
      c,
      callback,
    );
  }

  late final _AdaptiveThreshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              imp1.CvCallback_1)>>('AdaptiveThreshold_Async');
  late final _AdaptiveThreshold_Async = _AdaptiveThreshold_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, int, int, int, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ApplyColorMap(
    Mat src,
    Mat dst,
    int colormap,
  ) {
    return _ApplyColorMap(
      src,
      dst,
      colormap,
    );
  }

  late final _ApplyColorMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('ApplyColorMap');
  late final _ApplyColorMap = _ApplyColorMapPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> ApplyColorMap_Async(
    Mat src,
    int colormap,
    imp1.CvCallback_1 callback,
  ) {
    return _ApplyColorMap_Async(
      src,
      colormap,
      callback,
    );
  }

  late final _ApplyColorMap_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('ApplyColorMap_Async');
  late final _ApplyColorMap_Async = _ApplyColorMap_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ApplyCustomColorMap(
    Mat src,
    Mat dst,
    Mat colormap,
  ) {
    return _ApplyCustomColorMap(
      src,
      dst,
      colormap,
    );
  }

  late final _ApplyCustomColorMapPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'ApplyCustomColorMap');
  late final _ApplyCustomColorMap = _ApplyCustomColorMapPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> ApplyCustomColorMap_Async(
    Mat src,
    Mat colormap,
    imp1.CvCallback_1 callback,
  ) {
    return _ApplyCustomColorMap_Async(
      src,
      colormap,
      callback,
    );
  }

  late final _ApplyCustomColorMap_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('ApplyCustomColorMap_Async');
  late final _ApplyCustomColorMap_Async =
      _ApplyCustomColorMap_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ApproxPolyDP(
    VecPoint curve,
    double epsilon,
    bool closed,
    ffi.Pointer<VecPoint> rval,
  ) {
    return _ApproxPolyDP(
      curve,
      epsilon,
      closed,
      rval,
    );
  }

  late final _ApproxPolyDPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Double, ffi.Bool,
              ffi.Pointer<VecPoint>)>>('ApproxPolyDP');
  late final _ApproxPolyDP = _ApproxPolyDPPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, double, bool, ffi.Pointer<VecPoint>)>();

  ffi.Pointer<CvStatus> ApproxPolyDP_Async(
    VecPoint curve,
    double epsilon,
    bool closed,
    imp1.CvCallback_1 callback,
  ) {
    return _ApproxPolyDP_Async(
      curve,
      epsilon,
      closed,
      callback,
    );
  }

  late final _ApproxPolyDP_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Double, ffi.Bool,
              imp1.CvCallback_1)>>('ApproxPolyDP_Async');
  late final _ApproxPolyDP_Async = _ApproxPolyDP_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, double, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArcLength(
    VecPoint curve,
    bool is_closed,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArcLength(
      curve,
      is_closed,
      rval,
    );
  }

  late final _ArcLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Bool, ffi.Pointer<ffi.Double>)>>('ArcLength');
  late final _ArcLength = _ArcLengthPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, bool, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArcLength_Async(
    VecPoint curve,
    bool is_closed,
    imp1.CvCallback_1 callback,
  ) {
    return _ArcLength_Async(
      curve,
      is_closed,
      callback,
    );
  }

  late final _ArcLength_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Bool, imp1.CvCallback_1)>>('ArcLength_Async');
  late final _ArcLength_Async = _ArcLength_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArrowedLine(
    Mat img,
    CvPoint pt1,
    CvPoint pt2,
    Scalar color,
    int thickness,
    int line_type,
    int shift,
    double tipLength,
  ) {
    return _ArrowedLine(
      img,
      pt1,
      pt2,
      color,
      thickness,
      line_type,
      shift,
      tipLength,
    );
  }

  late final _ArrowedLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, ffi.Int,
              ffi.Int, ffi.Int, ffi.Double)>>('ArrowedLine');
  late final _ArrowedLine = _ArrowedLinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, Scalar, int, int, int, double)>();

  ffi.Pointer<CvStatus> ArrowedLine_Async(
    Mat img,
    CvPoint pt1,
    CvPoint pt2,
    Scalar color,
    int thickness,
    int line_type,
    int shift,
    double tipLength,
    imp1.CvCallback_0 callback,
  ) {
    return _ArrowedLine_Async(
      img,
      pt1,
      pt2,
      color,
      thickness,
      line_type,
      shift,
      tipLength,
      callback,
    );
  }

  late final _ArrowedLine_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvPoint,
              CvPoint,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              imp1.CvCallback_0)>>('ArrowedLine_Async');
  late final _ArrowedLine_Async = _ArrowedLine_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, int, int,
          int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> BilateralFilter(
    Mat src,
    Mat dst,
    int d,
    double sc,
    double ss,
  ) {
    return _BilateralFilter(
      src,
      dst,
      d,
      sc,
      ss,
    );
  }

  late final _BilateralFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>('BilateralFilter');
  late final _BilateralFilter = _BilateralFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double)>();

  ffi.Pointer<CvStatus> BilateralFilter_Async(
    Mat src,
    int d,
    double sc,
    double ss,
    imp1.CvCallback_1 callback,
  ) {
    return _BilateralFilter_Async(
      src,
      d,
      sc,
      ss,
      callback,
    );
  }

  late final _BilateralFilter_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Double, ffi.Double,
              imp1.CvCallback_1)>>('BilateralFilter_Async');
  late final _BilateralFilter_Async = _BilateralFilter_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Blur(
    Mat src,
    Mat dst,
    CvSize ps,
  ) {
    return _Blur(
      src,
      dst,
      ps,
    );
  }

  late final _BlurPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize)>>(
      'Blur');
  late final _Blur =
      _BlurPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize)>();

  ffi.Pointer<CvStatus> Blur_Async(
    Mat src,
    CvSize ps,
    imp1.CvCallback_1 callback,
  ) {
    return _Blur_Async(
      src,
      ps,
      callback,
    );
  }

  late final _Blur_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvSize, imp1.CvCallback_1)>>('Blur_Async');
  late final _Blur_Async = _Blur_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BoundingRect(
    VecPoint pts,
    ffi.Pointer<CvRect> rval,
  ) {
    return _BoundingRect(
      pts,
      rval,
    );
  }

  late final _BoundingRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<CvRect>)>>('BoundingRect');
  late final _BoundingRect = _BoundingRectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> BoundingRect_Async(
    VecPoint pts,
    imp1.CvCallback_1 callback,
  ) {
    return _BoundingRect_Async(
      pts,
      callback,
    );
  }

  late final _BoundingRect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, imp1.CvCallback_1)>>('BoundingRect_Async');
  late final _BoundingRect_Async = _BoundingRect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BoxFilter(
    Mat src,
    Mat dst,
    int ddepth,
    CvSize ps,
    CvPoint anchor,
    bool normalize,
    int borderType,
  ) {
    return _BoxFilter(
      src,
      dst,
      ddepth,
      ps,
      anchor,
      normalize,
      borderType,
    );
  }

  late final _BoxFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, CvSize, CvPoint,
              ffi.Bool, ffi.Int)>>('BoxFilter');
  late final _BoxFilter = _BoxFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, CvSize, CvPoint, bool, int)>();

  ffi.Pointer<CvStatus> BoxFilter_Async(
    Mat src,
    int ddepth,
    CvSize ps,
    imp1.CvCallback_1 callback,
  ) {
    return _BoxFilter_Async(
      src,
      ddepth,
      ps,
      callback,
    );
  }

  late final _BoxFilter_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, CvSize, imp1.CvCallback_1)>>('BoxFilter_Async');
  late final _BoxFilter_Async = _BoxFilter_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BoxPoints(
    RotatedRect rect,
    ffi.Pointer<VecPoint2f> boxPts,
  ) {
    return _BoxPoints(
      rect,
      boxPts,
    );
  }

  late final _BoxPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RotatedRect, ffi.Pointer<VecPoint2f>)>>('BoxPoints');
  late final _BoxPoints = _BoxPointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvStatus> BoxPoints_Async(
    RotatedRect rect,
    imp1.CvCallback_1 callback,
  ) {
    return _BoxPoints_Async(
      rect,
      callback,
    );
  }

  late final _BoxPoints_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RotatedRect, imp1.CvCallback_1)>>('BoxPoints_Async');
  late final _BoxPoints_Async = _BoxPoints_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RotatedRect, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CLAHE_Apply(
    CLAHE c,
    Mat src,
    Mat dst,
  ) {
    return _CLAHE_Apply(
      c,
      src,
      dst,
    );
  }

  late final _CLAHE_ApplyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat)>>(
      'CLAHE_Apply');
  late final _CLAHE_Apply = _CLAHE_ApplyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat)>();

  ffi.Pointer<CvStatus> CLAHE_Apply_Async(
    CLAHE self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _CLAHE_Apply_Async(
      self,
      src,
      callback,
    );
  }

  late final _CLAHE_Apply_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CLAHE, Mat, imp1.CvCallback_1)>>('CLAHE_Apply_Async');
  late final _CLAHE_Apply_Async = _CLAHE_Apply_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE, Mat, imp1.CvCallback_1)>();

  void CLAHE_Close(
    CLAHEPtr c,
  ) {
    return _CLAHE_Close(
      c,
    );
  }

  late final _CLAHE_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CLAHEPtr)>>('CLAHE_Close');
  late final _CLAHE_Close =
      _CLAHE_ClosePtr.asFunction<void Function(CLAHEPtr)>();

  void CLAHE_Close_Async(
    CLAHEPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _CLAHE_Close_Async(
      self,
      callback,
    );
  }

  late final _CLAHE_Close_AsyncPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CLAHEPtr, imp1.CvCallback_0)>>(
      'CLAHE_Close_Async');
  late final _CLAHE_Close_Async = _CLAHE_Close_AsyncPtr.asFunction<
      void Function(CLAHEPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> CLAHE_CollectGarbage(
    CLAHE c,
  ) {
    return _CLAHE_CollectGarbage(
      c,
    );
  }

  late final _CLAHE_CollectGarbagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CLAHE)>>(
          'CLAHE_CollectGarbage');
  late final _CLAHE_CollectGarbage = _CLAHE_CollectGarbagePtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE)>();

  ffi.Pointer<CvStatus> CLAHE_CollectGarbage_Async(
    CLAHE self,
    imp1.CvCallback_0 callback,
  ) {
    return _CLAHE_CollectGarbage_Async(
      self,
      callback,
    );
  }

  late final _CLAHE_CollectGarbage_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CLAHE, imp1.CvCallback_0)>>('CLAHE_CollectGarbage_Async');
  late final _CLAHE_CollectGarbage_Async = _CLAHE_CollectGarbage_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> CLAHE_Create(
    ffi.Pointer<CLAHE> rval,
  ) {
    return _CLAHE_Create(
      rval,
    );
  }

  late final _CLAHE_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>>('CLAHE_Create');
  late final _CLAHE_Create = _CLAHE_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>();

  ffi.Pointer<CvStatus> CLAHE_CreateWithParams(
    double clipLimit,
    CvSize tileGridSize,
    ffi.Pointer<CLAHE> rval,
  ) {
    return _CLAHE_CreateWithParams(
      clipLimit,
      tileGridSize,
      rval,
    );
  }

  late final _CLAHE_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Double, CvSize,
              ffi.Pointer<CLAHE>)>>('CLAHE_CreateWithParams');
  late final _CLAHE_CreateWithParams = _CLAHE_CreateWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(double, CvSize, ffi.Pointer<CLAHE>)>();

  ffi.Pointer<CvStatus> CLAHE_CreateWithParams_Async(
    double clipLimit,
    CvSize tileGridSize,
    imp1.CvCallback_1 callback,
  ) {
    return _CLAHE_CreateWithParams_Async(
      clipLimit,
      tileGridSize,
      callback,
    );
  }

  late final _CLAHE_CreateWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Double, CvSize,
              imp1.CvCallback_1)>>('CLAHE_CreateWithParams_Async');
  late final _CLAHE_CreateWithParams_Async =
      _CLAHE_CreateWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(double, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CLAHE_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _CLAHE_Create_Async(
      callback,
    );
  }

  late final _CLAHE_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'CLAHE_Create_Async');
  late final _CLAHE_Create_Async = _CLAHE_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CLAHE_GetClipLimit(
    CLAHE c,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _CLAHE_GetClipLimit(
      c,
      rval,
    );
  }

  late final _CLAHE_GetClipLimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CLAHE, ffi.Pointer<ffi.Double>)>>('CLAHE_GetClipLimit');
  late final _CLAHE_GetClipLimit = _CLAHE_GetClipLimitPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> CLAHE_GetClipLimit_Async(
    CLAHE self,
    imp1.CvCallback_1 callback,
  ) {
    return _CLAHE_GetClipLimit_Async(
      self,
      callback,
    );
  }

  late final _CLAHE_GetClipLimit_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CLAHE, imp1.CvCallback_1)>>('CLAHE_GetClipLimit_Async');
  late final _CLAHE_GetClipLimit_Async = _CLAHE_GetClipLimit_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CLAHE_GetTilesGridSize(
    CLAHE c,
    ffi.Pointer<CvSize> rval,
  ) {
    return _CLAHE_GetTilesGridSize(
      c,
      rval,
    );
  }

  late final _CLAHE_GetTilesGridSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CLAHE, ffi.Pointer<CvSize>)>>('CLAHE_GetTilesGridSize');
  late final _CLAHE_GetTilesGridSize = _CLAHE_GetTilesGridSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE, ffi.Pointer<CvSize>)>();

  ffi.Pointer<CvStatus> CLAHE_GetTilesGridSize_Async(
    CLAHE self,
    imp1.CvCallback_1 callback,
  ) {
    return _CLAHE_GetTilesGridSize_Async(
      self,
      callback,
    );
  }

  late final _CLAHE_GetTilesGridSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CLAHE, imp1.CvCallback_1)>>('CLAHE_GetTilesGridSize_Async');
  late final _CLAHE_GetTilesGridSize_Async = _CLAHE_GetTilesGridSize_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CLAHE_SetClipLimit(
    CLAHE c,
    double clipLimit,
  ) {
    return _CLAHE_SetClipLimit(
      c,
      clipLimit,
    );
  }

  late final _CLAHE_SetClipLimitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Double)>>(
      'CLAHE_SetClipLimit');
  late final _CLAHE_SetClipLimit = _CLAHE_SetClipLimitPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE, double)>();

  ffi.Pointer<CvStatus> CLAHE_SetClipLimit_Async(
    CLAHE self,
    double clipLimit,
    imp1.CvCallback_0 callback,
  ) {
    return _CLAHE_SetClipLimit_Async(
      self,
      clipLimit,
      callback,
    );
  }

  late final _CLAHE_SetClipLimit_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CLAHE, ffi.Double,
              imp1.CvCallback_0)>>('CLAHE_SetClipLimit_Async');
  late final _CLAHE_SetClipLimit_Async =
      _CLAHE_SetClipLimit_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(CLAHE, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> CLAHE_SetTilesGridSize(
    CLAHE c,
    CvSize size,
  ) {
    return _CLAHE_SetTilesGridSize(
      c,
      size,
    );
  }

  late final _CLAHE_SetTilesGridSizePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CLAHE, CvSize)>>(
      'CLAHE_SetTilesGridSize');
  late final _CLAHE_SetTilesGridSize = _CLAHE_SetTilesGridSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(CLAHE, CvSize)>();

  ffi.Pointer<CvStatus> CLAHE_SetTilesGridSize_Async(
    CLAHE self,
    CvSize size,
    imp1.CvCallback_0 callback,
  ) {
    return _CLAHE_SetTilesGridSize_Async(
      self,
      size,
      callback,
    );
  }

  late final _CLAHE_SetTilesGridSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CLAHE, CvSize,
              imp1.CvCallback_0)>>('CLAHE_SetTilesGridSize_Async');
  late final _CLAHE_SetTilesGridSize_Async =
      _CLAHE_SetTilesGridSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(CLAHE, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> CalcBackProject(
    VecMat mats,
    VecI32 chans,
    Mat hist,
    ffi.Pointer<Mat> backProject,
    VecF32 rng,
    double scale,
  ) {
    return _CalcBackProject(
      mats,
      chans,
      hist,
      backProject,
      rng,
      scale,
    );
  }

  late final _CalcBackProjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecMat, VecI32, Mat, ffi.Pointer<Mat>,
              VecF32, ffi.Double)>>('CalcBackProject');
  late final _CalcBackProject = _CalcBackProjectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, VecI32, Mat, ffi.Pointer<Mat>, VecF32, double)>();

  ffi.Pointer<CvStatus> CalcBackProject_Async(
    VecMat mats,
    VecI32 chans,
    Mat backProject,
    VecF32 rng,
    double scale,
    imp1.CvCallback_1 callback,
  ) {
    return _CalcBackProject_Async(
      mats,
      chans,
      backProject,
      rng,
      scale,
      callback,
    );
  }

  late final _CalcBackProject_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecMat, VecI32, Mat, VecF32,
              ffi.Double, imp1.CvCallback_1)>>('CalcBackProject_Async');
  late final _CalcBackProject_Async = _CalcBackProject_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, VecI32, Mat, VecF32, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CalcHist(
    VecMat mats,
    VecI32 chans,
    Mat mask,
    Mat hist,
    VecI32 sz,
    VecF32 rng,
    bool acc,
  ) {
    return _CalcHist(
      mats,
      chans,
      mask,
      hist,
      sz,
      rng,
      acc,
    );
  }

  late final _CalcHistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, VecI32, Mat, Mat, VecI32, VecF32, ffi.Bool)>>('CalcHist');
  late final _CalcHist = _CalcHistPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, VecI32, Mat, Mat, VecI32, VecF32, bool)>();

  ffi.Pointer<CvStatus> CalcHist_Async(
    VecMat mats,
    VecI32 chans,
    Mat mask,
    VecI32 sz,
    VecF32 rng,
    bool acc,
    imp1.CvCallback_1 callback,
  ) {
    return _CalcHist_Async(
      mats,
      chans,
      mask,
      sz,
      rng,
      acc,
      callback,
    );
  }

  late final _CalcHist_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecMat, VecI32, Mat, VecI32, VecF32,
              ffi.Bool, imp1.CvCallback_1)>>('CalcHist_Async');
  late final _CalcHist_Async = _CalcHist_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, VecI32, Mat, VecI32, VecF32, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Canny(
    Mat src,
    Mat edges,
    double t1,
    double t2,
    int apertureSize,
    bool l2gradient,
  ) {
    return _Canny(
      src,
      edges,
      t1,
      t2,
      apertureSize,
      l2gradient,
    );
  }

  late final _CannyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool)>>('Canny');
  late final _Canny = _CannyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, bool)>();

  ffi.Pointer<CvStatus> Canny_Async(
    Mat src,
    double t1,
    double t2,
    int apertureSize,
    bool l2gradient,
    imp1.CvCallback_1 callback,
  ) {
    return _Canny_Async(
      src,
      t1,
      t2,
      apertureSize,
      l2gradient,
      callback,
    );
  }

  late final _Canny_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Double, ffi.Int,
              ffi.Bool, imp1.CvCallback_1)>>('Canny_Async');
  late final _Canny_Async = _Canny_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, double, int, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Circle(
    Mat img,
    CvPoint center,
    int radius,
    Scalar color,
    int thickness,
  ) {
    return _Circle(
      img,
      center,
      radius,
      color,
      thickness,
    );
  }

  late final _CirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvPoint, ffi.Int, Scalar, ffi.Int)>>('Circle');
  late final _Circle = _CirclePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, int, Scalar, int)>();

  ffi.Pointer<CvStatus> CircleWithParams(
    Mat img,
    CvPoint center,
    int radius,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _CircleWithParams(
      img,
      center,
      radius,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _CircleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, ffi.Int, Scalar, ffi.Int,
              ffi.Int, ffi.Int)>>('CircleWithParams');
  late final _CircleWithParams = _CircleWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, int, Scalar, int, int, int)>();

  ffi.Pointer<CvStatus> CircleWithParams_Async(
    Mat img,
    CvPoint center,
    int radius,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _CircleWithParams_Async(
      img,
      center,
      radius,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _CircleWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, ffi.Int, Scalar, ffi.Int,
              ffi.Int, ffi.Int, imp1.CvCallback_0)>>('CircleWithParams_Async');
  late final _CircleWithParams_Async = _CircleWithParams_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, int, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Circle_Async(
    Mat img,
    CvPoint center,
    int radius,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _Circle_Async(
      img,
      center,
      radius,
      color,
      thickness,
      callback,
    );
  }

  late final _Circle_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, ffi.Int, Scalar, ffi.Int,
              imp1.CvCallback_0)>>('Circle_Async');
  late final _Circle_Async = _Circle_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, int, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ClipLine(
    CvRect imgRect,
    CvPoint pt1,
    CvPoint pt2,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _ClipLine(
      imgRect,
      pt1,
      pt2,
      rval,
    );
  }

  late final _ClipLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CvRect, CvPoint, CvPoint, ffi.Pointer<ffi.Bool>)>>('ClipLine');
  late final _ClipLine = _ClipLinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          CvRect, CvPoint, CvPoint, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> ClipLine_Async(
    CvRect imgRect,
    CvPoint pt1,
    CvPoint pt2,
    imp1.CvCallback_1 callback,
  ) {
    return _ClipLine_Async(
      imgRect,
      pt1,
      pt2,
      callback,
    );
  }

  late final _ClipLine_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CvRect, CvPoint, CvPoint, imp1.CvCallback_1)>>('ClipLine_Async');
  late final _ClipLine_Async = _ClipLine_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          CvRect, CvPoint, CvPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CompareHist(
    Mat hist1,
    Mat hist2,
    int method,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _CompareHist(
      hist1,
      hist2,
      method,
      rval,
    );
  }

  late final _CompareHistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>>('CompareHist');
  late final _CompareHist = _CompareHistPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> CompareHist_Async(
    Mat hist1,
    Mat hist2,
    int method,
    imp1.CvCallback_1 callback,
  ) {
    return _CompareHist_Async(
      hist1,
      hist2,
      method,
      callback,
    );
  }

  late final _CompareHist_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_1)>>('CompareHist_Async');
  late final _CompareHist_Async = _CompareHist_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ConnectedComponents(
    Mat src,
    Mat dst,
    int connectivity,
    int ltype,
    int ccltype,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ConnectedComponents(
      src,
      dst,
      connectivity,
      ltype,
      ccltype,
      rval,
    );
  }

  late final _ConnectedComponentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('ConnectedComponents');
  late final _ConnectedComponents = _ConnectedComponentsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ConnectedComponentsWithStats(
    Mat src,
    Mat labels,
    Mat stats,
    Mat centroids,
    int connectivity,
    int ltype,
    int ccltype,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ConnectedComponentsWithStats(
      src,
      labels,
      stats,
      centroids,
      connectivity,
      ltype,
      ccltype,
      rval,
    );
  }

  late final _ConnectedComponentsWithStatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('ConnectedComponentsWithStats');
  late final _ConnectedComponentsWithStats =
      _ConnectedComponentsWithStatsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ConnectedComponentsWithStats_Async(
    Mat src,
    int connectivity,
    int ltype,
    int ccltype,
    imp1.CvCallback_4 callback,
  ) {
    return _ConnectedComponentsWithStats_Async(
      src,
      connectivity,
      ltype,
      ccltype,
      callback,
    );
  }

  late final _ConnectedComponentsWithStats_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_4)>>('ConnectedComponentsWithStats_Async');
  late final _ConnectedComponentsWithStats_Async =
      _ConnectedComponentsWithStats_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, int, int, imp1.CvCallback_4)>();

  ffi.Pointer<CvStatus> ConnectedComponents_Async(
    Mat src,
    int connectivity,
    int ltype,
    int ccltype,
    imp1.CvCallback_2 callback,
  ) {
    return _ConnectedComponents_Async(
      src,
      connectivity,
      ltype,
      ccltype,
      callback,
    );
  }

  late final _ConnectedComponents_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_2)>>('ConnectedComponents_Async');
  late final _ConnectedComponents_Async =
      _ConnectedComponents_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, int, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> ContourArea(
    VecPoint pts,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ContourArea(
      pts,
      rval,
    );
  }

  late final _ContourAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<ffi.Double>)>>('ContourArea');
  late final _ContourArea = _ContourAreaPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ContourArea_Async(
    VecPoint pts,
    imp1.CvCallback_1 callback,
  ) {
    return _ContourArea_Async(
      pts,
      callback,
    );
  }

  late final _ContourArea_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, imp1.CvCallback_1)>>('ContourArea_Async');
  late final _ContourArea_Async = _ContourArea_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ConvexHull(
    VecPoint points,
    Mat hull,
    bool clockwise,
    bool returnPoints,
  ) {
    return _ConvexHull(
      points,
      hull,
      clockwise,
      returnPoints,
    );
  }

  late final _ConvexHullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, Mat, ffi.Bool, ffi.Bool)>>('ConvexHull');
  late final _ConvexHull = _ConvexHullPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, Mat, bool, bool)>();

  ffi.Pointer<CvStatus> ConvexHull_Async(
    VecPoint points,
    bool clockwise,
    bool returnPoints,
    imp1.CvCallback_1 callback,
  ) {
    return _ConvexHull_Async(
      points,
      clockwise,
      returnPoints,
      callback,
    );
  }

  late final _ConvexHull_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Bool, ffi.Bool,
              imp1.CvCallback_1)>>('ConvexHull_Async');
  late final _ConvexHull_Async = _ConvexHull_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, bool, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ConvexityDefects(
    VecPoint points,
    Mat hull,
    Mat result,
  ) {
    return _ConvexityDefects(
      points,
      hull,
      result,
    );
  }

  late final _ConvexityDefectsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat)>>(
      'ConvexityDefects');
  late final _ConvexityDefects = _ConvexityDefectsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat)>();

  ffi.Pointer<CvStatus> ConvexityDefects_Async(
    VecPoint points,
    Mat hull,
    imp1.CvCallback_1 callback,
  ) {
    return _ConvexityDefects_Async(
      points,
      hull,
      callback,
    );
  }

  late final _ConvexityDefects_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, Mat, imp1.CvCallback_1)>>('ConvexityDefects_Async');
  late final _ConvexityDefects_Async = _ConvexityDefects_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CornerSubPix(
    Mat img,
    VecPoint2f corners,
    CvSize winSize,
    CvSize zeroZone,
    TermCriteria criteria,
  ) {
    return _CornerSubPix(
      img,
      corners,
      winSize,
      zeroZone,
      criteria,
    );
  }

  late final _CornerSubPixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecPoint2f, CvSize, CvSize, TermCriteria)>>('CornerSubPix');
  late final _CornerSubPix = _CornerSubPixPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecPoint2f, CvSize, CvSize, TermCriteria)>();

  ffi.Pointer<CvStatus> CornerSubPix_Async(
    Mat img,
    VecPoint2f corners,
    CvSize winSize,
    CvSize zeroZone,
    TermCriteria criteria,
    imp1.CvCallback_0 callback,
  ) {
    return _CornerSubPix_Async(
      img,
      corners,
      winSize,
      zeroZone,
      criteria,
      callback,
    );
  }

  late final _CornerSubPix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecPoint2f, CvSize, CvSize,
              TermCriteria, imp1.CvCallback_0)>>('CornerSubPix_Async');
  late final _CornerSubPix_Async = _CornerSubPix_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecPoint2f, CvSize, CvSize, TermCriteria, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> CvtColor(
    Mat src,
    Mat dst,
    int code,
  ) {
    return _CvtColor(
      src,
      dst,
      code,
    );
  }

  late final _CvtColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('CvtColor');
  late final _CvtColor =
      _CvtColorPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> CvtColor_Async(
    Mat src,
    int code,
    imp1.CvCallback_1 callback,
  ) {
    return _CvtColor_Async(
      src,
      code,
      callback,
    );
  }

  late final _CvtColor_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('CvtColor_Async');
  late final _CvtColor_Async = _CvtColor_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Dilate(
    Mat src,
    Mat dst,
    Mat kernel,
  ) {
    return _Dilate(
      src,
      dst,
      kernel,
    );
  }

  late final _DilatePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>('Dilate');
  late final _Dilate =
      _DilatePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> DilateWithParams(
    Mat src,
    Mat dst,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
  ) {
    return _DilateWithParams(
      src,
      dst,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
    );
  }

  late final _DilateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, ffi.Int,
              ffi.Int, Scalar)>>('DilateWithParams');
  late final _DilateWithParams = _DilateWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, CvPoint, int, int, Scalar)>();

  ffi.Pointer<CvStatus> DilateWithParams_Async(
    Mat src,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    imp1.CvCallback_1 callback,
  ) {
    return _DilateWithParams_Async(
      src,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      callback,
    );
  }

  late final _DilateWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint, ffi.Int, ffi.Int,
              Scalar, imp1.CvCallback_1)>>('DilateWithParams_Async');
  late final _DilateWithParams_Async = _DilateWithParams_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, CvPoint, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Dilate_Async(
    Mat src,
    Mat kernel,
    imp1.CvCallback_1 callback,
  ) {
    return _Dilate_Async(
      src,
      kernel,
      callback,
    );
  }

  late final _Dilate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('Dilate_Async');
  late final _Dilate_Async = _Dilate_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> DistanceTransform(
    Mat src,
    Mat dst,
    Mat labels,
    int distanceType,
    int maskSize,
    int labelType,
  ) {
    return _DistanceTransform(
      src,
      dst,
      labels,
      distanceType,
      maskSize,
      labelType,
    );
  }

  late final _DistanceTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>('DistanceTransform');
  late final _DistanceTransform = _DistanceTransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, int, int)>();

  ffi.Pointer<CvStatus> DistanceTransform_Async(
    Mat src,
    int distanceType,
    int maskSize,
    int labelType,
    imp1.CvCallback_2 callback,
  ) {
    return _DistanceTransform_Async(
      src,
      distanceType,
      maskSize,
      labelType,
      callback,
    );
  }

  late final _DistanceTransform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_2)>>('DistanceTransform_Async');
  late final _DistanceTransform_Async = _DistanceTransform_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> DrawContours(
    Mat src,
    VecVecPoint contours,
    int contourIdx,
    Scalar color,
    int thickness,
  ) {
    return _DrawContours(
      src,
      contours,
      contourIdx,
      color,
      thickness,
    );
  }

  late final _DrawContoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int)>>('DrawContours');
  late final _DrawContours = _DrawContoursPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, int, Scalar, int)>();

  ffi.Pointer<CvStatus> DrawContoursWithParams(
    Mat src,
    VecVecPoint contours,
    int contourIdx,
    Scalar color,
    int thickness,
    int lineType,
    Mat hierarchy,
    int maxLevel,
    CvPoint offset,
  ) {
    return _DrawContoursWithParams(
      src,
      contours,
      contourIdx,
      color,
      thickness,
      lineType,
      hierarchy,
      maxLevel,
      offset,
    );
  }

  late final _DrawContoursWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              VecVecPoint,
              ffi.Int,
              Scalar,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Int,
              CvPoint)>>('DrawContoursWithParams');
  late final _DrawContoursWithParams = _DrawContoursWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecVecPoint, int, Scalar, int, int, Mat, int, CvPoint)>();

  ffi.Pointer<CvStatus> DrawContoursWithParams_Async(
    Mat src,
    VecVecPoint contours,
    int contourIdx,
    Scalar color,
    int thickness,
    int lineType,
    Mat hierarchy,
    int maxLevel,
    CvPoint offset,
    imp1.CvCallback_0 callback,
  ) {
    return _DrawContoursWithParams_Async(
      src,
      contours,
      contourIdx,
      color,
      thickness,
      lineType,
      hierarchy,
      maxLevel,
      offset,
      callback,
    );
  }

  late final _DrawContoursWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              VecVecPoint,
              ffi.Int,
              Scalar,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Int,
              CvPoint,
              imp1.CvCallback_0)>>('DrawContoursWithParams_Async');
  late final _DrawContoursWithParams_Async =
      _DrawContoursWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, int, Scalar, int,
              int, Mat, int, CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> DrawContours_Async(
    Mat src,
    VecVecPoint contours,
    int contourIdx,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _DrawContours_Async(
      src,
      contours,
      contourIdx,
      color,
      thickness,
      callback,
    );
  }

  late final _DrawContours_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Int, Scalar,
              ffi.Int, imp1.CvCallback_0)>>('DrawContours_Async');
  late final _DrawContours_Async = _DrawContours_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecVecPoint, int, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Ellipse(
    Mat img,
    CvPoint center,
    CvPoint axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
  ) {
    return _Ellipse(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
    );
  }

  late final _EllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, ffi.Double,
              ffi.Double, ffi.Double, Scalar, ffi.Int)>>('Ellipse');
  late final _Ellipse = _EllipsePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, double, double, double, Scalar, int)>();

  ffi.Pointer<CvStatus> EllipseWithParams(
    Mat img,
    CvPoint center,
    CvPoint axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _EllipseWithParams(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _EllipseWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvPoint,
              CvPoint,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('EllipseWithParams');
  late final _EllipseWithParams = _EllipseWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, double, double,
          double, Scalar, int, int, int)>();

  ffi.Pointer<CvStatus> EllipseWithParams_Async(
    Mat img,
    CvPoint center,
    CvPoint axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _EllipseWithParams_Async(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _EllipseWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvPoint,
              CvPoint,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_0)>>('EllipseWithParams_Async');
  late final _EllipseWithParams_Async = _EllipseWithParams_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, double, double,
          double, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Ellipse_Async(
    Mat img,
    CvPoint center,
    CvPoint axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _Ellipse_Async(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
      callback,
    );
  }

  late final _Ellipse_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvPoint,
              CvPoint,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              Scalar,
              ffi.Int,
              imp1.CvCallback_0)>>('Ellipse_Async');
  late final _Ellipse_Async = _Ellipse_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, double, double,
          double, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> EqualizeHist(
    Mat src,
    Mat dst,
  ) {
    return _EqualizeHist(
      src,
      dst,
    );
  }

  late final _EqualizeHistPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'EqualizeHist');
  late final _EqualizeHist =
      _EqualizeHistPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> EqualizeHist_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _EqualizeHist_Async(
      src,
      callback,
    );
  }

  late final _EqualizeHist_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('EqualizeHist_Async');
  late final _EqualizeHist_Async = _EqualizeHist_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Erode(
    Mat src,
    Mat dst,
    Mat kernel,
  ) {
    return _Erode(
      src,
      dst,
      kernel,
    );
  }

  late final _ErodePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>('Erode');
  late final _Erode =
      _ErodePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> ErodeWithParams(
    Mat src,
    Mat dst,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
  ) {
    return _ErodeWithParams(
      src,
      dst,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
    );
  }

  late final _ErodeWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, ffi.Int,
              ffi.Int, Scalar)>>('ErodeWithParams');
  late final _ErodeWithParams = _ErodeWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, CvPoint, int, int, Scalar)>();

  ffi.Pointer<CvStatus> ErodeWithParams_Async(
    Mat src,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    imp1.CvCallback_1 callback,
  ) {
    return _ErodeWithParams_Async(
      src,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      callback,
    );
  }

  late final _ErodeWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint, ffi.Int, ffi.Int,
              Scalar, imp1.CvCallback_1)>>('ErodeWithParams_Async');
  late final _ErodeWithParams_Async = _ErodeWithParams_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, CvPoint, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Erode_Async(
    Mat src,
    Mat kernel,
    imp1.CvCallback_1 callback,
  ) {
    return _Erode_Async(
      src,
      kernel,
      callback,
    );
  }

  late final _Erode_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('Erode_Async');
  late final _Erode_Async = _Erode_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FillPoly(
    Mat img,
    VecVecPoint points,
    Scalar color,
  ) {
    return _FillPoly(
      img,
      points,
      color,
    );
  }

  late final _FillPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, Scalar)>>('FillPoly');
  late final _FillPoly = _FillPolyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar)>();

  ffi.Pointer<CvStatus> FillPolyWithParams(
    Mat img,
    VecVecPoint points,
    Scalar color,
    int lineType,
    int shift,
    CvPoint offset,
  ) {
    return _FillPolyWithParams(
      img,
      points,
      color,
      lineType,
      shift,
      offset,
    );
  }

  late final _FillPolyWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar, ffi.Int,
              ffi.Int, CvPoint)>>('FillPolyWithParams');
  late final _FillPolyWithParams = _FillPolyWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecVecPoint, Scalar, int, int, CvPoint)>();

  ffi.Pointer<CvStatus> FillPolyWithParams_Async(
    Mat img,
    VecVecPoint points,
    Scalar color,
    int lineType,
    int shift,
    CvPoint offset,
    imp1.CvCallback_0 callback,
  ) {
    return _FillPolyWithParams_Async(
      img,
      points,
      color,
      lineType,
      shift,
      offset,
      callback,
    );
  }

  late final _FillPolyWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              VecVecPoint,
              Scalar,
              ffi.Int,
              ffi.Int,
              CvPoint,
              imp1.CvCallback_0)>>('FillPolyWithParams_Async');
  late final _FillPolyWithParams_Async =
      _FillPolyWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar, int, int,
              CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FillPoly_Async(
    Mat img,
    VecVecPoint points,
    Scalar color,
    imp1.CvCallback_0 callback,
  ) {
    return _FillPoly_Async(
      img,
      points,
      color,
      callback,
    );
  }

  late final _FillPoly_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, Scalar, imp1.CvCallback_0)>>('FillPoly_Async');
  late final _FillPoly_Async = _FillPoly_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecVecPoint, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Filter2D(
    Mat src,
    Mat dst,
    int ddepth,
    Mat kernel,
    CvPoint anchor,
    double delta,
    int borderType,
  ) {
    return _Filter2D(
      src,
      dst,
      ddepth,
      kernel,
      anchor,
      delta,
      borderType,
    );
  }

  late final _Filter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, CvPoint,
              ffi.Double, ffi.Int)>>('Filter2D');
  late final _Filter2D = _Filter2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, Mat, CvPoint, double, int)>();

  ffi.Pointer<CvStatus> Filter2D_Async(
    Mat src,
    int ddepth,
    Mat kernel,
    CvPoint anchor,
    double delta,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _Filter2D_Async(
      src,
      ddepth,
      kernel,
      anchor,
      delta,
      borderType,
      callback,
    );
  }

  late final _Filter2D_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, CvPoint, ffi.Double,
              ffi.Int, imp1.CvCallback_1)>>('Filter2D_Async');
  late final _Filter2D_Async = _Filter2D_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, Mat, CvPoint, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FindContours(
    Mat src,
    Mat hierarchy,
    int mode,
    int method,
    ffi.Pointer<VecVecPoint> rval,
  ) {
    return _FindContours(
      src,
      hierarchy,
      mode,
      method,
      rval,
    );
  }

  late final _FindContoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int,
              ffi.Pointer<VecVecPoint>)>>('FindContours');
  late final _FindContours = _FindContoursPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, ffi.Pointer<VecVecPoint>)>();

  ffi.Pointer<CvStatus> FindContours_Async(
    Mat src,
    int mode,
    int method,
    imp1.CvCallback_2 callback,
  ) {
    return _FindContours_Async(
      src,
      mode,
      method,
      callback,
    );
  }

  late final _FindContours_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, imp1.CvCallback_2)>>('FindContours_Async');
  late final _FindContours_Async = _FindContours_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> FitEllipse(
    VecPoint pts,
    ffi.Pointer<RotatedRect> rval,
  ) {
    return _FitEllipse(
      pts,
      rval,
    );
  }

  late final _FitEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<RotatedRect>)>>('FitEllipse');
  late final _FitEllipse = _FitEllipsePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>)>();

  ffi.Pointer<CvStatus> FitEllipse_Async(
    VecPoint pts,
    imp1.CvCallback_1 callback,
  ) {
    return _FitEllipse_Async(
      pts,
      callback,
    );
  }

  late final _FitEllipse_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, imp1.CvCallback_1)>>('FitEllipse_Async');
  late final _FitEllipse_Async = _FitEllipse_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FitLine(
    VecPoint pts,
    Mat line,
    int distType,
    double param,
    double reps,
    double aeps,
  ) {
    return _FitLine(
      pts,
      line,
      distType,
      param,
      reps,
      aeps,
    );
  }

  late final _FitLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, Mat, ffi.Int, ffi.Double,
              ffi.Double, ffi.Double)>>('FitLine');
  late final _FitLine = _FitLinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, Mat, int, double, double, double)>();

  ffi.Pointer<CvStatus> FitLine_Async(
    VecPoint pts,
    int distType,
    double param,
    double reps,
    double aeps,
    imp1.CvCallback_1 callback,
  ) {
    return _FitLine_Async(
      pts,
      distType,
      param,
      reps,
      aeps,
      callback,
    );
  }

  late final _FitLine_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Int, ffi.Double,
              ffi.Double, ffi.Double, imp1.CvCallback_1)>>('FitLine_Async');
  late final _FitLine_Async = _FitLine_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, int, double, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FloodFill(
    Mat src,
    Mat mask,
    CvPoint seedPoint,
    Scalar newVal,
    ffi.Pointer<CvRect> rect,
    Scalar loDiff,
    Scalar upDiff,
    int flags,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _FloodFill(
      src,
      mask,
      seedPoint,
      newVal,
      rect,
      loDiff,
      upDiff,
      flags,
      rval,
    );
  }

  late final _FloodFillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              CvPoint,
              Scalar,
              ffi.Pointer<CvRect>,
              Scalar,
              Scalar,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('FloodFill');
  late final _FloodFill = _FloodFillPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint, Scalar,
          ffi.Pointer<CvRect>, Scalar, Scalar, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> FloodFill_Async(
    Mat src,
    Mat mask,
    CvPoint seedPoint,
    Scalar newVal,
    Scalar loDiff,
    Scalar upDiff,
    int flags,
    imp1.CvCallback_2 callback,
  ) {
    return _FloodFill_Async(
      src,
      mask,
      seedPoint,
      newVal,
      loDiff,
      upDiff,
      flags,
      callback,
    );
  }

  late final _FloodFill_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint, Scalar, Scalar,
              Scalar, ffi.Int, imp1.CvCallback_2)>>('FloodFill_Async');
  late final _FloodFill_Async = _FloodFill_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, CvPoint, Scalar, Scalar, Scalar, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> GaussianBlur(
    Mat src,
    Mat dst,
    CvSize ps,
    double sX,
    double sY,
    int bt,
  ) {
    return _GaussianBlur(
      src,
      dst,
      ps,
      sX,
      sY,
      bt,
    );
  }

  late final _GaussianBlurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Double,
              ffi.Double, ffi.Int)>>('GaussianBlur');
  late final _GaussianBlur = _GaussianBlurPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, double, double, int)>();

  ffi.Pointer<CvStatus> GaussianBlur_Async(
    Mat src,
    CvSize ps,
    double sX,
    double sY,
    int bt,
    imp1.CvCallback_1 callback,
  ) {
    return _GaussianBlur_Async(
      src,
      ps,
      sX,
      sY,
      bt,
      callback,
    );
  }

  late final _GaussianBlur_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Double, ffi.Double,
              ffi.Int, imp1.CvCallback_1)>>('GaussianBlur_Async');
  late final _GaussianBlur_Async = _GaussianBlur_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvSize, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetAffineTransform(
    VecPoint src,
    VecPoint dst,
    ffi.Pointer<Mat> rval,
  ) {
    return _GetAffineTransform(
      src,
      dst,
      rval,
    );
  }

  late final _GetAffineTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, VecPoint, ffi.Pointer<Mat>)>>('GetAffineTransform');
  late final _GetAffineTransform = _GetAffineTransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> GetAffineTransform2f(
    VecPoint2f src,
    VecPoint2f dst,
    ffi.Pointer<Mat> rval,
  ) {
    return _GetAffineTransform2f(
      src,
      dst,
      rval,
    );
  }

  late final _GetAffineTransform2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f,
              ffi.Pointer<Mat>)>>('GetAffineTransform2f');
  late final _GetAffineTransform2f = _GetAffineTransform2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> GetAffineTransform2f_Async(
    VecPoint2f src,
    VecPoint2f dst,
    imp1.CvCallback_1 callback,
  ) {
    return _GetAffineTransform2f_Async(
      src,
      dst,
      callback,
    );
  }

  late final _GetAffineTransform2f_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f,
              imp1.CvCallback_1)>>('GetAffineTransform2f_Async');
  late final _GetAffineTransform2f_Async =
      _GetAffineTransform2f_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, VecPoint2f, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetAffineTransform_Async(
    VecPoint src,
    VecPoint dst,
    imp1.CvCallback_1 callback,
  ) {
    return _GetAffineTransform_Async(
      src,
      dst,
      callback,
    );
  }

  late final _GetAffineTransform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint,
              imp1.CvCallback_1)>>('GetAffineTransform_Async');
  late final _GetAffineTransform_Async =
      _GetAffineTransform_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, VecPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetGaussianKernel(
    int ksize,
    double sigma,
    int ktype,
    ffi.Pointer<Mat> rval,
  ) {
    return _GetGaussianKernel(
      ksize,
      sigma,
      ktype,
      rval,
    );
  }

  late final _GetGaussianKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Double, ffi.Int,
              ffi.Pointer<Mat>)>>('GetGaussianKernel');
  late final _GetGaussianKernel = _GetGaussianKernelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, double, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> GetGaussianKernel_Async(
    int ksize,
    double sigma,
    int ktype,
    imp1.CvCallback_1 callback,
  ) {
    return _GetGaussianKernel_Async(
      ksize,
      sigma,
      ktype,
      callback,
    );
  }

  late final _GetGaussianKernel_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('GetGaussianKernel_Async');
  late final _GetGaussianKernel_Async = _GetGaussianKernel_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetPerspectiveTransform(
    VecPoint src,
    VecPoint dst,
    ffi.Pointer<Mat> rval,
    int solveMethod,
  ) {
    return _GetPerspectiveTransform(
      src,
      dst,
      rval,
      solveMethod,
    );
  }

  late final _GetPerspectiveTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>,
              ffi.Int)>>('GetPerspectiveTransform');
  late final _GetPerspectiveTransform = _GetPerspectiveTransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, VecPoint, ffi.Pointer<Mat>, int)>();

  ffi.Pointer<CvStatus> GetPerspectiveTransform2f(
    VecPoint2f src,
    VecPoint2f dst,
    ffi.Pointer<Mat> rval,
    int solveMethod,
  ) {
    return _GetPerspectiveTransform2f(
      src,
      dst,
      rval,
      solveMethod,
    );
  }

  late final _GetPerspectiveTransform2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f,
              ffi.Pointer<Mat>, ffi.Int)>>('GetPerspectiveTransform2f');
  late final _GetPerspectiveTransform2f =
      _GetPerspectiveTransform2fPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, int)>();

  ffi.Pointer<CvStatus> GetPerspectiveTransform2f_Async(
    VecPoint2f src,
    VecPoint2f dst,
    int solveMethod,
    imp1.CvCallback_1 callback,
  ) {
    return _GetPerspectiveTransform2f_Async(
      src,
      dst,
      solveMethod,
      callback,
    );
  }

  late final _GetPerspectiveTransform2f_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Int,
              imp1.CvCallback_1)>>('GetPerspectiveTransform2f_Async');
  late final _GetPerspectiveTransform2f_Async =
      _GetPerspectiveTransform2f_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, VecPoint2f, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetPerspectiveTransform_Async(
    VecPoint src,
    VecPoint dst,
    int solveMethod,
    imp1.CvCallback_1 callback,
  ) {
    return _GetPerspectiveTransform_Async(
      src,
      dst,
      solveMethod,
      callback,
    );
  }

  late final _GetPerspectiveTransform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Int,
              imp1.CvCallback_1)>>('GetPerspectiveTransform_Async');
  late final _GetPerspectiveTransform_Async =
      _GetPerspectiveTransform_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, VecPoint, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetRectSubPix(
    Mat src,
    CvSize patchSize,
    CvPoint2f center,
    Mat dst,
  ) {
    return _GetRectSubPix(
      src,
      patchSize,
      center,
      dst,
    );
  }

  late final _GetRectSubPixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvSize, CvPoint2f, Mat)>>('GetRectSubPix');
  late final _GetRectSubPix = _GetRectSubPixPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvSize, CvPoint2f, Mat)>();

  ffi.Pointer<CvStatus> GetRectSubPix_Async(
    Mat src,
    CvSize patchSize,
    CvPoint2f center,
    imp1.CvCallback_1 callback,
  ) {
    return _GetRectSubPix_Async(
      src,
      patchSize,
      center,
      callback,
    );
  }

  late final _GetRectSubPix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, CvPoint2f,
              imp1.CvCallback_1)>>('GetRectSubPix_Async');
  late final _GetRectSubPix_Async = _GetRectSubPix_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvSize, CvPoint2f, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetRotationMatrix2D(
    CvPoint2f center,
    double angle,
    double scale,
    ffi.Pointer<Mat> rval,
  ) {
    return _GetRotationMatrix2D(
      center,
      angle,
      scale,
      rval,
    );
  }

  late final _GetRotationMatrix2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CvPoint2f, ffi.Double, ffi.Double,
              ffi.Pointer<Mat>)>>('GetRotationMatrix2D');
  late final _GetRotationMatrix2D = _GetRotationMatrix2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          CvPoint2f, double, double, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> GetRotationMatrix2D_Async(
    CvPoint2f center,
    double angle,
    double scale,
    imp1.CvCallback_1 callback,
  ) {
    return _GetRotationMatrix2D_Async(
      center,
      angle,
      scale,
      callback,
    );
  }

  late final _GetRotationMatrix2D_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CvPoint2f, ffi.Double, ffi.Double,
              imp1.CvCallback_1)>>('GetRotationMatrix2D_Async');
  late final _GetRotationMatrix2D_Async =
      _GetRotationMatrix2D_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CvPoint2f, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetStructuringElement(
    int shape,
    CvSize ksize,
    ffi.Pointer<Mat> rval,
  ) {
    return _GetStructuringElement(
      shape,
      ksize,
      rval,
    );
  }

  late final _GetStructuringElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, CvSize, ffi.Pointer<Mat>)>>('GetStructuringElement');
  late final _GetStructuringElement = _GetStructuringElementPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, CvSize, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> GetStructuringElement_Async(
    int shape,
    CvSize ksize,
    CvPoint anchor,
    imp1.CvCallback_1 callback,
  ) {
    return _GetStructuringElement_Async(
      shape,
      ksize,
      anchor,
      callback,
    );
  }

  late final _GetStructuringElement_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, CvSize, CvPoint,
              imp1.CvCallback_1)>>('GetStructuringElement_Async');
  late final _GetStructuringElement_Async =
      _GetStructuringElement_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, CvSize, CvPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GetTextSizeWithBaseline(
    ffi.Pointer<ffi.Char> text,
    int fontFace,
    double fontScale,
    int thickness,
    ffi.Pointer<ffi.Int> baseline,
    ffi.Pointer<CvSize> rval,
  ) {
    return _GetTextSizeWithBaseline(
      text,
      fontFace,
      fontScale,
      thickness,
      baseline,
      rval,
    );
  }

  late final _GetTextSizeWithBaselinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<CvSize>)>>('GetTextSizeWithBaseline');
  late final _GetTextSizeWithBaseline = _GetTextSizeWithBaselinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<CvSize>)>();

  ffi.Pointer<CvStatus> GetTextSizeWithBaseline_Async(
    ffi.Pointer<ffi.Char> text,
    int fontFace,
    double fontScale,
    int thickness,
    imp1.CvCallback_2 callback,
  ) {
    return _GetTextSizeWithBaseline_Async(
      text,
      fontFace,
      fontScale,
      thickness,
      callback,
    );
  }

  late final _GetTextSizeWithBaseline_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              imp1.CvCallback_2)>>('GetTextSizeWithBaseline_Async');
  late final _GetTextSizeWithBaseline_Async =
      _GetTextSizeWithBaseline_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, int, double, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> GoodFeaturesToTrack(
    Mat img,
    ffi.Pointer<VecPoint2f> corners,
    int maxCorners,
    double quality,
    double minDist,
    Mat mask,
    int blockSize,
    bool useHarrisDetector,
    double k,
  ) {
    return _GoodFeaturesToTrack(
      img,
      corners,
      maxCorners,
      quality,
      minDist,
      mask,
      blockSize,
      useHarrisDetector,
      k,
    );
  }

  late final _GoodFeaturesToTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<VecPoint2f>,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              Mat,
              ffi.Int,
              ffi.Bool,
              ffi.Double)>>('GoodFeaturesToTrack');
  late final _GoodFeaturesToTrack = _GoodFeaturesToTrackPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, int, double,
          double, Mat, int, bool, double)>();

  ffi.Pointer<CvStatus> GoodFeaturesToTrackWithGradient(
    Mat img,
    ffi.Pointer<VecPoint2f> corners,
    int maxCorners,
    double quality,
    double minDist,
    Mat mask,
    int blockSize,
    int gradientSize,
    bool useHarrisDetector,
    double k,
  ) {
    return _GoodFeaturesToTrackWithGradient(
      img,
      corners,
      maxCorners,
      quality,
      minDist,
      mask,
      blockSize,
      gradientSize,
      useHarrisDetector,
      k,
    );
  }

  late final _GoodFeaturesToTrackWithGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<VecPoint2f>,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Double)>>('GoodFeaturesToTrackWithGradient');
  late final _GoodFeaturesToTrackWithGradient =
      _GoodFeaturesToTrackWithGradientPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, int,
              double, double, Mat, int, int, bool, double)>();

  ffi.Pointer<CvStatus> GoodFeaturesToTrackWithGradient_Async(
    Mat img,
    int maxCorners,
    double quality,
    double minDist,
    Mat mask,
    int blockSize,
    int gradientSize,
    bool useHarrisDetector,
    double k,
    imp1.CvCallback_1 callback,
  ) {
    return _GoodFeaturesToTrackWithGradient_Async(
      img,
      maxCorners,
      quality,
      minDist,
      mask,
      blockSize,
      gradientSize,
      useHarrisDetector,
      k,
      callback,
    );
  }

  late final _GoodFeaturesToTrackWithGradient_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Double,
              imp1.CvCallback_1)>>('GoodFeaturesToTrackWithGradient_Async');
  late final _GoodFeaturesToTrackWithGradient_Async =
      _GoodFeaturesToTrackWithGradient_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, int, double, double, Mat, int,
              int, bool, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GoodFeaturesToTrack_Async(
    Mat img,
    int maxCorners,
    double quality,
    double minDist,
    Mat mask,
    int blockSize,
    bool useHarrisDetector,
    double k,
    imp1.CvCallback_1 callback,
  ) {
    return _GoodFeaturesToTrack_Async(
      img,
      maxCorners,
      quality,
      minDist,
      mask,
      blockSize,
      useHarrisDetector,
      k,
      callback,
    );
  }

  late final _GoodFeaturesToTrack_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              Mat,
              ffi.Int,
              ffi.Bool,
              ffi.Double,
              imp1.CvCallback_1)>>('GoodFeaturesToTrack_Async');
  late final _GoodFeaturesToTrack_Async =
      _GoodFeaturesToTrack_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, int, double, double, Mat, int,
              bool, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GrabCut(
    Mat img,
    Mat mask,
    CvRect rect,
    Mat bgdModel,
    Mat fgdModel,
    int iterCount,
    int mode,
  ) {
    return _GrabCut(
      img,
      mask,
      rect,
      bgdModel,
      fgdModel,
      iterCount,
      mode,
    );
  }

  late final _GrabCutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvRect, Mat, Mat, ffi.Int, ffi.Int)>>('GrabCut');
  late final _GrabCut = _GrabCutPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvRect, Mat, Mat, int, int)>();

  ffi.Pointer<CvStatus> GrabCut_Async(
    Mat img,
    Mat mask,
    CvRect rect,
    Mat bgdModel,
    Mat fgdModel,
    int iterCount,
    int mode,
    imp1.CvCallback_0 callback,
  ) {
    return _GrabCut_Async(
      img,
      mask,
      rect,
      bgdModel,
      fgdModel,
      iterCount,
      mode,
      callback,
    );
  }

  late final _GrabCut_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvRect, Mat, Mat, ffi.Int,
              ffi.Int, imp1.CvCallback_0)>>('GrabCut_Async');
  late final _GrabCut_Async = _GrabCut_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, CvRect, Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> HoughCircles(
    Mat src,
    Mat circles,
    int method,
    double dp,
    double minDist,
  ) {
    return _HoughCircles(
      src,
      circles,
      method,
      dp,
      minDist,
    );
  }

  late final _HoughCirclesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>('HoughCircles');
  late final _HoughCircles = _HoughCirclesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double)>();

  ffi.Pointer<CvStatus> HoughCirclesWithParams(
    Mat src,
    Mat circles,
    int method,
    double dp,
    double minDist,
    double param1,
    double param2,
    int minRadius,
    int maxRadius,
  ) {
    return _HoughCirclesWithParams(
      src,
      circles,
      method,
      dp,
      minDist,
      param1,
      param2,
      minRadius,
      maxRadius,
    );
  }

  late final _HoughCirclesWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Int)>>('HoughCirclesWithParams');
  late final _HoughCirclesWithParams = _HoughCirclesWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, double, double, double, double, int, int)>();

  ffi.Pointer<CvStatus> HoughCirclesWithParams_Async(
    Mat src,
    int method,
    double dp,
    double minDist,
    double param1,
    double param2,
    int minRadius,
    int maxRadius,
    imp1.CvCallback_1 callback,
  ) {
    return _HoughCirclesWithParams_Async(
      src,
      method,
      dp,
      minDist,
      param1,
      param2,
      minRadius,
      maxRadius,
      callback,
    );
  }

  late final _HoughCirclesWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_1)>>('HoughCirclesWithParams_Async');
  late final _HoughCirclesWithParams_Async =
      _HoughCirclesWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, int, double, double, double,
              double, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HoughCircles_Async(
    Mat src,
    int method,
    double dp,
    double minDist,
    imp1.CvCallback_1 callback,
  ) {
    return _HoughCircles_Async(
      src,
      method,
      dp,
      minDist,
      callback,
    );
  }

  late final _HoughCircles_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Double, ffi.Double,
              imp1.CvCallback_1)>>('HoughCircles_Async');
  late final _HoughCircles_Async = _HoughCircles_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HoughLines(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
    double srn,
    double stn,
    double min_theta,
    double max_theta,
  ) {
    return _HoughLines(
      src,
      lines,
      rho,
      theta,
      threshold,
      srn,
      stn,
      min_theta,
      max_theta,
    );
  }

  late final _HoughLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('HoughLines');
  late final _HoughLines = _HoughLinesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, double, double, double, double)>();

  ffi.Pointer<CvStatus> HoughLinesP(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
  ) {
    return _HoughLinesP(
      src,
      lines,
      rho,
      theta,
      threshold,
    );
  }

  late final _HoughLinesPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>('HoughLinesP');
  late final _HoughLinesP = _HoughLinesPPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int)>();

  ffi.Pointer<CvStatus> HoughLinesPWithParams(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
    double minLineLength,
    double maxLineGap,
  ) {
    return _HoughLinesPWithParams(
      src,
      lines,
      rho,
      theta,
      threshold,
      minLineLength,
      maxLineGap,
    );
  }

  late final _HoughLinesPWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double,
              ffi.Int, ffi.Double, ffi.Double)>>('HoughLinesPWithParams');
  late final _HoughLinesPWithParams = _HoughLinesPWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, double, double)>();

  ffi.Pointer<CvStatus> HoughLinesPWithParams_Async(
    Mat src,
    double rho,
    double theta,
    int threshold,
    double minLineLength,
    double maxLineGap,
    imp1.CvCallback_1 callback,
  ) {
    return _HoughLinesPWithParams_Async(
      src,
      rho,
      theta,
      threshold,
      minLineLength,
      maxLineGap,
      callback,
    );
  }

  late final _HoughLinesPWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              imp1.CvCallback_1)>>('HoughLinesPWithParams_Async');
  late final _HoughLinesPWithParams_Async =
      _HoughLinesPWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, double, int, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HoughLinesP_Async(
    Mat src,
    double rho,
    double theta,
    int threshold,
    imp1.CvCallback_1 callback,
  ) {
    return _HoughLinesP_Async(
      src,
      rho,
      theta,
      threshold,
      callback,
    );
  }

  late final _HoughLinesP_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('HoughLinesP_Async');
  late final _HoughLinesP_Async = _HoughLinesP_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HoughLinesPointSet(
    Mat points,
    Mat lines,
    int lines_max,
    int threshold,
    double min_rho,
    double max_rho,
    double rho_step,
    double min_theta,
    double max_theta,
    double theta_step,
  ) {
    return _HoughLinesPointSet(
      points,
      lines,
      lines_max,
      threshold,
      min_rho,
      max_rho,
      rho_step,
      min_theta,
      max_theta,
      theta_step,
    );
  }

  late final _HoughLinesPointSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('HoughLinesPointSet');
  late final _HoughLinesPointSet = _HoughLinesPointSetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, double, double, double,
          double, double, double)>();

  ffi.Pointer<CvStatus> HoughLinesPointSet_Async(
    Mat points,
    int lines_max,
    int threshold,
    double min_rho,
    double max_rho,
    double rho_step,
    double min_theta,
    double max_theta,
    double theta_step,
    imp1.CvCallback_1 callback,
  ) {
    return _HoughLinesPointSet_Async(
      points,
      lines_max,
      threshold,
      min_rho,
      max_rho,
      rho_step,
      min_theta,
      max_theta,
      theta_step,
      callback,
    );
  }

  late final _HoughLinesPointSet_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              imp1.CvCallback_1)>>('HoughLinesPointSet_Async');
  late final _HoughLinesPointSet_Async =
      _HoughLinesPointSet_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, int, int, double, double, double,
              double, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HoughLines_Async(
    Mat src,
    double rho,
    double theta,
    int threshold,
    double srn,
    double stn,
    double min_theta,
    double max_theta,
    imp1.CvCallback_1 callback,
  ) {
    return _HoughLines_Async(
      src,
      rho,
      theta,
      threshold,
      srn,
      stn,
      min_theta,
      max_theta,
      callback,
    );
  }

  late final _HoughLines_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              imp1.CvCallback_1)>>('HoughLines_Async');
  late final _HoughLines_Async = _HoughLines_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, double, int, double, double,
          double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Integral(
    Mat src,
    Mat sum,
    Mat sqsum,
    Mat tilted,
    int sdepth,
    int sqdepth,
  ) {
    return _Integral(
      src,
      sum,
      sqsum,
      tilted,
      sdepth,
      sqdepth,
    );
  }

  late final _IntegralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, ffi.Int)>>('Integral');
  late final _Integral = _IntegralPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, int)>();

  ffi.Pointer<CvStatus> Integral_Async(
    Mat src,
    int sdepth,
    int sqdepth,
    imp1.CvCallback_3 callback,
  ) {
    return _Integral_Async(
      src,
      sdepth,
      sqdepth,
      callback,
    );
  }

  late final _Integral_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, imp1.CvCallback_3)>>('Integral_Async');
  late final _Integral_Async = _Integral_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> InvertAffineTransform(
    Mat src,
    Mat dst,
  ) {
    return _InvertAffineTransform(
      src,
      dst,
    );
  }

  late final _InvertAffineTransformPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'InvertAffineTransform');
  late final _InvertAffineTransform = _InvertAffineTransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> InvertAffineTransform_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _InvertAffineTransform_Async(
      src,
      callback,
    );
  }

  late final _InvertAffineTransform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('InvertAffineTransform_Async');
  late final _InvertAffineTransform_Async = _InvertAffineTransform_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Laplacian(
    Mat src,
    Mat dst,
    int dDepth,
    int kSize,
    double scale,
    double delta,
    int borderType,
  ) {
    return _Laplacian(
      src,
      dst,
      dDepth,
      kSize,
      scale,
      delta,
      borderType,
    );
  }

  late final _LaplacianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double,
              ffi.Double, ffi.Int)>>('Laplacian');
  late final _Laplacian = _LaplacianPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, double, double, int)>();

  ffi.Pointer<CvStatus> Laplacian_Async(
    Mat src,
    int dDepth,
    int kSize,
    double scale,
    double delta,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _Laplacian_Async(
      src,
      dDepth,
      kSize,
      scale,
      delta,
      borderType,
      callback,
    );
  }

  late final _Laplacian_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Double,
              ffi.Double, ffi.Int, imp1.CvCallback_1)>>('Laplacian_Async');
  late final _Laplacian_Async = _Laplacian_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Line(
    Mat img,
    CvPoint pt1,
    CvPoint pt2,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _Line(
      img,
      pt1,
      pt2,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _LinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, ffi.Int,
              ffi.Int, ffi.Int)>>('Line');
  late final _Line = _LinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, Scalar, int, int, int)>();

  ffi.Pointer<CvStatus> Line_Async(
    Mat img,
    CvPoint pt1,
    CvPoint pt2,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _Line_Async(
      img,
      pt1,
      pt2,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _Line_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, ffi.Int,
              ffi.Int, ffi.Int, imp1.CvCallback_0)>>('Line_Async');
  late final _Line_Async = _Line_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> LinearPolar(
    Mat src,
    Mat dst,
    CvPoint2f center,
    double maxRadius,
    int flags,
  ) {
    return _LinearPolar(
      src,
      dst,
      center,
      maxRadius,
      flags,
    );
  }

  late final _LinearPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvPoint2f, ffi.Double, ffi.Int)>>('LinearPolar');
  late final _LinearPolar = _LinearPolarPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint2f, double, int)>();

  ffi.Pointer<CvStatus> LinearPolar_Async(
    Mat src,
    CvPoint2f center,
    double maxRadius,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _LinearPolar_Async(
      src,
      center,
      maxRadius,
      flags,
      callback,
    );
  }

  late final _LinearPolar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint2f, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('LinearPolar_Async');
  late final _LinearPolar_Async = _LinearPolar_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint2f, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> LogPolar(
    Mat src,
    Mat dst,
    CvPoint2f center,
    double m,
    int flags,
  ) {
    return _LogPolar(
      src,
      dst,
      center,
      m,
      flags,
    );
  }

  late final _LogPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvPoint2f, ffi.Double, ffi.Int)>>('LogPolar');
  late final _LogPolar = _LogPolarPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint2f, double, int)>();

  ffi.Pointer<CvStatus> LogPolar_Async(
    Mat src,
    CvPoint2f center,
    double m,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _LogPolar_Async(
      src,
      center,
      m,
      flags,
      callback,
    );
  }

  late final _LogPolar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint2f, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('LogPolar_Async');
  late final _LogPolar_Async = _LogPolar_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint2f, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_Accumulate(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Accumulate(
      src,
      dst,
    );
  }

  late final _Mat_AccumulatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_Accumulate');
  late final _Mat_Accumulate =
      _Mat_AccumulatePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulateProduct(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_AccumulateProduct(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_AccumulateProductPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_AccumulateProduct');
  late final _Mat_AccumulateProduct = _Mat_AccumulateProductPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulateProductWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_AccumulateProductWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_AccumulateProductWithMaskPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>>(
      'Mat_AccumulateProductWithMask');
  late final _Mat_AccumulateProductWithMask = _Mat_AccumulateProductWithMaskPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulateProductWithMask_Async(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulateProductWithMask_Async(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _Mat_AccumulateProductWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat,
              imp1.CvCallback_0)>>('Mat_AccumulateProductWithMask_Async');
  late final _Mat_AccumulateProductWithMask_Async =
      _Mat_AccumulateProductWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_AccumulateProduct_Async(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulateProduct_Async(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _Mat_AccumulateProduct_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_0)>>('Mat_AccumulateProduct_Async');
  late final _Mat_AccumulateProduct_Async =
      _Mat_AccumulateProduct_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_AccumulateSquare(
    Mat src,
    Mat dst,
  ) {
    return _Mat_AccumulateSquare(
      src,
      dst,
    );
  }

  late final _Mat_AccumulateSquarePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_AccumulateSquare');
  late final _Mat_AccumulateSquare = _Mat_AccumulateSquarePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulateSquareWithMask(
    Mat src,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_AccumulateSquareWithMask(
      src,
      dst,
      mask,
    );
  }

  late final _Mat_AccumulateSquareWithMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_AccumulateSquareWithMask');
  late final _Mat_AccumulateSquareWithMask = _Mat_AccumulateSquareWithMaskPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulateSquareWithMask_Async(
    Mat src,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulateSquareWithMask_Async(
      src,
      dst,
      mask,
      callback,
    );
  }

  late final _Mat_AccumulateSquareWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_0)>>('Mat_AccumulateSquareWithMask_Async');
  late final _Mat_AccumulateSquareWithMask_Async =
      _Mat_AccumulateSquareWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_AccumulateSquare_Async(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulateSquare_Async(
      src,
      dst,
      callback,
    );
  }

  late final _Mat_AccumulateSquare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('Mat_AccumulateSquare_Async');
  late final _Mat_AccumulateSquare_Async =
      _Mat_AccumulateSquare_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_AccumulateWithMask(
    Mat src,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_AccumulateWithMask(
      src,
      dst,
      mask,
    );
  }

  late final _Mat_AccumulateWithMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_AccumulateWithMask');
  late final _Mat_AccumulateWithMask = _Mat_AccumulateWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulateWithMask_Async(
    Mat src,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulateWithMask_Async(
      src,
      dst,
      mask,
      callback,
    );
  }

  late final _Mat_AccumulateWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_0)>>('Mat_AccumulateWithMask_Async');
  late final _Mat_AccumulateWithMask_Async =
      _Mat_AccumulateWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_Accumulate_Async(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_Accumulate_Async(
      src,
      dst,
      callback,
    );
  }

  late final _Mat_Accumulate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('Mat_Accumulate_Async');
  late final _Mat_Accumulate_Async = _Mat_Accumulate_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_AccumulatedWeighted(
    Mat src,
    Mat dst,
    double alpha,
  ) {
    return _Mat_AccumulatedWeighted(
      src,
      dst,
      alpha,
    );
  }

  late final _Mat_AccumulatedWeightedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double)>>('Mat_AccumulatedWeighted');
  late final _Mat_AccumulatedWeighted = _Mat_AccumulatedWeightedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double)>();

  ffi.Pointer<CvStatus> Mat_AccumulatedWeightedWithMask(
    Mat src,
    Mat dst,
    double alpha,
    Mat mask,
  ) {
    return _Mat_AccumulatedWeightedWithMask(
      src,
      dst,
      alpha,
      mask,
    );
  }

  late final _Mat_AccumulatedWeightedWithMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, Mat)>>('Mat_AccumulatedWeightedWithMask');
  late final _Mat_AccumulatedWeightedWithMask =
      _Mat_AccumulatedWeightedWithMaskPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, double, Mat)>();

  ffi.Pointer<CvStatus> Mat_AccumulatedWeightedWithMask_Async(
    Mat src,
    Mat dst,
    double alpha,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulatedWeightedWithMask_Async(
      src,
      dst,
      alpha,
      mask,
      callback,
    );
  }

  late final _Mat_AccumulatedWeightedWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat,
              imp1.CvCallback_0)>>('Mat_AccumulatedWeightedWithMask_Async');
  late final _Mat_AccumulatedWeightedWithMask_Async =
      _Mat_AccumulatedWeightedWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_AccumulatedWeighted_Async(
    Mat src,
    Mat dst,
    double alpha,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_AccumulatedWeighted_Async(
      src,
      dst,
      alpha,
      callback,
    );
  }

  late final _Mat_AccumulatedWeighted_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double,
              imp1.CvCallback_0)>>('Mat_AccumulatedWeighted_Async');
  late final _Mat_AccumulatedWeighted_Async =
      _Mat_AccumulatedWeighted_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> MatchShapes(
    VecPoint contour1,
    VecPoint contour2,
    int method,
    double parameter,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _MatchShapes(
      contour1,
      contour2,
      method,
      parameter,
      rval,
    );
  }

  late final _MatchShapesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Int,
              ffi.Double, ffi.Pointer<ffi.Double>)>>('MatchShapes');
  late final _MatchShapes = _MatchShapesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, VecPoint, int, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> MatchShapes_Async(
    VecPoint contour1,
    VecPoint contour2,
    int method,
    double parameter,
    imp1.CvCallback_1 callback,
  ) {
    return _MatchShapes_Async(
      contour1,
      contour2,
      method,
      parameter,
      callback,
    );
  }

  late final _MatchShapes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Int,
              ffi.Double, imp1.CvCallback_1)>>('MatchShapes_Async');
  late final _MatchShapes_Async = _MatchShapes_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, VecPoint, int, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MatchTemplate(
    Mat image,
    Mat templ,
    Mat result,
    int method,
    Mat mask,
  ) {
    return _MatchTemplate(
      image,
      templ,
      result,
      method,
      mask,
    );
  }

  late final _MatchTemplatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, Mat)>>('MatchTemplate');
  late final _MatchTemplate = _MatchTemplatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, Mat)>();

  ffi.Pointer<CvStatus> MatchTemplate_Async(
    Mat image,
    Mat templ,
    int method,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _MatchTemplate_Async(
      image,
      templ,
      method,
      mask,
      callback,
    );
  }

  late final _MatchTemplate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat,
              imp1.CvCallback_1)>>('MatchTemplate_Async');
  late final _MatchTemplate_Async = _MatchTemplate_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MedianBlur(
    Mat src,
    Mat dst,
    int ksize,
  ) {
    return _MedianBlur(
      src,
      dst,
      ksize,
    );
  }

  late final _MedianBlurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('MedianBlur');
  late final _MedianBlur = _MedianBlurPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> MedianBlur_Async(
    Mat src,
    int ksize,
    imp1.CvCallback_1 callback,
  ) {
    return _MedianBlur_Async(
      src,
      ksize,
      callback,
    );
  }

  late final _MedianBlur_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('MedianBlur_Async');
  late final _MedianBlur_Async = _MedianBlur_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MinAreaRect(
    VecPoint pts,
    ffi.Pointer<RotatedRect> rval,
  ) {
    return _MinAreaRect(
      pts,
      rval,
    );
  }

  late final _MinAreaRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<RotatedRect>)>>('MinAreaRect');
  late final _MinAreaRect = _MinAreaRectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>)>();

  ffi.Pointer<CvStatus> MinAreaRect_Async(
    VecPoint pts,
    imp1.CvCallback_1 callback,
  ) {
    return _MinAreaRect_Async(
      pts,
      callback,
    );
  }

  late final _MinAreaRect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, imp1.CvCallback_1)>>('MinAreaRect_Async');
  late final _MinAreaRect_Async = _MinAreaRect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MinEnclosingCircle(
    VecPoint pts,
    ffi.Pointer<CvPoint2f> center,
    ffi.Pointer<ffi.Float> radius,
  ) {
    return _MinEnclosingCircle(
      pts,
      center,
      radius,
    );
  }

  late final _MinEnclosingCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<CvPoint2f>,
              ffi.Pointer<ffi.Float>)>>('MinEnclosingCircle');
  late final _MinEnclosingCircle = _MinEnclosingCirclePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> MinEnclosingCircle_Async(
    VecPoint pts,
    imp1.CvCallback_2 callback,
  ) {
    return _MinEnclosingCircle_Async(
      pts,
      callback,
    );
  }

  late final _MinEnclosingCircle_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, imp1.CvCallback_2)>>('MinEnclosingCircle_Async');
  late final _MinEnclosingCircle_Async =
      _MinEnclosingCircle_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Moments(
    Mat src,
    bool binaryImage,
    ffi.Pointer<Moment> rval,
  ) {
    return _Moments(
      src,
      binaryImage,
      rval,
    );
  }

  late final _MomentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Bool, ffi.Pointer<Moment>)>>('Moments');
  late final _Moments = _MomentsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool, ffi.Pointer<Moment>)>();

  ffi.Pointer<CvStatus> Moments_Async(
    Mat src,
    bool binaryImage,
    imp1.CvCallback_1 callback,
  ) {
    return _Moments_Async(
      src,
      binaryImage,
      callback,
    );
  }

  late final _Moments_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Bool, imp1.CvCallback_1)>>('Moments_Async');
  late final _Moments_Async = _Moments_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MorphologyDefaultBorderValue(
    ffi.Pointer<Scalar> rval,
  ) {
    return _MorphologyDefaultBorderValue(
      rval,
    );
  }

  late final _MorphologyDefaultBorderValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>)>>(
      'MorphologyDefaultBorderValue');
  late final _MorphologyDefaultBorderValue = _MorphologyDefaultBorderValuePtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> MorphologyDefaultBorderValue_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _MorphologyDefaultBorderValue_Async(
      callback,
    );
  }

  late final _MorphologyDefaultBorderValue_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'MorphologyDefaultBorderValue_Async');
  late final _MorphologyDefaultBorderValue_Async =
      _MorphologyDefaultBorderValue_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MorphologyEx(
    Mat src,
    Mat dst,
    int op,
    Mat kernel,
  ) {
    return _MorphologyEx(
      src,
      dst,
      op,
      kernel,
    );
  }

  late final _MorphologyExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, Mat)>>('MorphologyEx');
  late final _MorphologyEx = _MorphologyExPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat)>();

  ffi.Pointer<CvStatus> MorphologyExWithParams(
    Mat src,
    Mat dst,
    int op,
    Mat kernel,
    CvPoint pt,
    int iterations,
    int borderType,
    Scalar borderValue,
  ) {
    return _MorphologyExWithParams(
      src,
      dst,
      op,
      kernel,
      pt,
      iterations,
      borderType,
      borderValue,
    );
  }

  late final _MorphologyExWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, CvPoint,
              ffi.Int, ffi.Int, Scalar)>>('MorphologyExWithParams');
  late final _MorphologyExWithParams = _MorphologyExWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, Mat, CvPoint, int, int, Scalar)>();

  ffi.Pointer<CvStatus> MorphologyExWithParams_Async(
    Mat src,
    int op,
    Mat kernel,
    CvPoint pt,
    int iterations,
    int borderType,
    Scalar borderValue,
    imp1.CvCallback_1 callback,
  ) {
    return _MorphologyExWithParams_Async(
      src,
      op,
      kernel,
      pt,
      iterations,
      borderType,
      borderValue,
      callback,
    );
  }

  late final _MorphologyExWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              Mat,
              CvPoint,
              ffi.Int,
              ffi.Int,
              Scalar,
              imp1.CvCallback_1)>>('MorphologyExWithParams_Async');
  late final _MorphologyExWithParams_Async =
      _MorphologyExWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, Mat, CvPoint, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MorphologyEx_Async(
    Mat src,
    int op,
    Mat kernel,
    imp1.CvCallback_1 callback,
  ) {
    return _MorphologyEx_Async(
      src,
      op,
      kernel,
      callback,
    );
  }

  late final _MorphologyEx_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, Mat, imp1.CvCallback_1)>>('MorphologyEx_Async');
  late final _MorphologyEx_Async = _MorphologyEx_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> PhaseCorrelate(
    Mat src1,
    Mat src2,
    Mat window,
    ffi.Pointer<ffi.Double> response,
    ffi.Pointer<CvPoint2f> rval,
  ) {
    return _PhaseCorrelate(
      src1,
      src2,
      window,
      response,
      rval,
    );
  }

  late final _PhaseCorrelatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Double>,
              ffi.Pointer<CvPoint2f>)>>('PhaseCorrelate');
  late final _PhaseCorrelate = _PhaseCorrelatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<CvPoint2f>)>();

  ffi.Pointer<CvStatus> PhaseCorrelate_Async(
    Mat src1,
    Mat src2,
    Mat window,
    imp1.CvCallback_2 callback,
  ) {
    return _PhaseCorrelate_Async(
      src1,
      src2,
      window,
      callback,
    );
  }

  late final _PhaseCorrelate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_2)>>('PhaseCorrelate_Async');
  late final _PhaseCorrelate_Async = _PhaseCorrelate_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> PointPolygonTest(
    VecPoint pts,
    CvPoint2f pt,
    bool measureDist,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _PointPolygonTest(
      pts,
      pt,
      measureDist,
      rval,
    );
  }

  late final _PointPolygonTestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, CvPoint2f, ffi.Bool,
              ffi.Pointer<ffi.Double>)>>('PointPolygonTest');
  late final _PointPolygonTest = _PointPolygonTestPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, CvPoint2f, bool, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> PointPolygonTest_Async(
    VecPoint pts,
    CvPoint2f pt,
    bool measureDist,
    imp1.CvCallback_1 callback,
  ) {
    return _PointPolygonTest_Async(
      pts,
      pt,
      measureDist,
      callback,
    );
  }

  late final _PointPolygonTest_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, CvPoint2f, ffi.Bool,
              imp1.CvCallback_1)>>('PointPolygonTest_Async');
  late final _PointPolygonTest_Async = _PointPolygonTest_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, CvPoint2f, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Polylines(
    Mat img,
    VecVecPoint points,
    bool isClosed,
    Scalar color,
    int thickness,
  ) {
    return _Polylines(
      img,
      points,
      isClosed,
      color,
      thickness,
    );
  }

  late final _PolylinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int)>>('Polylines');
  late final _Polylines = _PolylinesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, bool, Scalar, int)>();

  ffi.Pointer<CvStatus> Polylines_Async(
    Mat img,
    VecVecPoint points,
    bool isClosed,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _Polylines_Async(
      img,
      points,
      isClosed,
      color,
      thickness,
      callback,
    );
  }

  late final _Polylines_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Bool, Scalar,
              ffi.Int, imp1.CvCallback_0)>>('Polylines_Async');
  late final _Polylines_Async = _Polylines_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecVecPoint, bool, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> PutText(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    CvPoint org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
  ) {
    return _PutText(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
    );
  }

  late final _PutTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint,
              ffi.Int, ffi.Double, Scalar, ffi.Int)>>('PutText');
  late final _PutText = _PutTextPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<ffi.Char>, CvPoint, int, double, Scalar, int)>();

  ffi.Pointer<CvStatus> PutTextWithParams(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    CvPoint org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
    int lineType,
    bool bottomLeftOrigin,
  ) {
    return _PutTextWithParams(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
      lineType,
      bottomLeftOrigin,
    );
  }

  late final _PutTextWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              CvPoint,
              ffi.Int,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('PutTextWithParams');
  late final _PutTextWithParams = _PutTextWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, int,
          double, Scalar, int, int, bool)>();

  ffi.Pointer<CvStatus> PutTextWithParams_Async(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    CvPoint org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
    int lineType,
    bool bottomLeftOrigin,
    imp1.CvCallback_0 callback,
  ) {
    return _PutTextWithParams_Async(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
      lineType,
      bottomLeftOrigin,
      callback,
    );
  }

  late final _PutTextWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              CvPoint,
              ffi.Int,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              imp1.CvCallback_0)>>('PutTextWithParams_Async');
  late final _PutTextWithParams_Async = _PutTextWithParams_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, int,
          double, Scalar, int, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> PutText_Async(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    CvPoint org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _PutText_Async(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
      callback,
    );
  }

  late final _PutText_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              CvPoint,
              ffi.Int,
              ffi.Double,
              Scalar,
              ffi.Int,
              imp1.CvCallback_0)>>('PutText_Async');
  late final _PutText_Async = _PutText_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, int,
          double, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> PyrDown(
    Mat src,
    Mat dst,
    CvSize dstsize,
    int borderType,
  ) {
    return _PyrDown(
      src,
      dst,
      dstsize,
      borderType,
    );
  }

  late final _PyrDownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, ffi.Int)>>('PyrDown');
  late final _PyrDown = _PyrDownPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, int)>();

  ffi.Pointer<CvStatus> PyrDown_Async(
    Mat src,
    CvSize dstsize,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _PyrDown_Async(
      src,
      dstsize,
      borderType,
      callback,
    );
  }

  late final _PyrDown_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvSize, ffi.Int, imp1.CvCallback_1)>>('PyrDown_Async');
  late final _PyrDown_Async = _PyrDown_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvSize, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> PyrUp(
    Mat src,
    Mat dst,
    CvSize dstsize,
    int borderType,
  ) {
    return _PyrUp(
      src,
      dst,
      dstsize,
      borderType,
    );
  }

  late final _PyrUpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Int)>>('PyrUp');
  late final _PyrUp = _PyrUpPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, int)>();

  ffi.Pointer<CvStatus> PyrUp_Async(
    Mat src,
    CvSize dstsize,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _PyrUp_Async(
      src,
      dstsize,
      borderType,
      callback,
    );
  }

  late final _PyrUp_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvSize, ffi.Int, imp1.CvCallback_1)>>('PyrUp_Async');
  late final _PyrUp_Async = _PyrUp_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvSize, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Rectangle(
    Mat img,
    CvRect rect,
    Scalar color,
    int thickness,
  ) {
    return _Rectangle(
      img,
      rect,
      color,
      thickness,
    );
  }

  late final _RectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvRect, Scalar, ffi.Int)>>('Rectangle');
  late final _Rectangle = _RectanglePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, int)>();

  ffi.Pointer<CvStatus> RectangleWithParams(
    Mat img,
    CvRect rect,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _RectangleWithParams(
      img,
      rect,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _RectangleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, ffi.Int, ffi.Int,
              ffi.Int)>>('RectangleWithParams');
  late final _RectangleWithParams = _RectangleWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, int, int, int)>();

  ffi.Pointer<CvStatus> RectangleWithParams_Async(
    Mat img,
    CvRect rect,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _RectangleWithParams_Async(
      img,
      rect,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _RectangleWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, ffi.Int, ffi.Int,
              ffi.Int, imp1.CvCallback_0)>>('RectangleWithParams_Async');
  late final _RectangleWithParams_Async =
      _RectangleWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvRect, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Rectangle_Async(
    Mat img,
    CvRect rect,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _Rectangle_Async(
      img,
      rect,
      color,
      thickness,
      callback,
    );
  }

  late final _Rectangle_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, ffi.Int,
              imp1.CvCallback_0)>>('Rectangle_Async');
  late final _Rectangle_Async = _Rectangle_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvRect, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Remap(
    Mat src,
    Mat dst,
    Mat map1,
    Mat map2,
    int interpolation,
    int borderMode,
    Scalar borderValue,
  ) {
    return _Remap(
      src,
      dst,
      map1,
      map2,
      interpolation,
      borderMode,
      borderValue,
    );
  }

  late final _RemapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar)>>('Remap');
  late final _Remap = _RemapPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, int, Scalar)>();

  ffi.Pointer<CvStatus> Remap_Async(
    Mat src,
    Mat map1,
    Mat map2,
    int interpolation,
    int borderMode,
    Scalar borderValue,
    imp1.CvCallback_1 callback,
  ) {
    return _Remap_Async(
      src,
      map1,
      map2,
      interpolation,
      borderMode,
      borderValue,
      callback,
    );
  }

  late final _Remap_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int,
              Scalar, imp1.CvCallback_1)>>('Remap_Async');
  late final _Remap_Async = _Remap_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Resize(
    Mat src,
    Mat dst,
    CvSize sz,
    double fx,
    double fy,
    int interp,
  ) {
    return _Resize(
      src,
      dst,
      sz,
      fx,
      fy,
      interp,
    );
  }

  late final _ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, ffi.Double, ffi.Double, ffi.Int)>>('Resize');
  late final _Resize = _ResizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, double, double, int)>();

  ffi.Pointer<CvStatus> Resize_Async(
    Mat src,
    CvSize sz,
    double fx,
    double fy,
    int interp,
    imp1.CvCallback_1 callback,
  ) {
    return _Resize_Async(
      src,
      sz,
      fx,
      fy,
      interp,
      callback,
    );
  }

  late final _Resize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Double, ffi.Double,
              ffi.Int, imp1.CvCallback_1)>>('Resize_Async');
  late final _Resize_Async = _Resize_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvSize, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Scharr(
    Mat src,
    Mat dst,
    int dDepth,
    int dx,
    int dy,
    double scale,
    double delta,
    int borderType,
  ) {
    return _Scharr(
      src,
      dst,
      dDepth,
      dx,
      dy,
      scale,
      delta,
      borderType,
    );
  }

  late final _ScharrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Double, ffi.Double, ffi.Int)>>('Scharr');
  late final _Scharr = _ScharrPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, int, double, double, int)>();

  ffi.Pointer<CvStatus> Scharr_Async(
    Mat src,
    int dDepth,
    int dx,
    int dy,
    double scale,
    double delta,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _Scharr_Async(
      src,
      dDepth,
      dx,
      dy,
      scale,
      delta,
      borderType,
      callback,
    );
  }

  late final _Scharr_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              imp1.CvCallback_1)>>('Scharr_Async');
  late final _Scharr_Async = _Scharr_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SepFilter2D(
    Mat src,
    Mat dst,
    int ddepth,
    Mat kernelX,
    Mat kernelY,
    CvPoint anchor,
    double delta,
    int borderType,
  ) {
    return _SepFilter2D(
      src,
      dst,
      ddepth,
      kernelX,
      kernelY,
      anchor,
      delta,
      borderType,
    );
  }

  late final _SepFilter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, Mat, CvPoint,
              ffi.Double, ffi.Int)>>('SepFilter2D');
  late final _SepFilter2D = _SepFilter2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, Mat, Mat, CvPoint, double, int)>();

  ffi.Pointer<CvStatus> SepFilter2D_Async(
    Mat src,
    int ddepth,
    Mat kernelX,
    Mat kernelY,
    CvPoint anchor,
    double delta,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _SepFilter2D_Async(
      src,
      ddepth,
      kernelX,
      kernelY,
      anchor,
      delta,
      borderType,
      callback,
    );
  }

  late final _SepFilter2D_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, Mat, CvPoint,
              ffi.Double, ffi.Int, imp1.CvCallback_1)>>('SepFilter2D_Async');
  late final _SepFilter2D_Async = _SepFilter2D_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, Mat, Mat, CvPoint, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Sobel(
    Mat src,
    Mat dst,
    int ddepth,
    int dx,
    int dy,
    int ksize,
    double scale,
    double delta,
    int borderType,
  ) {
    return _Sobel(
      src,
      dst,
      ddepth,
      dx,
      dy,
      ksize,
      scale,
      delta,
      borderType,
    );
  }

  late final _SobelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Double, ffi.Double, ffi.Int)>>('Sobel');
  late final _Sobel = _SobelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, int, int, double, double, int)>();

  ffi.Pointer<CvStatus> Sobel_Async(
    Mat src,
    int ddepth,
    int dx,
    int dy,
    int ksize,
    double scale,
    double delta,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _Sobel_Async(
      src,
      ddepth,
      dx,
      dy,
      ksize,
      scale,
      delta,
      borderType,
      callback,
    );
  }

  late final _Sobel_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              imp1.CvCallback_1)>>('Sobel_Async');
  late final _Sobel_Async = _Sobel_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SpatialGradient(
    Mat src,
    Mat dx,
    Mat dy,
    int ksize,
    int borderType,
  ) {
    return _SpatialGradient(
      src,
      dx,
      dy,
      ksize,
      borderType,
    );
  }

  late final _SpatialGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int)>>('SpatialGradient');
  late final _SpatialGradient = _SpatialGradientPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, int)>();

  ffi.Pointer<CvStatus> SpatialGradient_Async(
    Mat src,
    int ksize,
    int borderType,
    imp1.CvCallback_2 callback,
  ) {
    return _SpatialGradient_Async(
      src,
      ksize,
      borderType,
      callback,
    );
  }

  late final _SpatialGradient_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              imp1.CvCallback_2)>>('SpatialGradient_Async');
  late final _SpatialGradient_Async = _SpatialGradient_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> SqBoxFilter_Async(
    Mat src,
    int ddepth,
    CvSize ps,
    imp1.CvCallback_1 callback,
  ) {
    return _SqBoxFilter_Async(
      src,
      ddepth,
      ps,
      callback,
    );
  }

  late final _SqBoxFilter_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, CvSize, imp1.CvCallback_1)>>('SqBoxFilter_Async');
  late final _SqBoxFilter_Async = _SqBoxFilter_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SqrBoxFilter(
    Mat src,
    Mat dst,
    int ddepth,
    CvSize ps,
    CvPoint anchor,
    bool normalize,
    int borderType,
  ) {
    return _SqrBoxFilter(
      src,
      dst,
      ddepth,
      ps,
      anchor,
      normalize,
      borderType,
    );
  }

  late final _SqrBoxFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, CvSize, CvPoint,
              ffi.Bool, ffi.Int)>>('SqrBoxFilter');
  late final _SqrBoxFilter = _SqrBoxFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, CvSize, CvPoint, bool, int)>();

  void Subdiv2D_Close(
    Subdiv2DPtr self,
  ) {
    return _Subdiv2D_Close(
      self,
    );
  }

  late final _Subdiv2D_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr)>>(
          'Subdiv2D_Close');
  late final _Subdiv2D_Close =
      _Subdiv2D_ClosePtr.asFunction<void Function(Subdiv2DPtr)>();

  void Subdiv2D_Close_Async(
    Subdiv2DPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _Subdiv2D_Close_Async(
      self,
      callback,
    );
  }

  late final _Subdiv2D_Close_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Subdiv2DPtr, imp1.CvCallback_0)>>(
      'Subdiv2D_Close_Async');
  late final _Subdiv2D_Close_Async = _Subdiv2D_Close_AsyncPtr.asFunction<
      void Function(Subdiv2DPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Subdiv2D_EdgeDst(
    Subdiv2D self,
    int edge,
    ffi.Pointer<CvPoint2f> dstpt,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_EdgeDst(
      self,
      edge,
      dstpt,
      rval,
    );
  }

  late final _Subdiv2D_EdgeDstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              ffi.Int,
              ffi.Pointer<CvPoint2f>,
              ffi.Pointer<ffi.Int>)>>('Subdiv2D_EdgeDst');
  late final _Subdiv2D_EdgeDst = _Subdiv2D_EdgeDstPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_EdgeDst_Async(
    Subdiv2D self,
    int edge,
    imp1.CvCallback_2 callback,
  ) {
    return _Subdiv2D_EdgeDst_Async(
      self,
      edge,
      callback,
    );
  }

  late final _Subdiv2D_EdgeDst_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, imp1.CvCallback_2)>>('Subdiv2D_EdgeDst_Async');
  late final _Subdiv2D_EdgeDst_Async = _Subdiv2D_EdgeDst_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Subdiv2D_EdgeOrg(
    Subdiv2D self,
    int edge,
    ffi.Pointer<CvPoint2f> orgpt,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_EdgeOrg(
      self,
      edge,
      orgpt,
      rval,
    );
  }

  late final _Subdiv2D_EdgeOrgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              ffi.Int,
              ffi.Pointer<CvPoint2f>,
              ffi.Pointer<ffi.Int>)>>('Subdiv2D_EdgeOrg');
  late final _Subdiv2D_EdgeOrg = _Subdiv2D_EdgeOrgPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_EdgeOrg_Async(
    Subdiv2D self,
    int edge,
    imp1.CvCallback_2 callback,
  ) {
    return _Subdiv2D_EdgeOrg_Async(
      self,
      edge,
      callback,
    );
  }

  late final _Subdiv2D_EdgeOrg_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, imp1.CvCallback_2)>>('Subdiv2D_EdgeOrg_Async');
  late final _Subdiv2D_EdgeOrg_Async = _Subdiv2D_EdgeOrg_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Subdiv2D_FindNearest(
    Subdiv2D self,
    CvPoint2f pt,
    ffi.Pointer<CvPoint2f> nearestPt,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_FindNearest(
      self,
      pt,
      nearestPt,
      rval,
    );
  }

  late final _Subdiv2D_FindNearestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              CvPoint2f,
              ffi.Pointer<CvPoint2f>,
              ffi.Pointer<ffi.Int>)>>('Subdiv2D_FindNearest');
  late final _Subdiv2D_FindNearest = _Subdiv2D_FindNearestPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, CvPoint2f, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_FindNearest_Async(
    Subdiv2D self,
    CvPoint2f pt,
    imp1.CvCallback_2 callback,
  ) {
    return _Subdiv2D_FindNearest_Async(
      self,
      pt,
      callback,
    );
  }

  late final _Subdiv2D_FindNearest_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f,
              imp1.CvCallback_2)>>('Subdiv2D_FindNearest_Async');
  late final _Subdiv2D_FindNearest_Async =
      _Subdiv2D_FindNearest_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, CvPoint2f, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetEdge(
    Subdiv2D self,
    int edge,
    int nextEdgeType,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_GetEdge(
      self,
      edge,
      nextEdgeType,
      rval,
    );
  }

  late final _Subdiv2D_GetEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('Subdiv2D_GetEdge');
  late final _Subdiv2D_GetEdge = _Subdiv2D_GetEdgePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetEdgeList(
    Subdiv2D self,
    ffi.Pointer<ffi.Pointer<Vec4f>> rval,
    ffi.Pointer<ffi.Size> size,
  ) {
    return _Subdiv2D_GetEdgeList(
      self,
      rval,
      size,
    );
  }

  late final _Subdiv2D_GetEdgeListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              ffi.Pointer<ffi.Pointer<Vec4f>>,
              ffi.Pointer<ffi.Size>)>>('Subdiv2D_GetEdgeList');
  late final _Subdiv2D_GetEdgeList = _Subdiv2D_GetEdgeListPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, ffi.Pointer<ffi.Pointer<Vec4f>>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetEdgeList_Async(
    Subdiv2D self,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_GetEdgeList_Async(
      self,
      callback,
    );
  }

  late final _Subdiv2D_GetEdgeList_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, imp1.CvCallback_1)>>('Subdiv2D_GetEdgeList_Async');
  late final _Subdiv2D_GetEdgeList_Async =
      _Subdiv2D_GetEdgeList_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetEdge_Async(
    Subdiv2D self,
    int edge,
    int nextEdgeType,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_GetEdge_Async(
      self,
      edge,
      nextEdgeType,
      callback,
    );
  }

  late final _Subdiv2D_GetEdge_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('Subdiv2D_GetEdge_Async');
  late final _Subdiv2D_GetEdge_Async = _Subdiv2D_GetEdge_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetLeadingEdgeList(
    Subdiv2D self,
    ffi.Pointer<VecI32> leadingEdgeList,
  ) {
    return _Subdiv2D_GetLeadingEdgeList(
      self,
      leadingEdgeList,
    );
  }

  late final _Subdiv2D_GetLeadingEdgeListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Pointer<VecI32>)>>('Subdiv2D_GetLeadingEdgeList');
  late final _Subdiv2D_GetLeadingEdgeList =
      _Subdiv2D_GetLeadingEdgeListPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<VecI32>)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetLeadingEdgeList_Async(
    Subdiv2D self,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_GetLeadingEdgeList_Async(
      self,
      callback,
    );
  }

  late final _Subdiv2D_GetLeadingEdgeList_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D,
              imp1.CvCallback_1)>>('Subdiv2D_GetLeadingEdgeList_Async');
  late final _Subdiv2D_GetLeadingEdgeList_Async =
      _Subdiv2D_GetLeadingEdgeList_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetTriangleList(
    Subdiv2D self,
    ffi.Pointer<ffi.Pointer<Vec6f>> rval,
    ffi.Pointer<ffi.Size> size,
  ) {
    return _Subdiv2D_GetTriangleList(
      self,
      rval,
      size,
    );
  }

  late final _Subdiv2D_GetTriangleListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              ffi.Pointer<ffi.Pointer<Vec6f>>,
              ffi.Pointer<ffi.Size>)>>('Subdiv2D_GetTriangleList');
  late final _Subdiv2D_GetTriangleList =
      _Subdiv2D_GetTriangleListPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D,
              ffi.Pointer<ffi.Pointer<Vec6f>>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetTriangleList_Async(
    Subdiv2D self,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_GetTriangleList_Async(
      self,
      callback,
    );
  }

  late final _Subdiv2D_GetTriangleList_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, imp1.CvCallback_1)>>('Subdiv2D_GetTriangleList_Async');
  late final _Subdiv2D_GetTriangleList_Async =
      _Subdiv2D_GetTriangleList_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetVertex(
    Subdiv2D self,
    int vertex,
    ffi.Pointer<ffi.Int> firstEdge,
    ffi.Pointer<CvPoint2f> rval,
  ) {
    return _Subdiv2D_GetVertex(
      self,
      vertex,
      firstEdge,
      rval,
    );
  }

  late final _Subdiv2D_GetVertexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<CvPoint2f>)>>('Subdiv2D_GetVertex');
  late final _Subdiv2D_GetVertex = _Subdiv2D_GetVertexPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, ffi.Pointer<ffi.Int>, ffi.Pointer<CvPoint2f>)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetVertex_Async(
    Subdiv2D self,
    int vertex,
    imp1.CvCallback_2 callback,
  ) {
    return _Subdiv2D_GetVertex_Async(
      self,
      vertex,
      callback,
    );
  }

  late final _Subdiv2D_GetVertex_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int,
              imp1.CvCallback_2)>>('Subdiv2D_GetVertex_Async');
  late final _Subdiv2D_GetVertex_Async =
      _Subdiv2D_GetVertex_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetVoronoiFacetList(
    Subdiv2D self,
    VecI32 idx,
    ffi.Pointer<VecVecPoint2f> facetList,
    ffi.Pointer<VecPoint2f> facetCenters,
  ) {
    return _Subdiv2D_GetVoronoiFacetList(
      self,
      idx,
      facetList,
      facetCenters,
    );
  }

  late final _Subdiv2D_GetVoronoiFacetListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              VecI32,
              ffi.Pointer<VecVecPoint2f>,
              ffi.Pointer<VecPoint2f>)>>('Subdiv2D_GetVoronoiFacetList');
  late final _Subdiv2D_GetVoronoiFacetList =
      _Subdiv2D_GetVoronoiFacetListPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, VecI32,
              ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvStatus> Subdiv2D_GetVoronoiFacetList_Async(
    Subdiv2D self,
    VecI32 idx,
    imp1.CvCallback_2 callback,
  ) {
    return _Subdiv2D_GetVoronoiFacetList_Async(
      self,
      idx,
      callback,
    );
  }

  late final _Subdiv2D_GetVoronoiFacetList_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, VecI32,
              imp1.CvCallback_2)>>('Subdiv2D_GetVoronoiFacetList_Async');
  late final _Subdiv2D_GetVoronoiFacetList_Async =
      _Subdiv2D_GetVoronoiFacetList_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, VecI32, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Subdiv2D_InitDelaunay(
    Subdiv2D self,
    CvRect rect,
  ) {
    return _Subdiv2D_InitDelaunay(
      self,
      rect,
    );
  }

  late final _Subdiv2D_InitDelaunayPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, CvRect)>>(
      'Subdiv2D_InitDelaunay');
  late final _Subdiv2D_InitDelaunay = _Subdiv2D_InitDelaunayPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, CvRect)>();

  ffi.Pointer<CvStatus> Subdiv2D_InitDelaunay_Async(
    Subdiv2D self,
    CvRect rect,
    imp1.CvCallback_0 callback,
  ) {
    return _Subdiv2D_InitDelaunay_Async(
      self,
      rect,
      callback,
    );
  }

  late final _Subdiv2D_InitDelaunay_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, CvRect,
              imp1.CvCallback_0)>>('Subdiv2D_InitDelaunay_Async');
  late final _Subdiv2D_InitDelaunay_Async =
      _Subdiv2D_InitDelaunay_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, CvRect, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Subdiv2D_Insert(
    Subdiv2D self,
    CvPoint2f pt,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_Insert(
      self,
      pt,
      rval,
    );
  }

  late final _Subdiv2D_InsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>)>>('Subdiv2D_Insert');
  late final _Subdiv2D_Insert = _Subdiv2D_InsertPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_InsertVec(
    Subdiv2D self,
    VecPoint2f ptvec,
  ) {
    return _Subdiv2D_InsertVec(
      self,
      ptvec,
    );
  }

  late final _Subdiv2D_InsertVecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, VecPoint2f)>>('Subdiv2D_InsertVec');
  late final _Subdiv2D_InsertVec = _Subdiv2D_InsertVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f)>();

  ffi.Pointer<CvStatus> Subdiv2D_InsertVec_Async(
    Subdiv2D self,
    VecPoint2f ptvec,
    imp1.CvCallback_0 callback,
  ) {
    return _Subdiv2D_InsertVec_Async(
      self,
      ptvec,
      callback,
    );
  }

  late final _Subdiv2D_InsertVec_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f,
              imp1.CvCallback_0)>>('Subdiv2D_InsertVec_Async');
  late final _Subdiv2D_InsertVec_Async =
      _Subdiv2D_InsertVec_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, VecPoint2f, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Subdiv2D_Insert_Async(
    Subdiv2D self,
    CvPoint2f pt,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_Insert_Async(
      self,
      pt,
      callback,
    );
  }

  late final _Subdiv2D_Insert_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f,
              imp1.CvCallback_1)>>('Subdiv2D_Insert_Async');
  late final _Subdiv2D_Insert_Async = _Subdiv2D_Insert_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_Locate(
    Subdiv2D self,
    CvPoint2f pt,
    ffi.Pointer<ffi.Int> edge,
    ffi.Pointer<ffi.Int> vertex,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_Locate(
      self,
      pt,
      edge,
      vertex,
      rval,
    );
  }

  late final _Subdiv2D_LocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D,
              CvPoint2f,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('Subdiv2D_Locate');
  late final _Subdiv2D_Locate = _Subdiv2D_LocatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_Locate_Async(
    Subdiv2D self,
    CvPoint2f pt,
    imp1.CvCallback_3 callback,
  ) {
    return _Subdiv2D_Locate_Async(
      self,
      pt,
      callback,
    );
  }

  late final _Subdiv2D_Locate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f,
              imp1.CvCallback_3)>>('Subdiv2D_Locate_Async');
  late final _Subdiv2D_Locate_Async = _Subdiv2D_Locate_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> Subdiv2D_NewEmpty(
    ffi.Pointer<Subdiv2D> rval,
  ) {
    return _Subdiv2D_NewEmpty(
      rval,
    );
  }

  late final _Subdiv2D_NewEmptyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<Subdiv2D>)>>('Subdiv2D_NewEmpty');
  late final _Subdiv2D_NewEmpty = _Subdiv2D_NewEmptyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<Subdiv2D>)>();

  ffi.Pointer<CvStatus> Subdiv2D_NewEmpty_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_NewEmpty_Async(
      callback,
    );
  }

  late final _Subdiv2D_NewEmpty_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'Subdiv2D_NewEmpty_Async');
  late final _Subdiv2D_NewEmpty_Async = _Subdiv2D_NewEmpty_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_NewWithRect(
    CvRect rect,
    ffi.Pointer<Subdiv2D> rval,
  ) {
    return _Subdiv2D_NewWithRect(
      rect,
      rval,
    );
  }

  late final _Subdiv2D_NewWithRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CvRect, ffi.Pointer<Subdiv2D>)>>('Subdiv2D_NewWithRect');
  late final _Subdiv2D_NewWithRect = _Subdiv2D_NewWithRectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CvRect, ffi.Pointer<Subdiv2D>)>();

  ffi.Pointer<CvStatus> Subdiv2D_NewWithRect_Async(
    CvRect rect,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_NewWithRect_Async(
      rect,
      callback,
    );
  }

  late final _Subdiv2D_NewWithRect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CvRect, imp1.CvCallback_1)>>('Subdiv2D_NewWithRect_Async');
  late final _Subdiv2D_NewWithRect_Async = _Subdiv2D_NewWithRect_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(CvRect, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_NextEdge(
    Subdiv2D self,
    int edge,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_NextEdge(
      self,
      edge,
      rval,
    );
  }

  late final _Subdiv2D_NextEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>)>>('Subdiv2D_NextEdge');
  late final _Subdiv2D_NextEdge = _Subdiv2D_NextEdgePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_NextEdge_Async(
    Subdiv2D self,
    int edge,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_NextEdge_Async(
      self,
      edge,
      callback,
    );
  }

  late final _Subdiv2D_NextEdge_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int,
              imp1.CvCallback_1)>>('Subdiv2D_NextEdge_Async');
  late final _Subdiv2D_NextEdge_Async = _Subdiv2D_NextEdge_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_RotateEdge(
    Subdiv2D self,
    int edge,
    int rotate,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_RotateEdge(
      self,
      edge,
      rotate,
      rval,
    );
  }

  late final _Subdiv2D_RotateEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('Subdiv2D_RotateEdge');
  late final _Subdiv2D_RotateEdge = _Subdiv2D_RotateEdgePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_RotateEdge_Async(
    Subdiv2D self,
    int edge,
    int rotate,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_RotateEdge_Async(
      self,
      edge,
      rotate,
      callback,
    );
  }

  late final _Subdiv2D_RotateEdge_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('Subdiv2D_RotateEdge_Async');
  late final _Subdiv2D_RotateEdge_Async =
      _Subdiv2D_RotateEdge_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Subdiv2D_SymEdge(
    Subdiv2D self,
    int edge,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Subdiv2D_SymEdge(
      self,
      edge,
      rval,
    );
  }

  late final _Subdiv2D_SymEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>)>>('Subdiv2D_SymEdge');
  late final _Subdiv2D_SymEdge = _Subdiv2D_SymEdgePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Subdiv2D_SymEdge_Async(
    Subdiv2D self,
    int edge,
    imp1.CvCallback_1 callback,
  ) {
    return _Subdiv2D_SymEdge_Async(
      self,
      edge,
      callback,
    );
  }

  late final _Subdiv2D_SymEdge_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, imp1.CvCallback_1)>>('Subdiv2D_SymEdge_Async');
  late final _Subdiv2D_SymEdge_Async = _Subdiv2D_SymEdge_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Threshold(
    Mat src,
    Mat dst,
    double thresh,
    double maxvalue,
    int typ,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Threshold(
      src,
      dst,
      thresh,
      maxvalue,
      typ,
      rval,
    );
  }

  late final _ThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double,
              ffi.Int, ffi.Pointer<ffi.Double>)>>('Threshold');
  late final _Threshold = _ThresholdPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> Threshold_Async(
    Mat src,
    double thresh,
    double maxvalue,
    int typ,
    imp1.CvCallback_2 callback,
  ) {
    return _Threshold_Async(
      src,
      thresh,
      maxvalue,
      typ,
      callback,
    );
  }

  late final _Threshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Double, ffi.Int,
              imp1.CvCallback_2)>>('Threshold_Async');
  late final _Threshold_Async = _Threshold_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, double, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> WarpAffine(
    Mat src,
    Mat dst,
    Mat rot_mat,
    CvSize dsize,
  ) {
    return _WarpAffine(
      src,
      dst,
      rot_mat,
      dsize,
    );
  }

  late final _WarpAffinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize)>>('WarpAffine');
  late final _WarpAffine = _WarpAffinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize)>();

  ffi.Pointer<CvStatus> WarpAffineWithParams(
    Mat src,
    Mat dst,
    Mat rot_mat,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
  ) {
    return _WarpAffineWithParams(
      src,
      dst,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
    );
  }

  late final _WarpAffineWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, ffi.Int,
              ffi.Int, Scalar)>>('WarpAffineWithParams');
  late final _WarpAffineWithParams = _WarpAffineWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, CvSize, int, int, Scalar)>();

  ffi.Pointer<CvStatus> WarpAffineWithParams_Async(
    Mat src,
    Mat rot_mat,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
    imp1.CvCallback_1 callback,
  ) {
    return _WarpAffineWithParams_Async(
      src,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
      callback,
    );
  }

  late final _WarpAffineWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Int, ffi.Int,
              Scalar, imp1.CvCallback_1)>>('WarpAffineWithParams_Async');
  late final _WarpAffineWithParams_Async =
      _WarpAffineWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> WarpAffine_Async(
    Mat src,
    Mat rot_mat,
    CvSize dsize,
    imp1.CvCallback_1 callback,
  ) {
    return _WarpAffine_Async(
      src,
      rot_mat,
      dsize,
      callback,
    );
  }

  late final _WarpAffine_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, imp1.CvCallback_1)>>('WarpAffine_Async');
  late final _WarpAffine_Async = _WarpAffine_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> WarpPerspective(
    Mat src,
    Mat dst,
    Mat m,
    CvSize dsize,
  ) {
    return _WarpPerspective(
      src,
      dst,
      m,
      dsize,
    );
  }

  late final _WarpPerspectivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvSize)>>('WarpPerspective');
  late final _WarpPerspective = _WarpPerspectivePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize)>();

  ffi.Pointer<CvStatus> WarpPerspectiveWithParams(
    Mat src,
    Mat dst,
    Mat rot_mat,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
  ) {
    return _WarpPerspectiveWithParams(
      src,
      dst,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
    );
  }

  late final _WarpPerspectiveWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, ffi.Int,
              ffi.Int, Scalar)>>('WarpPerspectiveWithParams');
  late final _WarpPerspectiveWithParams =
      _WarpPerspectiveWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvSize, int, int, Scalar)>();

  ffi.Pointer<CvStatus> WarpPerspectiveWithParams_Async(
    Mat src,
    Mat rot_mat,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
    imp1.CvCallback_1 callback,
  ) {
    return _WarpPerspectiveWithParams_Async(
      src,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
      callback,
    );
  }

  late final _WarpPerspectiveWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Int, ffi.Int,
              Scalar, imp1.CvCallback_1)>>('WarpPerspectiveWithParams_Async');
  late final _WarpPerspectiveWithParams_Async =
      _WarpPerspectiveWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> WarpPerspective_Async(
    Mat src,
    Mat m,
    CvSize dsize,
    imp1.CvCallback_1 callback,
  ) {
    return _WarpPerspective_Async(
      src,
      m,
      dsize,
      callback,
    );
  }

  late final _WarpPerspective_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, imp1.CvCallback_1)>>('WarpPerspective_Async');
  late final _WarpPerspective_Async = _WarpPerspective_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Watershed(
    Mat image,
    Mat markers,
  ) {
    return _Watershed(
      image,
      markers,
    );
  }

  late final _WatershedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Watershed');
  late final _Watershed =
      _WatershedPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Watershed_Async(
    Mat image,
    Mat markers,
    imp1.CvCallback_0 callback,
  ) {
    return _Watershed_Async(
      image,
      markers,
      callback,
    );
  }

  late final _Watershed_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('Watershed_Async');
  late final _Watershed_Async = _Watershed_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeImgproc _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CLAHEPtr)>>
      get CLAHE_Close => _library._CLAHE_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(CLAHEPtr, imp1.CvCallback_0)>>
      get CLAHE_Close_Async => _library._CLAHE_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr)>>
      get Subdiv2D_Close => _library._Subdiv2D_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr, imp1.CvCallback_0)>>
      get Subdiv2D_Close_Async => _library._Subdiv2D_Close_AsyncPtr;
}

final class CLAHE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CLAHEPtr = ffi.Pointer<CLAHE>;
typedef CvPoint = imp1.CvPoint;
typedef CvPoint2f = imp1.CvPoint2f;
typedef CvRect = imp1.CvRect;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef Moment = imp1.Moment;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;

final class Subdiv2D extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef Subdiv2DPtr = ffi.Pointer<Subdiv2D>;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec4f = imp1.Vec4f;
typedef Vec6f = imp1.Vec6f;
typedef VecF32 = imp1.VecF32;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecVecPoint = imp1.VecVecPoint;
typedef VecVecPoint2f = imp1.VecVecPoint2f;
