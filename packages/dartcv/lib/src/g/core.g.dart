// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Core
///
class CvNativeCore {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeCore(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeCore.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void CvStatus_close(
    ffi.Pointer<CvStatus> self,
  ) {
    return _CvStatus_close(
      self,
    );
  }

  late final _CvStatus_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>(
          'CvStatus_close');
  late final _CvStatus_close =
      _CvStatus_closePtr.asFunction<void Function(ffi.Pointer<CvStatus>)>();

  ffi.Pointer<CvStatus> cv_LUT(
    Mat src,
    Mat lut,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_LUT(
      src,
      lut,
      dst,
      callback,
    );
  }

  late final _cv_LUTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_LUT');
  late final _cv_LUT = _cv_LUTPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_adjustROI(
    Mat self,
    int dtop,
    int dbottom,
    int dleft,
    int dright,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_adjustROI(
      self,
      dtop,
      dbottom,
      dleft,
      dright,
      rval,
      callback,
    );
  }

  late final _cv_Mat_adjustROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_adjustROI');
  late final _cv_Mat_adjustROI = _cv_Mat_adjustROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_channels(
    Mat self,
  ) {
    return _cv_Mat_channels(
      self,
    );
  }

  late final _cv_Mat_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_channels');
  late final _cv_Mat_channels =
      _cv_Mat_channelsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_clone(
    Mat self,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_clone(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_clone');
  late final _cv_Mat_clone = _cv_Mat_clonePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  void cv_Mat_close(
    imp1.MatPtr self,
  ) {
    return _cv_Mat_close(
      self,
    );
  }

  late final _cv_Mat_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>>(
          'cv_Mat_close');
  late final _cv_Mat_close =
      _cv_Mat_closePtr.asFunction<void Function(imp1.MatPtr)>();

  void cv_Mat_closeVoid(
    ffi.Pointer<ffi.Void> self,
  ) {
    return _cv_Mat_closeVoid(
      self,
    );
  }

  late final _cv_Mat_closeVoidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'cv_Mat_closeVoid');
  late final _cv_Mat_closeVoid =
      _cv_Mat_closeVoidPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CvStatus> cv_Mat_col(
    Mat self,
    int x,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_col(
      self,
      x,
      rval,
      callback,
    );
  }

  late final _cv_Mat_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_col');
  late final _cv_Mat_col = _cv_Mat_colPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_cols(
    Mat self,
  ) {
    return _cv_Mat_cols(
      self,
    );
  }

  late final _cv_Mat_colsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_cols');
  late final _cv_Mat_cols =
      _cv_Mat_colsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_convertFp16(
    Mat self,
    Mat rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_convertFp16(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_convertFp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_Mat_convertFp16');
  late final _cv_Mat_convertFp16 = _cv_Mat_convertFp16Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_convertTo(
    Mat self,
    Mat dst,
    int type,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_convertTo(
      self,
      dst,
      type,
      callback,
    );
  }

  late final _cv_Mat_convertToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_Mat_convertTo');
  late final _cv_Mat_convertTo = _cv_Mat_convertToPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_convertTo_1(
    Mat self,
    Mat dst,
    int type,
    double alpha,
    double beta,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_convertTo_1(
      self,
      dst,
      type,
      alpha,
      beta,
      callback,
    );
  }

  late final _cv_Mat_convertTo_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Float,
              ffi.Float, imp1.CvCallback_0)>>('cv_Mat_convertTo_1');
  late final _cv_Mat_convertTo_1 = _cv_Mat_convertTo_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_copyTo(
    Mat self,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_copyTo(
      self,
      dst,
      callback,
    );
  }

  late final _cv_Mat_copyToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_Mat_copyTo');
  late final _cv_Mat_copyTo = _cv_Mat_copyToPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_copyTo_1(
    Mat self,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_copyTo_1(
      self,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_Mat_copyTo_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_Mat_copyTo_1');
  late final _cv_Mat_copyTo_1 = _cv_Mat_copyTo_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  /// @brief Create empty Mat
  ///
  /// ALL return values with a type of `Pointer of Struct`,
  /// e.g.,
  /// Mat, the internal pointer (Mat.ptr) MUST be NULL
  /// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
  /// Mat* mat = (Mat*)malloc(sizeof(Mat));
  /// CvStatus *status = cv_Mat_create(mat);
  /// Mat_close(mat);
  ///
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create(
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_Mat_create(
      rval,
    );
  }

  late final _cv_Mat_createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>>(
      'cv_Mat_create');
  late final _cv_Mat_create = _cv_Mat_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>();

  /// @brief Create Mat with specified size and type
  ///
  /// @param rows number of rows
  /// @param cols number of columns
  /// @param type type of the created matrix
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_1(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_1(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_1');
  late final _cv_Mat_create_1 = _cv_Mat_create_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_10(
    VecPoint3i vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_10(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint3i, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_10');
  late final _cv_Mat_create_10 = _cv_Mat_create_10Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint3i, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with Mat::ptr
  ffi.Pointer<CvStatus> cv_Mat_create_11(
    Mat self,
    int rows,
    int cols,
    int type,
    int prows,
    int pcols,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_11(
      self,
      rows,
      cols,
      type,
      prows,
      pcols,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_11');
  late final _cv_Mat_create_11 = _cv_Mat_create_11Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_12(
    Mat self,
    int rowStart,
    int rowEnd,
    int colStart,
    int colEnd,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_12(
      self,
      rowStart,
      rowEnd,
      colStart,
      colEnd,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_12');
  late final _cv_Mat_create_12 = _cv_Mat_create_12Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified sizes and type
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_2(
    VecI32 sizes,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_2(
      sizes,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_2');
  late final _cv_Mat_create_2 = _cv_Mat_create_2Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecI32, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified sizes and type
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param ar array of values to initialize the matrix with
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_3(
    VecI32 sizes,
    int type,
    Scalar ar,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_3(
      sizes,
      type,
      ar,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, Scalar,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_3');
  late final _cv_Mat_create_3 = _cv_Mat_create_3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecI32, int, Scalar, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified sizes, type and data buffer
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param buf buffer to initialize the matrix with, will be copied
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_4(
    VecI32 sizes,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_4(
      sizes,
      type,
      buf,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_4');
  late final _cv_Mat_create_4 = _cv_Mat_create_4Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(VecI32, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with Scalar values
  ///
  /// @param ar array of values to initialize the matrix with
  /// @param rows number of rows
  /// @param cols number of columns
  /// @param type type of the created matrix
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_5(
    Scalar ar,
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_5(
      ar,
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Scalar, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_5');
  late final _cv_Mat_create_5 = _cv_Mat_create_5Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Scalar, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with rows, cols, type and data buffer
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param buf buffer to initialize the matrix with, will be copied
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_6(
    int rows,
    int cols,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_6(
      rows,
      cols,
      type,
      buf,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_6');
  late final _cv_Mat_create_6 = _cv_Mat_create_6Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified vector of points
  ///
  /// @param vec array of points
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_7(
    VecPoint vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_7(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_7');
  late final _cv_Mat_create_7 = _cv_Mat_create_7Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_8(
    VecPoint2f vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_8(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_8');
  late final _cv_Mat_create_8 = _cv_Mat_create_8Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_9(
    VecPoint3f vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_9(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_9');
  late final _cv_Mat_create_9 = _cv_Mat_create_9Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint3f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<imp1.uchar> cv_Mat_data(
    Mat self,
  ) {
    return _cv_Mat_data(
      self,
    );
  }

  late final _cv_Mat_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat)>>(
          'cv_Mat_data');
  late final _cv_Mat_data = _cv_Mat_dataPtr
      .asFunction<ffi.Pointer<imp1.uchar> Function(Mat)>(isLeaf: true);

  int cv_Mat_dims(
    Mat self,
  ) {
    return _cv_Mat_dims(
      self,
    );
  }

  late final _cv_Mat_dimsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_dims');
  late final _cv_Mat_dims =
      _cv_Mat_dimsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  int cv_Mat_elemSize(
    Mat self,
  ) {
    return _cv_Mat_elemSize(
      self,
    );
  }

  late final _cv_Mat_elemSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('cv_Mat_elemSize');
  late final _cv_Mat_elemSize =
      _cv_Mat_elemSizePtr.asFunction<int Function(Mat)>(isLeaf: true);

  int cv_Mat_elemSize1(
    Mat self,
  ) {
    return _cv_Mat_elemSize1(
      self,
    );
  }

  late final _cv_Mat_elemSize1Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('cv_Mat_elemSize1');
  late final _cv_Mat_elemSize1 =
      _cv_Mat_elemSize1Ptr.asFunction<int Function(Mat)>(isLeaf: true);

  bool cv_Mat_empty(
    Mat self,
  ) {
    return _cv_Mat_empty(
      self,
    );
  }

  late final _cv_Mat_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_Mat_empty');
  late final _cv_Mat_empty = _cv_Mat_emptyPtr.asFunction<bool Function(Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_eye(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_eye(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_eyePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_eye');
  late final _cv_Mat_eye = _cv_Mat_eyePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_flags(
    Mat self,
  ) {
    return _cv_Mat_flags(
      self,
    );
  }

  late final _cv_Mat_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_flags');
  late final _cv_Mat_flags =
      _cv_Mat_flagsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<Vec2b> cv_Mat_get_Vec2b(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2b(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2bPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec2b> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec2b');
  late final _cv_Mat_get_Vec2b = _cv_Mat_get_Vec2bPtr
      .asFunction<ffi.Pointer<Vec2b> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2d> cv_Mat_get_Vec2d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2dPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec2d> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec2d');
  late final _cv_Mat_get_Vec2d = _cv_Mat_get_Vec2dPtr
      .asFunction<ffi.Pointer<Vec2d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2f> cv_Mat_get_Vec2f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2fPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec2f> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec2f');
  late final _cv_Mat_get_Vec2f = _cv_Mat_get_Vec2fPtr
      .asFunction<ffi.Pointer<Vec2f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2i> cv_Mat_get_Vec2i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2iPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec2i> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec2i');
  late final _cv_Mat_get_Vec2i = _cv_Mat_get_Vec2iPtr
      .asFunction<ffi.Pointer<Vec2i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2s> cv_Mat_get_Vec2s(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2s(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2sPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec2s> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec2s');
  late final _cv_Mat_get_Vec2s = _cv_Mat_get_Vec2sPtr
      .asFunction<ffi.Pointer<Vec2s> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2w> cv_Mat_get_Vec2w(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2w(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2wPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec2w> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec2w');
  late final _cv_Mat_get_Vec2w = _cv_Mat_get_Vec2wPtr
      .asFunction<ffi.Pointer<Vec2w> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3b> cv_Mat_get_Vec3b(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3b(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3bPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec3b> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec3b');
  late final _cv_Mat_get_Vec3b = _cv_Mat_get_Vec3bPtr
      .asFunction<ffi.Pointer<Vec3b> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3d> cv_Mat_get_Vec3d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3dPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec3d> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec3d');
  late final _cv_Mat_get_Vec3d = _cv_Mat_get_Vec3dPtr
      .asFunction<ffi.Pointer<Vec3d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3f> cv_Mat_get_Vec3f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3fPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec3f> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec3f');
  late final _cv_Mat_get_Vec3f = _cv_Mat_get_Vec3fPtr
      .asFunction<ffi.Pointer<Vec3f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3i> cv_Mat_get_Vec3i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3iPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec3i> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec3i');
  late final _cv_Mat_get_Vec3i = _cv_Mat_get_Vec3iPtr
      .asFunction<ffi.Pointer<Vec3i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3s> cv_Mat_get_Vec3s(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3s(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3sPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec3s> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec3s');
  late final _cv_Mat_get_Vec3s = _cv_Mat_get_Vec3sPtr
      .asFunction<ffi.Pointer<Vec3s> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3w> cv_Mat_get_Vec3w(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3w(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3wPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec3w> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec3w');
  late final _cv_Mat_get_Vec3w = _cv_Mat_get_Vec3wPtr
      .asFunction<ffi.Pointer<Vec3w> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4b> cv_Mat_get_Vec4b(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4b(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4bPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec4b> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec4b');
  late final _cv_Mat_get_Vec4b = _cv_Mat_get_Vec4bPtr
      .asFunction<ffi.Pointer<Vec4b> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4d> cv_Mat_get_Vec4d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4dPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec4d> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec4d');
  late final _cv_Mat_get_Vec4d = _cv_Mat_get_Vec4dPtr
      .asFunction<ffi.Pointer<Vec4d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4f> cv_Mat_get_Vec4f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4fPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec4f> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec4f');
  late final _cv_Mat_get_Vec4f = _cv_Mat_get_Vec4fPtr
      .asFunction<ffi.Pointer<Vec4f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4i> cv_Mat_get_Vec4i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4iPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec4i> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec4i');
  late final _cv_Mat_get_Vec4i = _cv_Mat_get_Vec4iPtr
      .asFunction<ffi.Pointer<Vec4i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4s> cv_Mat_get_Vec4s(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4s(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4sPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec4s> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec4s');
  late final _cv_Mat_get_Vec4s = _cv_Mat_get_Vec4sPtr
      .asFunction<ffi.Pointer<Vec4s> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4w> cv_Mat_get_Vec4w(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4w(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4wPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec4w> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec4w');
  late final _cv_Mat_get_Vec4w = _cv_Mat_get_Vec4wPtr
      .asFunction<ffi.Pointer<Vec4w> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec6d> cv_Mat_get_Vec6d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec6d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec6dPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec6d> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec6d');
  late final _cv_Mat_get_Vec6d = _cv_Mat_get_Vec6dPtr
      .asFunction<ffi.Pointer<Vec6d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec6f> cv_Mat_get_Vec6f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec6f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec6fPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec6f> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec6f');
  late final _cv_Mat_get_Vec6f = _cv_Mat_get_Vec6fPtr
      .asFunction<ffi.Pointer<Vec6f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec6i> cv_Mat_get_Vec6i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec6i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec6iPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec6i> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec6i');
  late final _cv_Mat_get_Vec6i = _cv_Mat_get_Vec6iPtr
      .asFunction<ffi.Pointer<Vec6i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec8i> cv_Mat_get_Vec8i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec8i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec8iPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Vec8i> Function(Mat, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_Vec8i');
  late final _cv_Mat_get_Vec8i = _cv_Mat_get_Vec8iPtr
      .asFunction<ffi.Pointer<Vec8i> Function(Mat, int, int)>(isLeaf: true);

  double cv_Mat_get_f32_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_f32_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_f32_1Ptr =
      _lookup<ffi.NativeFunction<float_t Function(Mat, ffi.Int)>>(
          'cv_Mat_get_f32_1');
  late final _cv_Mat_get_f32_1 =
      _cv_Mat_get_f32_1Ptr.asFunction<double Function(Mat, int)>(isLeaf: true);

  double cv_Mat_get_f32_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_f32_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_f32_2Ptr =
      _lookup<ffi.NativeFunction<float_t Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_f32_2');
  late final _cv_Mat_get_f32_2 = _cv_Mat_get_f32_2Ptr
      .asFunction<double Function(Mat, int, int)>(isLeaf: true);

  double cv_Mat_get_f32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_f32_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_f32_3Ptr = _lookup<
          ffi.NativeFunction<float_t Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_f32_3');
  late final _cv_Mat_get_f32_3 = _cv_Mat_get_f32_3Ptr
      .asFunction<double Function(Mat, int, int, int)>(isLeaf: true);

  double cv_Mat_get_f64_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_f64_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_f64_1Ptr =
      _lookup<ffi.NativeFunction<double_t Function(Mat, ffi.Int)>>(
          'cv_Mat_get_f64_1');
  late final _cv_Mat_get_f64_1 =
      _cv_Mat_get_f64_1Ptr.asFunction<double Function(Mat, int)>(isLeaf: true);

  double cv_Mat_get_f64_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_f64_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_f64_2Ptr =
      _lookup<ffi.NativeFunction<double_t Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_f64_2');
  late final _cv_Mat_get_f64_2 = _cv_Mat_get_f64_2Ptr
      .asFunction<double Function(Mat, int, int)>(isLeaf: true);

  double cv_Mat_get_f64_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_f64_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_f64_3Ptr = _lookup<
          ffi
          .NativeFunction<double_t Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_f64_3');
  late final _cv_Mat_get_f64_3 = _cv_Mat_get_f64_3Ptr
      .asFunction<double Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_i16_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_i16_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_i16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int)>>(
          'cv_Mat_get_i16_1');
  late final _cv_Mat_get_i16_1 =
      _cv_Mat_get_i16_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_i16_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_i16_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_i16_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_i16_2');
  late final _cv_Mat_get_i16_2 = _cv_Mat_get_i16_2Ptr
      .asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_i16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_i16_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_i16_3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_i16_3');
  late final _cv_Mat_get_i16_3 = _cv_Mat_get_i16_3Ptr
      .asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_i32_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_i32_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_i32_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int)>>(
          'cv_Mat_get_i32_1');
  late final _cv_Mat_get_i32_1 =
      _cv_Mat_get_i32_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_i32_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_i32_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_i32_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_i32_2');
  late final _cv_Mat_get_i32_2 = _cv_Mat_get_i32_2Ptr
      .asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_i32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_i32_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_i32_3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_i32_3');
  late final _cv_Mat_get_i32_3 = _cv_Mat_get_i32_3Ptr
      .asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_i8_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_i8_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_i8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int)>>(
          'cv_Mat_get_i8_1');
  late final _cv_Mat_get_i8_1 =
      _cv_Mat_get_i8_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_i8_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_i8_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_i8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_i8_2');
  late final _cv_Mat_get_i8_2 =
      _cv_Mat_get_i8_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_i8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_i8_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_i8_3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_i8_3');
  late final _cv_Mat_get_i8_3 = _cv_Mat_get_i8_3Ptr
      .asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_u16_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_u16_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_u16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(Mat, ffi.Int)>>(
          'cv_Mat_get_u16_1');
  late final _cv_Mat_get_u16_1 =
      _cv_Mat_get_u16_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_u16_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_u16_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_u16_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_u16_2');
  late final _cv_Mat_get_u16_2 = _cv_Mat_get_u16_2Ptr
      .asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_u16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_u16_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_u16_3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Uint16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_u16_3');
  late final _cv_Mat_get_u16_3 = _cv_Mat_get_u16_3Ptr
      .asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_u8_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_u8_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_u8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int)>>(
          'cv_Mat_get_u8_1');
  late final _cv_Mat_get_u8_1 =
      _cv_Mat_get_u8_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_u8_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_u8_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_u8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_get_u8_2');
  late final _cv_Mat_get_u8_2 =
      _cv_Mat_get_u8_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_u8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_u8_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_u8_3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'cv_Mat_get_u8_3');
  late final _cv_Mat_get_u8_3 = _cv_Mat_get_u8_3Ptr
      .asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  bool cv_Mat_isContinuous(
    Mat self,
  ) {
    return _cv_Mat_isContinuous(
      self,
    );
  }

  late final _cv_Mat_isContinuousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>(
          'cv_Mat_isContinuous');
  late final _cv_Mat_isContinuous =
      _cv_Mat_isContinuousPtr.asFunction<bool Function(Mat)>(isLeaf: true);

  bool cv_Mat_isSubmatrix(
    Mat self,
  ) {
    return _cv_Mat_isSubmatrix(
      self,
    );
  }

  late final _cv_Mat_isSubmatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_Mat_isSubmatrix');
  late final _cv_Mat_isSubmatrix =
      _cv_Mat_isSubmatrixPtr.asFunction<bool Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_locateROI(
    Mat self,
    ffi.Pointer<CvSize> wholeSize,
    ffi.Pointer<CvPoint> ofs,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_locateROI(
      self,
      wholeSize,
      ofs,
      callback,
    );
  }

  late final _cv_Mat_locateROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<CvSize>,
              ffi.Pointer<CvPoint>, imp1.CvCallback_0)>>('cv_Mat_locateROI');
  late final _cv_Mat_locateROI = _cv_Mat_locateROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<CvSize>, ffi.Pointer<CvPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_mean(
    Mat self,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_mean(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_Mat_mean');
  late final _cv_Mat_mean = _cv_Mat_meanPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_mean_1(
    Mat self,
    Mat mask,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_mean_1(
      self,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_Mat_mean_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>,
              imp1.CvCallback_0)>>('cv_Mat_mean_1');
  late final _cv_Mat_mean_1 = _cv_Mat_mean_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_mul(
    Mat self,
    Mat val,
    ffi.Pointer<Mat> dst,
    double scale,
  ) {
    return _cv_Mat_mul(
      self,
      val,
      dst,
      scale,
    );
  }

  late final _cv_Mat_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<Mat>, ffi.Double)>>('cv_Mat_mul');
  late final _cv_Mat_mul = _cv_Mat_mulPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>, double)>();

  ffi.Pointer<CvStatus> cv_Mat_ones(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_ones(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_onesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_ones');
  late final _cv_Mat_ones = _cv_Mat_onesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_add_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'cv_Mat_op_add_f32');
  late final _cv_Mat_op_add_f32 = _cv_Mat_op_add_f32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_add_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_f64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'cv_Mat_op_add_f64');
  late final _cv_Mat_op_add_f64 = _cv_Mat_op_add_f64Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_i16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'cv_Mat_op_add_i16');
  late final _cv_Mat_op_add_i16 = _cv_Mat_op_add_i16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_i32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'cv_Mat_op_add_i32');
  late final _cv_Mat_op_add_i32 = _cv_Mat_op_add_i32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_i8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'cv_Mat_op_add_i8');
  late final _cv_Mat_op_add_i8 = _cv_Mat_op_add_i8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_add_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'cv_Mat_op_add_mat');
  late final _cv_Mat_op_add_mat = _cv_Mat_op_add_matPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_u16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'cv_Mat_op_add_u16');
  late final _cv_Mat_op_add_u16 = _cv_Mat_op_add_u16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_u8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'cv_Mat_op_add_u8');
  late final _cv_Mat_op_add_u8 = _cv_Mat_op_add_u8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_div_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'cv_Mat_op_div_f32');
  late final _cv_Mat_op_div_f32 = _cv_Mat_op_div_f32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_div_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_f64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'cv_Mat_op_div_f64');
  late final _cv_Mat_op_div_f64 = _cv_Mat_op_div_f64Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_i16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'cv_Mat_op_div_i16');
  late final _cv_Mat_op_div_i16 = _cv_Mat_op_div_i16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_i32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'cv_Mat_op_div_i32');
  late final _cv_Mat_op_div_i32 = _cv_Mat_op_div_i32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_i8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'cv_Mat_op_div_i8');
  late final _cv_Mat_op_div_i8 = _cv_Mat_op_div_i8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_div_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'cv_Mat_op_div_mat');
  late final _cv_Mat_op_div_mat = _cv_Mat_op_div_matPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_u16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'cv_Mat_op_div_u16');
  late final _cv_Mat_op_div_u16 = _cv_Mat_op_div_u16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_u8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'cv_Mat_op_div_u8');
  late final _cv_Mat_op_div_u8 = _cv_Mat_op_div_u8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_mul_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'cv_Mat_op_mul_f32');
  late final _cv_Mat_op_mul_f32 = _cv_Mat_op_mul_f32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_mul_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_f64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'cv_Mat_op_mul_f64');
  late final _cv_Mat_op_mul_f64 = _cv_Mat_op_mul_f64Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_i16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'cv_Mat_op_mul_i16');
  late final _cv_Mat_op_mul_i16 = _cv_Mat_op_mul_i16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_i32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'cv_Mat_op_mul_i32');
  late final _cv_Mat_op_mul_i32 = _cv_Mat_op_mul_i32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_i8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'cv_Mat_op_mul_i8');
  late final _cv_Mat_op_mul_i8 = _cv_Mat_op_mul_i8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_mul_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'cv_Mat_op_mul_mat');
  late final _cv_Mat_op_mul_mat = _cv_Mat_op_mul_matPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_u16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'cv_Mat_op_mul_u16');
  late final _cv_Mat_op_mul_u16 = _cv_Mat_op_mul_u16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_u8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'cv_Mat_op_mul_u8');
  late final _cv_Mat_op_mul_u8 = _cv_Mat_op_mul_u8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_sub_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'cv_Mat_op_sub_f32');
  late final _cv_Mat_op_sub_f32 = _cv_Mat_op_sub_f32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_sub_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_f64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'cv_Mat_op_sub_f64');
  late final _cv_Mat_op_sub_f64 = _cv_Mat_op_sub_f64Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_i16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'cv_Mat_op_sub_i16');
  late final _cv_Mat_op_sub_i16 = _cv_Mat_op_sub_i16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_i32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'cv_Mat_op_sub_i32');
  late final _cv_Mat_op_sub_i32 = _cv_Mat_op_sub_i32Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_i8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'cv_Mat_op_sub_i8');
  late final _cv_Mat_op_sub_i8 = _cv_Mat_op_sub_i8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_sub_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'cv_Mat_op_sub_mat');
  late final _cv_Mat_op_sub_mat = _cv_Mat_op_sub_matPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_u16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'cv_Mat_op_sub_u16');
  late final _cv_Mat_op_sub_u16 = _cv_Mat_op_sub_u16Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_u8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'cv_Mat_op_sub_u8');
  late final _cv_Mat_op_sub_u8 = _cv_Mat_op_sub_u8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_patchNaNs(
    Mat self,
    double val,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_patchNaNs(
      self,
      val,
      callback,
    );
  }

  late final _cv_Mat_patchNaNsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, imp1.CvCallback_0)>>('cv_Mat_patchNaNs');
  late final _cv_Mat_patchNaNs = _cv_Mat_patchNaNsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<imp1.uchar> cv_Mat_ptr_uchar_1(
    Mat self,
    int i,
  ) {
    return _cv_Mat_ptr_uchar_1(
      self,
      i,
    );
  }

  late final _cv_Mat_ptr_uchar_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat, ffi.Int)>>(
      'cv_Mat_ptr_uchar_1');
  late final _cv_Mat_ptr_uchar_1 = _cv_Mat_ptr_uchar_1Ptr
      .asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int)>();

  ffi.Pointer<imp1.uchar> cv_Mat_ptr_uchar_2(
    Mat self,
    int i,
    int j,
  ) {
    return _cv_Mat_ptr_uchar_2(
      self,
      i,
      j,
    );
  }

  late final _cv_Mat_ptr_uchar_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp1.uchar> Function(
              Mat, ffi.Int, ffi.Int)>>('cv_Mat_ptr_uchar_2');
  late final _cv_Mat_ptr_uchar_2 = _cv_Mat_ptr_uchar_2Ptr
      .asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int, int)>();

  ffi.Pointer<imp1.uchar> cv_Mat_ptr_uchar_3(
    Mat self,
    int i,
    int j,
    int k,
  ) {
    return _cv_Mat_ptr_uchar_3(
      self,
      i,
      j,
      k,
    );
  }

  late final _cv_Mat_ptr_uchar_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp1.uchar> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_ptr_uchar_3');
  late final _cv_Mat_ptr_uchar_3 = _cv_Mat_ptr_uchar_3Ptr
      .asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int, int, int)>();

  ffi.Pointer<CvStatus> cv_Mat_region(
    Mat self,
    CvRect r,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_region(
      self,
      r,
      rval,
      callback,
    );
  }

  late final _cv_Mat_regionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvRect, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_region');
  late final _cv_Mat_region = _cv_Mat_regionPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvRect, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_release(
    Mat self,
  ) {
    return _cv_Mat_release(
      self,
    );
  }

  late final _cv_Mat_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat)>>(
          'cv_Mat_release');
  late final _cv_Mat_release =
      _cv_Mat_releasePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_reshape(
    Mat self,
    int cn,
    int rows,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_reshape(
      self,
      cn,
      rows,
      rval,
      callback,
    );
  }

  late final _cv_Mat_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_reshape');
  late final _cv_Mat_reshape = _cv_Mat_reshapePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_reshape_1(
    Mat self,
    int cn,
    VecI32 newshape,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_reshape_1(
      self,
      cn,
      newshape,
      rval,
      callback,
    );
  }

  late final _cv_Mat_reshape_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, VecI32, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_reshape_1');
  late final _cv_Mat_reshape_1 = _cv_Mat_reshape_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, VecI32, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_row(
    Mat self,
    int y,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_row(
      self,
      y,
      rval,
      callback,
    );
  }

  late final _cv_Mat_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_row');
  late final _cv_Mat_row = _cv_Mat_rowPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_rows(
    Mat self,
  ) {
    return _cv_Mat_rows(
      self,
    );
  }

  late final _cv_Mat_rowsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_rows');
  late final _cv_Mat_rows =
      _cv_Mat_rowsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_setTo(
    Mat self,
    Scalar value,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_setTo(
      self,
      value,
      mask,
      callback,
    );
  }

  late final _cv_Mat_setToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Mat, imp1.CvCallback_0)>>('cv_Mat_setTo');
  late final _cv_Mat_setTo = _cv_Mat_setToPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Scalar, Mat, imp1.CvCallback_0)>(isLeaf: true);

  void cv_Mat_set_Vec2b(
    Mat self,
    int i0,
    int i1,
    Vec2b val,
  ) {
    return _cv_Mat_set_Vec2b(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2bPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2b)>>(
      'cv_Mat_set_Vec2b');
  late final _cv_Mat_set_Vec2b = _cv_Mat_set_Vec2bPtr
      .asFunction<void Function(Mat, int, int, Vec2b)>(isLeaf: true);

  void cv_Mat_set_Vec2d(
    Mat self,
    int i0,
    int i1,
    Vec2d val,
  ) {
    return _cv_Mat_set_Vec2d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2dPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2d)>>(
      'cv_Mat_set_Vec2d');
  late final _cv_Mat_set_Vec2d = _cv_Mat_set_Vec2dPtr
      .asFunction<void Function(Mat, int, int, Vec2d)>(isLeaf: true);

  void cv_Mat_set_Vec2f(
    Mat self,
    int i0,
    int i1,
    Vec2f val,
  ) {
    return _cv_Mat_set_Vec2f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2fPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2f)>>(
      'cv_Mat_set_Vec2f');
  late final _cv_Mat_set_Vec2f = _cv_Mat_set_Vec2fPtr
      .asFunction<void Function(Mat, int, int, Vec2f)>(isLeaf: true);

  void cv_Mat_set_Vec2i(
    Mat self,
    int i0,
    int i1,
    Vec2i val,
  ) {
    return _cv_Mat_set_Vec2i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2i)>>(
      'cv_Mat_set_Vec2i');
  late final _cv_Mat_set_Vec2i = _cv_Mat_set_Vec2iPtr
      .asFunction<void Function(Mat, int, int, Vec2i)>(isLeaf: true);

  void cv_Mat_set_Vec2s(
    Mat self,
    int i0,
    int i1,
    Vec2s val,
  ) {
    return _cv_Mat_set_Vec2s(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2sPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2s)>>(
      'cv_Mat_set_Vec2s');
  late final _cv_Mat_set_Vec2s = _cv_Mat_set_Vec2sPtr
      .asFunction<void Function(Mat, int, int, Vec2s)>(isLeaf: true);

  void cv_Mat_set_Vec2w(
    Mat self,
    int i0,
    int i1,
    Vec2w val,
  ) {
    return _cv_Mat_set_Vec2w(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2wPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2w)>>(
      'cv_Mat_set_Vec2w');
  late final _cv_Mat_set_Vec2w = _cv_Mat_set_Vec2wPtr
      .asFunction<void Function(Mat, int, int, Vec2w)>(isLeaf: true);

  void cv_Mat_set_Vec3b(
    Mat self,
    int i0,
    int i1,
    Vec3b val,
  ) {
    return _cv_Mat_set_Vec3b(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3bPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3b)>>(
      'cv_Mat_set_Vec3b');
  late final _cv_Mat_set_Vec3b = _cv_Mat_set_Vec3bPtr
      .asFunction<void Function(Mat, int, int, Vec3b)>(isLeaf: true);

  void cv_Mat_set_Vec3d(
    Mat self,
    int i0,
    int i1,
    Vec3d val,
  ) {
    return _cv_Mat_set_Vec3d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3dPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3d)>>(
      'cv_Mat_set_Vec3d');
  late final _cv_Mat_set_Vec3d = _cv_Mat_set_Vec3dPtr
      .asFunction<void Function(Mat, int, int, Vec3d)>(isLeaf: true);

  void cv_Mat_set_Vec3f(
    Mat self,
    int i0,
    int i1,
    Vec3f val,
  ) {
    return _cv_Mat_set_Vec3f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3fPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3f)>>(
      'cv_Mat_set_Vec3f');
  late final _cv_Mat_set_Vec3f = _cv_Mat_set_Vec3fPtr
      .asFunction<void Function(Mat, int, int, Vec3f)>(isLeaf: true);

  void cv_Mat_set_Vec3i(
    Mat self,
    int i0,
    int i1,
    Vec3i val,
  ) {
    return _cv_Mat_set_Vec3i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3i)>>(
      'cv_Mat_set_Vec3i');
  late final _cv_Mat_set_Vec3i = _cv_Mat_set_Vec3iPtr
      .asFunction<void Function(Mat, int, int, Vec3i)>(isLeaf: true);

  void cv_Mat_set_Vec3s(
    Mat self,
    int i0,
    int i1,
    Vec3s val,
  ) {
    return _cv_Mat_set_Vec3s(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3sPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3s)>>(
      'cv_Mat_set_Vec3s');
  late final _cv_Mat_set_Vec3s = _cv_Mat_set_Vec3sPtr
      .asFunction<void Function(Mat, int, int, Vec3s)>(isLeaf: true);

  void cv_Mat_set_Vec3w(
    Mat self,
    int i0,
    int i1,
    Vec3w val,
  ) {
    return _cv_Mat_set_Vec3w(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3wPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3w)>>(
      'cv_Mat_set_Vec3w');
  late final _cv_Mat_set_Vec3w = _cv_Mat_set_Vec3wPtr
      .asFunction<void Function(Mat, int, int, Vec3w)>(isLeaf: true);

  void cv_Mat_set_Vec4b(
    Mat self,
    int i0,
    int i1,
    Vec4b val,
  ) {
    return _cv_Mat_set_Vec4b(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4bPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4b)>>(
      'cv_Mat_set_Vec4b');
  late final _cv_Mat_set_Vec4b = _cv_Mat_set_Vec4bPtr
      .asFunction<void Function(Mat, int, int, Vec4b)>(isLeaf: true);

  void cv_Mat_set_Vec4d(
    Mat self,
    int i0,
    int i1,
    Vec4d val,
  ) {
    return _cv_Mat_set_Vec4d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4dPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4d)>>(
      'cv_Mat_set_Vec4d');
  late final _cv_Mat_set_Vec4d = _cv_Mat_set_Vec4dPtr
      .asFunction<void Function(Mat, int, int, Vec4d)>(isLeaf: true);

  void cv_Mat_set_Vec4f(
    Mat self,
    int i0,
    int i1,
    Vec4f val,
  ) {
    return _cv_Mat_set_Vec4f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4fPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4f)>>(
      'cv_Mat_set_Vec4f');
  late final _cv_Mat_set_Vec4f = _cv_Mat_set_Vec4fPtr
      .asFunction<void Function(Mat, int, int, Vec4f)>(isLeaf: true);

  void cv_Mat_set_Vec4i(
    Mat self,
    int i0,
    int i1,
    Vec4i val,
  ) {
    return _cv_Mat_set_Vec4i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4i)>>(
      'cv_Mat_set_Vec4i');
  late final _cv_Mat_set_Vec4i = _cv_Mat_set_Vec4iPtr
      .asFunction<void Function(Mat, int, int, Vec4i)>(isLeaf: true);

  void cv_Mat_set_Vec4s(
    Mat self,
    int i0,
    int i1,
    Vec4s val,
  ) {
    return _cv_Mat_set_Vec4s(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4sPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4s)>>(
      'cv_Mat_set_Vec4s');
  late final _cv_Mat_set_Vec4s = _cv_Mat_set_Vec4sPtr
      .asFunction<void Function(Mat, int, int, Vec4s)>(isLeaf: true);

  void cv_Mat_set_Vec4w(
    Mat self,
    int i0,
    int i1,
    Vec4w val,
  ) {
    return _cv_Mat_set_Vec4w(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4wPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4w)>>(
      'cv_Mat_set_Vec4w');
  late final _cv_Mat_set_Vec4w = _cv_Mat_set_Vec4wPtr
      .asFunction<void Function(Mat, int, int, Vec4w)>(isLeaf: true);

  void cv_Mat_set_Vec6d(
    Mat self,
    int i0,
    int i1,
    Vec6d val,
  ) {
    return _cv_Mat_set_Vec6d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec6dPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6d)>>(
      'cv_Mat_set_Vec6d');
  late final _cv_Mat_set_Vec6d = _cv_Mat_set_Vec6dPtr
      .asFunction<void Function(Mat, int, int, Vec6d)>(isLeaf: true);

  void cv_Mat_set_Vec6f(
    Mat self,
    int i0,
    int i1,
    Vec6f val,
  ) {
    return _cv_Mat_set_Vec6f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec6fPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6f)>>(
      'cv_Mat_set_Vec6f');
  late final _cv_Mat_set_Vec6f = _cv_Mat_set_Vec6fPtr
      .asFunction<void Function(Mat, int, int, Vec6f)>(isLeaf: true);

  void cv_Mat_set_Vec6i(
    Mat self,
    int i0,
    int i1,
    Vec6i val,
  ) {
    return _cv_Mat_set_Vec6i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec6iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6i)>>(
      'cv_Mat_set_Vec6i');
  late final _cv_Mat_set_Vec6i = _cv_Mat_set_Vec6iPtr
      .asFunction<void Function(Mat, int, int, Vec6i)>(isLeaf: true);

  void cv_Mat_set_Vec8i(
    Mat self,
    int i0,
    int i1,
    Vec8i val,
  ) {
    return _cv_Mat_set_Vec8i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec8iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec8i)>>(
      'cv_Mat_set_Vec8i');
  late final _cv_Mat_set_Vec8i = _cv_Mat_set_Vec8iPtr
      .asFunction<void Function(Mat, int, int, Vec8i)>(isLeaf: true);

  void cv_Mat_set_f32_1(
    Mat self,
    int i0,
    double val,
  ) {
    return _cv_Mat_set_f32_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_f32_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, float_t)>>(
          'cv_Mat_set_f32_1');
  late final _cv_Mat_set_f32_1 = _cv_Mat_set_f32_1Ptr
      .asFunction<void Function(Mat, int, double)>(isLeaf: true);

  void cv_Mat_set_f32_2(
    Mat self,
    int i0,
    int i1,
    double val,
  ) {
    return _cv_Mat_set_f32_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_f32_2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, float_t)>>(
      'cv_Mat_set_f32_2');
  late final _cv_Mat_set_f32_2 = _cv_Mat_set_f32_2Ptr
      .asFunction<void Function(Mat, int, int, double)>(isLeaf: true);

  void cv_Mat_set_f32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    double val,
  ) {
    return _cv_Mat_set_f32_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_f32_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, float_t)>>('cv_Mat_set_f32_3');
  late final _cv_Mat_set_f32_3 = _cv_Mat_set_f32_3Ptr
      .asFunction<void Function(Mat, int, int, int, double)>(isLeaf: true);

  void cv_Mat_set_f64_1(
    Mat self,
    int i0,
    double val,
  ) {
    return _cv_Mat_set_f64_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_f64_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, double_t)>>(
          'cv_Mat_set_f64_1');
  late final _cv_Mat_set_f64_1 = _cv_Mat_set_f64_1Ptr
      .asFunction<void Function(Mat, int, double)>(isLeaf: true);

  void cv_Mat_set_f64_2(
    Mat self,
    int i0,
    int i1,
    double val,
  ) {
    return _cv_Mat_set_f64_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_f64_2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, double_t)>>(
      'cv_Mat_set_f64_2');
  late final _cv_Mat_set_f64_2 = _cv_Mat_set_f64_2Ptr
      .asFunction<void Function(Mat, int, int, double)>(isLeaf: true);

  void cv_Mat_set_f64_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    double val,
  ) {
    return _cv_Mat_set_f64_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_f64_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, double_t)>>('cv_Mat_set_f64_3');
  late final _cv_Mat_set_f64_3 = _cv_Mat_set_f64_3Ptr
      .asFunction<void Function(Mat, int, int, int, double)>(isLeaf: true);

  void cv_Mat_set_i16_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_i16_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_i16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int16)>>(
          'cv_Mat_set_i16_1');
  late final _cv_Mat_set_i16_1 = _cv_Mat_set_i16_1Ptr
      .asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_i16_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_i16_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_i16_2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>>(
      'cv_Mat_set_i16_2');
  late final _cv_Mat_set_i16_2 = _cv_Mat_set_i16_2Ptr
      .asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_i16_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_i16_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>>('cv_Mat_set_i16_3');
  late final _cv_Mat_set_i16_3 = _cv_Mat_set_i16_3Ptr
      .asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i32_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_i32_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_i32_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int32)>>(
          'cv_Mat_set_i32_1');
  late final _cv_Mat_set_i32_1 = _cv_Mat_set_i32_1Ptr
      .asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_i32_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_i32_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_i32_2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>>(
      'cv_Mat_set_i32_2');
  late final _cv_Mat_set_i32_2 = _cv_Mat_set_i32_2Ptr
      .asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_i32_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_i32_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>>('cv_Mat_set_i32_3');
  late final _cv_Mat_set_i32_3 = _cv_Mat_set_i32_3Ptr
      .asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i8_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_i8_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_i8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int8)>>(
          'cv_Mat_set_i8_1');
  late final _cv_Mat_set_i8_1 = _cv_Mat_set_i8_1Ptr
      .asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_i8_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_i8_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_i8_2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>>(
      'cv_Mat_set_i8_2');
  late final _cv_Mat_set_i8_2 = _cv_Mat_set_i8_2Ptr
      .asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_i8_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_i8_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>>('cv_Mat_set_i8_3');
  late final _cv_Mat_set_i8_3 = _cv_Mat_set_i8_3Ptr
      .asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u16_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_u16_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_u16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Uint16)>>(
          'cv_Mat_set_u16_1');
  late final _cv_Mat_set_u16_1 = _cv_Mat_set_u16_1Ptr
      .asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_u16_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_u16_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_u16_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Uint16)>>('cv_Mat_set_u16_2');
  late final _cv_Mat_set_u16_2 = _cv_Mat_set_u16_2Ptr
      .asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_u16_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_u16_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>>('cv_Mat_set_u16_3');
  late final _cv_Mat_set_u16_3 = _cv_Mat_set_u16_3Ptr
      .asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u8_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_u8_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_u8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Uint8)>>(
          'cv_Mat_set_u8_1');
  late final _cv_Mat_set_u8_1 = _cv_Mat_set_u8_1Ptr
      .asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_u8_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_u8_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_u8_2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>>(
      'cv_Mat_set_u8_2');
  late final _cv_Mat_set_u8_2 = _cv_Mat_set_u8_2Ptr
      .asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_u8_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_u8_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>>('cv_Mat_set_u8_3');
  late final _cv_Mat_set_u8_3 = _cv_Mat_set_u8_3Ptr
      .asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<VecI32> cv_Mat_size(
    Mat self,
  ) {
    return _cv_Mat_size(
      self,
    );
  }

  late final _cv_Mat_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(Mat)>>(
          'cv_Mat_size');
  late final _cv_Mat_size = _cv_Mat_sizePtr
      .asFunction<ffi.Pointer<VecI32> Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_sqrt(
    Mat self,
    Mat rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_sqrt(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_Mat_sqrt');
  late final _cv_Mat_sqrt = _cv_Mat_sqrtPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  MatStep cv_Mat_step(
    Mat self,
  ) {
    return _cv_Mat_step(
      self,
    );
  }

  late final _cv_Mat_stepPtr =
      _lookup<ffi.NativeFunction<MatStep Function(Mat)>>('cv_Mat_step');
  late final _cv_Mat_step =
      _cv_Mat_stepPtr.asFunction<MatStep Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_t(
    Mat self,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_t(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_tPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_t');
  late final _cv_Mat_t = _cv_Mat_tPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toFmtString(
    Mat self,
    int fmtType,
    int f16Precision,
    int f32Precision,
    int f64Precision,
    bool multiLine,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _cv_Mat_toFmtString(
      self,
      fmtType,
      f16Precision,
      f32Precision,
      f64Precision,
      multiLine,
      rval,
    );
  }

  late final _cv_Mat_toFmtStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cv_Mat_toFmtString');
  late final _cv_Mat_toFmtString = _cv_Mat_toFmtStringPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, bool, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecChar(
    Mat self,
    ffi.Pointer<VecChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecChar(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_toVecCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecChar>,
              imp1.CvCallback_0)>>('cv_Mat_toVecChar');
  late final _cv_Mat_toVecChar = _cv_Mat_toVecCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecChar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint(
    Mat self,
    ffi.Pointer<VecPoint> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint>,
              imp1.CvCallback_0)>>('cv_Mat_toVecPoint');
  late final _cv_Mat_toVecPoint = _cv_Mat_toVecPointPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint2f(
    Mat self,
    ffi.Pointer<VecPoint2f> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint2f(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPoint2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>,
              imp1.CvCallback_0)>>('cv_Mat_toVecPoint2f');
  late final _cv_Mat_toVecPoint2f = _cv_Mat_toVecPoint2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint3f(
    Mat self,
    ffi.Pointer<VecPoint3f> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint3f(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPoint3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3f>,
              imp1.CvCallback_0)>>('cv_Mat_toVecPoint3f');
  late final _cv_Mat_toVecPoint3f = _cv_Mat_toVecPoint3fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecPoint3f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint3i(
    Mat self,
    ffi.Pointer<VecPoint3i> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint3i(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPoint3iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3i>,
              imp1.CvCallback_0)>>('cv_Mat_toVecPoint3i');
  late final _cv_Mat_toVecPoint3i = _cv_Mat_toVecPoint3iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecPoint3i>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecUChar(
    Mat self,
    ffi.Pointer<VecUChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecUChar(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_toVecUCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>,
              imp1.CvCallback_0)>>('cv_Mat_toVecUChar');
  late final _cv_Mat_toVecUChar = _cv_Mat_toVecUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecUChar>, imp1.CvCallback_0)>();

  int cv_Mat_total(
    Mat self,
  ) {
    return _cv_Mat_total(
      self,
    );
  }

  late final _cv_Mat_totalPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('cv_Mat_total');
  late final _cv_Mat_total =
      _cv_Mat_totalPtr.asFunction<int Function(Mat)>(isLeaf: true);

  int cv_Mat_type(
    Mat self,
  ) {
    return _cv_Mat_type(
      self,
    );
  }

  late final _cv_Mat_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_type');
  late final _cv_Mat_type =
      _cv_Mat_typePtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_zeros(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_zeros(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_zerosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_zeros');
  late final _cv_Mat_zeros = _cv_Mat_zerosPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCABackProject(
    Mat data,
    Mat mean,
    Mat eigenvectors,
    Mat result,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCABackProject(
      data,
      mean,
      eigenvectors,
      result,
      callback,
    );
  }

  late final _cv_PCABackProjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_PCABackProject');
  late final _cv_PCABackProject = _cv_PCABackProjectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCACompute(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    Mat eigenvalues,
    int maxComponents,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCACompute(
      src,
      mean,
      eigenvectors,
      eigenvalues,
      maxComponents,
      callback,
    );
  }

  late final _cv_PCAComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int,
              imp1.CvCallback_0)>>('cv_PCACompute');
  late final _cv_PCACompute = _cv_PCAComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCACompute_1(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    Mat eigenvalues,
    double retainedVariance,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCACompute_1(
      src,
      mean,
      eigenvectors,
      eigenvalues,
      retainedVariance,
      callback,
    );
  }

  late final _cv_PCACompute_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Double,
              imp1.CvCallback_0)>>('cv_PCACompute_1');
  late final _cv_PCACompute_1 = _cv_PCACompute_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCAProject(
    Mat data,
    Mat mean,
    Mat eigenvectors,
    Mat result,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCAProject(
      data,
      mean,
      eigenvectors,
      result,
      callback,
    );
  }

  late final _cv_PCAProjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_PCAProject');
  late final _cv_PCAProject = _cv_PCAProjectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PSNR(
    Mat src1,
    Mat src2,
    double R,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PSNR(
      src1,
      src2,
      R,
      rval,
      callback,
    );
  }

  late final _cv_PSNRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_PSNR');
  late final _cv_PSNR = _cv_PSNRPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  void cv_RNG_close(
    imp1.RNGPtr rng,
  ) {
    return _cv_RNG_close(
      rng,
    );
  }

  late final _cv_RNG_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>>(
          'cv_RNG_close');
  late final _cv_RNG_close =
      _cv_RNG_closePtr.asFunction<void Function(imp1.RNGPtr)>();

  ffi.Pointer<CvStatus> cv_RNG_create(
    ffi.Pointer<RNG> rval,
  ) {
    return _cv_RNG_create(
      rval,
    );
  }

  late final _cv_RNG_createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>>(
      'cv_RNG_create');
  late final _cv_RNG_create = _cv_RNG_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> cv_RNG_create_1(
    int state,
    ffi.Pointer<RNG> rval,
  ) {
    return _cv_RNG_create_1(
      state,
      rval,
    );
  }

  late final _cv_RNG_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Uint64, ffi.Pointer<RNG>)>>('cv_RNG_create_1');
  late final _cv_RNG_create_1 = _cv_RNG_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> cv_RNG_fill(
    RNG rng,
    Mat mat,
    int distType,
    double a,
    double b,
    bool saturateRange,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_RNG_fill(
      rng,
      mat,
      distType,
      a,
      b,
      saturateRange,
      callback,
    );
  }

  late final _cv_RNG_fillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RNG, Mat, ffi.Int, ffi.Double,
              ffi.Double, ffi.Bool, imp1.CvCallback_0)>>('cv_RNG_fill');
  late final _cv_RNG_fill = _cv_RNG_fillPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          RNG, Mat, int, double, double, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_RNG_gaussian(
    RNG rng,
    double sigma,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _cv_RNG_gaussian(
      rng,
      sigma,
      rval,
    );
  }

  late final _cv_RNG_gaussianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Double, ffi.Pointer<ffi.Double>)>>('cv_RNG_gaussian');
  late final _cv_RNG_gaussian = _cv_RNG_gaussianPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> cv_RNG_next(
    RNG rng,
    ffi.Pointer<ffi.Uint32> rval,
  ) {
    return _cv_RNG_next(
      rng,
      rval,
    );
  }

  late final _cv_RNG_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Pointer<ffi.Uint32>)>>('cv_RNG_next');
  late final _cv_RNG_next = _cv_RNG_nextPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<CvStatus> cv_RNG_uniform(
    RNG rng,
    int a,
    int b,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _cv_RNG_uniform(
      rng,
      a,
      b,
      rval,
    );
  }

  late final _cv_RNG_uniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('cv_RNG_uniform');
  late final _cv_RNG_uniform = _cv_RNG_uniformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> cv_RNG_uniformDouble(
    RNG rng,
    double a,
    double b,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _cv_RNG_uniformDouble(
      rng,
      a,
      b,
      rval,
    );
  }

  late final _cv_RNG_uniformDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('cv_RNG_uniformDouble');
  late final _cv_RNG_uniformDouble = _cv_RNG_uniformDoublePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          RNG, double, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> cv_RotatedRect_boundingRect(
    RotatedRect rect,
    ffi.Pointer<CvRect> rval,
  ) {
    return _cv_RotatedRect_boundingRect(
      rect,
      rval,
    );
  }

  late final _cv_RotatedRect_boundingRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect,
              ffi.Pointer<CvRect>)>>('cv_RotatedRect_boundingRect');
  late final _cv_RotatedRect_boundingRect =
      _cv_RotatedRect_boundingRectPtr.asFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> cv_RotatedRect_boundingRect2f(
    RotatedRect rect,
    ffi.Pointer<CvRect2f> rval,
  ) {
    return _cv_RotatedRect_boundingRect2f(
      rect,
      rval,
    );
  }

  late final _cv_RotatedRect_boundingRect2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect,
              ffi.Pointer<CvRect2f>)>>('cv_RotatedRect_boundingRect2f');
  late final _cv_RotatedRect_boundingRect2f =
      _cv_RotatedRect_boundingRect2fPtr.asFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect2f>)>();

  ffi.Pointer<CvStatus> cv_RotatedRect_points(
    RotatedRect rect,
    ffi.Pointer<VecPoint2f> pts,
  ) {
    return _cv_RotatedRect_points(
      rect,
      pts,
    );
  }

  late final _cv_RotatedRect_pointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RotatedRect, ffi.Pointer<VecPoint2f>)>>('cv_RotatedRect_points');
  late final _cv_RotatedRect_points = _cv_RotatedRect_pointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvStatus> cv_SVBackSubst(
    Mat w,
    Mat u,
    Mat vt,
    Mat rhs,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVBackSubst(
      w,
      u,
      vt,
      rhs,
      dst,
      callback,
    );
  }

  late final _cv_SVBackSubstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_SVBackSubst');
  late final _cv_SVBackSubst = _cv_SVBackSubstPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SVD_Compute(
    Mat src,
    Mat w_r,
    Mat u_r,
    Mat vt_r,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVD_Compute(
      src,
      w_r,
      u_r,
      vt_r,
      flags,
      callback,
    );
  }

  late final _cv_SVD_ComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int,
              imp1.CvCallback_0)>>('cv_SVD_Compute');
  late final _cv_SVD_Compute = _cv_SVD_ComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SVD_backSubst(
    Mat w,
    Mat u,
    Mat vt,
    Mat rhs,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVD_backSubst(
      w,
      u,
      vt,
      rhs,
      dst,
      callback,
    );
  }

  late final _cv_SVD_backSubstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_SVD_backSubst');
  late final _cv_SVD_backSubst = _cv_SVD_backSubstPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SVDecomp(
    Mat w,
    Mat u,
    Mat vt,
    Mat d,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVDecomp(
      w,
      u,
      vt,
      d,
      flags,
      callback,
    );
  }

  late final _cv_SVDecompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_SVDecomp');
  late final _cv_SVDecomp = _cv_SVDecompPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_absdiff(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_absdiff(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_absdiffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_absdiff');
  late final _cv_absdiff = _cv_absdiffPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_add(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_add(
      src1,
      src2,
      dst,
      mask,
      dtype,
      callback,
    );
  }

  late final _cv_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_add');
  late final _cv_add = _cv_addPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_addWeighted(
    Mat src1,
    double alpha,
    Mat src2,
    double beta,
    double gamma,
    Mat dst,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_addWeighted(
      src1,
      alpha,
      src2,
      beta,
      gamma,
      dst,
      dtype,
      callback,
    );
  }

  late final _cv_addWeightedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, ffi.Double,
              ffi.Double, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_addWeighted');
  late final _cv_addWeighted = _cv_addWeightedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, Mat, double, double, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_batchDistance(
    Mat src1,
    Mat src2,
    Mat dist,
    int dtype,
    Mat nidx,
    int normType,
    int K,
    Mat mask,
    int update,
    bool crosscheck,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_batchDistance(
      src1,
      src2,
      dist,
      dtype,
      nidx,
      normType,
      K,
      mask,
      update,
      crosscheck,
      callback,
    );
  }

  late final _cv_batchDistancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              Mat,
              ffi.Int,
              Mat,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Int,
              ffi.Bool,
              imp1.CvCallback_0)>>('cv_batchDistance');
  late final _cv_batchDistance = _cv_batchDistancePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, Mat, int, int, Mat,
          int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_and(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_and(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_andPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_and');
  late final _cv_bitwise_and = _cv_bitwise_andPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_and_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_and_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_and_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_and_1');
  late final _cv_bitwise_and_1 = _cv_bitwise_and_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_not(
    Mat src1,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_not(
      src1,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_notPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_not');
  late final _cv_bitwise_not = _cv_bitwise_notPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_not_1(
    Mat src1,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_not_1(
      src1,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_not_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_not_1');
  late final _cv_bitwise_not_1 = _cv_bitwise_not_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_or(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_or(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_orPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_or');
  late final _cv_bitwise_or = _cv_bitwise_orPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_or_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_or_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_or_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_or_1');
  late final _cv_bitwise_or_1 = _cv_bitwise_or_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_xor(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_xor(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_xorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_xor');
  late final _cv_bitwise_xor = _cv_bitwise_xorPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_xor_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_xor_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_xor_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_bitwise_xor_1');
  late final _cv_bitwise_xor_1 = _cv_bitwise_xor_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_borderInterpolate(
    int p,
    int len,
    int borderType,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_borderInterpolate(
      p,
      len,
      borderType,
      rval,
      callback,
    );
  }

  late final _cv_borderInterpolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_borderInterpolate');
  late final _cv_borderInterpolate = _cv_borderInterpolatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcCovarMatrix(
    Mat samples,
    Mat covar,
    Mat mean,
    int flags,
    int ctype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcCovarMatrix(
      samples,
      covar,
      mean,
      flags,
      ctype,
      callback,
    );
  }

  late final _cv_calcCovarMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int,
              imp1.CvCallback_0)>>('cv_calcCovarMatrix');
  late final _cv_calcCovarMatrix = _cv_calcCovarMatrixPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_cartToPolar(
    Mat x,
    Mat y,
    Mat magnitude,
    Mat angle,
    bool angleInDegrees,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_cartToPolar(
      x,
      y,
      magnitude,
      angle,
      angleInDegrees,
      callback,
    );
  }

  late final _cv_cartToPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool,
              imp1.CvCallback_0)>>('cv_cartToPolar');
  late final _cv_cartToPolar = _cv_cartToPolarPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_checkRange(
    Mat a,
    bool quiet,
    ffi.Pointer<CvPoint> pos,
    double minVal,
    double maxVal,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_checkRange(
      a,
      quiet,
      pos,
      minVal,
      maxVal,
      rval,
      callback,
    );
  }

  late final _cv_checkRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Bool,
              ffi.Pointer<CvPoint>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_checkRange');
  late final _cv_checkRange = _cv_checkRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool, ffi.Pointer<CvPoint>, double,
          double, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_colRange(
    Mat self,
    int start,
    int end,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_colRange(
      self,
      start,
      end,
      rval,
      callback,
    );
  }

  late final _cv_colRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_colRange');
  late final _cv_colRange = _cv_colRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_compare(
    Mat src1,
    Mat src2,
    Mat dst,
    int cmpop,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_compare(
      src1,
      src2,
      dst,
      cmpop,
      callback,
    );
  }

  late final _cv_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_compare');
  late final _cv_compare = _cv_comparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_completeSymm(
    Mat m,
    bool lowerToUpper,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_completeSymm(
      m,
      lowerToUpper,
      callback,
    );
  }

  late final _cv_completeSymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Bool, imp1.CvCallback_0)>>('cv_completeSymm');
  late final _cv_completeSymm = _cv_completeSymmPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_convertScaleAbs(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_convertScaleAbs(
      src,
      dst,
      alpha,
      beta,
      callback,
    );
  }

  late final _cv_convertScaleAbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double,
              imp1.CvCallback_0)>>('cv_convertScaleAbs');
  late final _cv_convertScaleAbs = _cv_convertScaleAbsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_copyMakeBorder(
    Mat src,
    Mat dst,
    int top,
    int bottom,
    int left,
    int right,
    int borderType,
    Scalar value,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_copyMakeBorder(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      borderType,
      value,
      callback,
    );
  }

  late final _cv_copyMakeBorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              Scalar,
              imp1.CvCallback_0)>>('cv_copyMakeBorder');
  late final _cv_copyMakeBorder = _cv_copyMakeBorderPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, int, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_copyTo(
    Mat src,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_copyTo(
      src,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_copyToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_copyTo');
  late final _cv_copyTo = _cv_copyToPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  int cv_countNonZero(
    Mat src,
  ) {
    return _cv_countNonZero(
      src,
    );
  }

  late final _cv_countNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_countNonZero');
  late final _cv_countNonZero =
      _cv_countNonZeroPtr.asFunction<int Function(Mat)>();

  ffi.Pointer<CvStatus> cv_dct(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_dct(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_dctPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_dct');
  late final _cv_dct = _cv_dctPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_determinant(
    Mat self,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_determinant(
      self,
      rval,
      callback,
    );
  }

  late final _cv_determinantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_determinant');
  late final _cv_determinant = _cv_determinantPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_dft(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_dft(
      src,
      dst,
      flags,
      nonzeroRows,
      callback,
    );
  }

  late final _cv_dftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_dft');
  late final _cv_dft = _cv_dftPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_divide(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_divide(
      src1,
      src2,
      dst,
      scale,
      dtype,
      callback,
    );
  }

  late final _cv_dividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_0)>>('cv_divide');
  late final _cv_divide = _cv_dividePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_eigen(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_eigen(
      src,
      eigenvalues,
      eigenvectors,
      rval,
      callback,
    );
  }

  late final _cv_eigenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_eigen');
  late final _cv_eigen = _cv_eigenPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_eigenNonSymmetric(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_eigenNonSymmetric(
      src,
      eigenvalues,
      eigenvectors,
      callback,
    );
  }

  late final _cv_eigenNonSymmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_eigenNonSymmetric');
  late final _cv_eigenNonSymmetric = _cv_eigenNonSymmetricPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_exp(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_exp(
      src,
      dst,
      callback,
    );
  }

  late final _cv_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_exp');
  late final _cv_exp = _cv_expPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_extractChannel(
    Mat src,
    Mat dst,
    int coi,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_extractChannel(
      src,
      dst,
      coi,
      callback,
    );
  }

  late final _cv_extractChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_extractChannel');
  late final _cv_extractChannel = _cv_extractChannelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findNonZero(
    Mat src,
    Mat idx,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findNonZero(
      src,
      idx,
      callback,
    );
  }

  late final _cv_findNonZeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_findNonZero');
  late final _cv_findNonZero = _cv_findNonZeroPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_flip(
    Mat src,
    Mat dst,
    int flipCode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_flip(
      src,
      dst,
      flipCode,
      callback,
    );
  }

  late final _cv_flipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_flip');
  late final _cv_flip = _cv_flipPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_flipND(
    Mat src,
    Mat dst,
    int axis,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_flipND(
      src,
      dst,
      axis,
      callback,
    );
  }

  late final _cv_flipNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_flipND');
  late final _cv_flipND = _cv_flipNDPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_gemm(
    Mat src1,
    Mat src2,
    double alpha,
    Mat src3,
    double beta,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_gemm(
      src1,
      src2,
      alpha,
      src3,
      beta,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_gemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat, ffi.Double,
              Mat, ffi.Int, imp1.CvCallback_0)>>('cv_gemm');
  late final _cv_gemm = _cv_gemmPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, Mat, double, Mat, int, imp1.CvCallback_0)>();

  int cv_getNumThreads() {
    return _cv_getNumThreads();
  }

  late final _cv_getNumThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cv_getNumThreads');
  late final _cv_getNumThreads =
      _cv_getNumThreadsPtr.asFunction<int Function()>();

  ffi.Pointer<CvStatus> cv_getOptimalDFTSize(
    int vecsize,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getOptimalDFTSize(
      vecsize,
      rval,
      callback,
    );
  }

  late final _cv_getOptimalDFTSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_getOptimalDFTSize');
  late final _cv_getOptimalDFTSize = _cv_getOptimalDFTSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  int cv_getTickCount() {
    return _cv_getTickCount();
  }

  late final _cv_getTickCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('cv_getTickCount');
  late final _cv_getTickCount =
      _cv_getTickCountPtr.asFunction<int Function()>();

  double cv_getTickFrequency() {
    return _cv_getTickFrequency();
  }

  late final _cv_getTickFrequencyPtr =
      _lookup<ffi.NativeFunction<double_t Function()>>('cv_getTickFrequency');
  late final _cv_getTickFrequency =
      _cv_getTickFrequencyPtr.asFunction<double Function()>();

  bool cv_hasNonZero(
    Mat src,
  ) {
    return _cv_hasNonZero(
      src,
    );
  }

  late final _cv_hasNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_hasNonZero');
  late final _cv_hasNonZero =
      _cv_hasNonZeroPtr.asFunction<bool Function(Mat)>();

  ffi.Pointer<CvStatus> cv_hconcat(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_hconcat(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_hconcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_hconcat');
  late final _cv_hconcat = _cv_hconcatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_idct(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_idct(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_idctPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_idct');
  late final _cv_idct = _cv_idctPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_idft(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_idft(
      src,
      dst,
      flags,
      nonzeroRows,
      callback,
    );
  }

  late final _cv_idftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_idft');
  late final _cv_idft = _cv_idftPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_inRange(
    Mat src,
    Mat lowerb,
    Mat upperb,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_inRange(
      src,
      lowerb,
      upperb,
      dst,
      callback,
    );
  }

  late final _cv_inRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_inRange');
  late final _cv_inRange = _cv_inRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_inRange_1(
    Mat src,
    Scalar lowerb,
    Scalar upperb,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_inRange_1(
      src,
      lowerb,
      upperb,
      dst,
      callback,
    );
  }

  late final _cv_inRange_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, Mat, imp1.CvCallback_0)>>('cv_inRange_1');
  late final _cv_inRange_1 = _cv_inRange_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Scalar, Scalar, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_insertChannel(
    Mat src,
    Mat dst,
    int coi,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_insertChannel(
      src,
      dst,
      coi,
      callback,
    );
  }

  late final _cv_insertChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_insertChannel');
  late final _cv_insertChannel = _cv_insertChannelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_invert(
    Mat src,
    Mat dst,
    int flags,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_invert(
      src,
      dst,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_invert');
  late final _cv_invert = _cv_invertPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_kmeans(
    Mat data,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_kmeans(
      data,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
      rval,
      callback,
    );
  }

  late final _cv_kmeansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              Mat,
              TermCriteria,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_kmeans');
  late final _cv_kmeans = _cv_kmeansPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, Mat, TermCriteria, int, int, Mat,
          ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_kmeans_points(
    VecPoint2f pts,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_kmeans_points(
      pts,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
      rval,
      callback,
    );
  }

  late final _cv_kmeans_pointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f,
              ffi.Int,
              Mat,
              TermCriteria,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_kmeans_points');
  late final _cv_kmeans_points = _cv_kmeans_pointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint2f, int, Mat, TermCriteria, int,
          int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_log(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_log(
      src,
      dst,
      callback,
    );
  }

  late final _cv_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_log');
  late final _cv_log = _cv_logPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_magnitude(
    Mat x,
    Mat y,
    Mat magnitude,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_magnitude(
      x,
      y,
      magnitude,
      callback,
    );
  }

  late final _cv_magnitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_magnitude');
  late final _cv_magnitude = _cv_magnitudePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_max(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_max(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_max');
  late final _cv_max = _cv_maxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mean(
    Mat src,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mean(
      src,
      rval,
      callback,
    );
  }

  late final _cv_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_mean');
  late final _cv_mean = _cv_meanPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_meanStdDev(
    Mat src,
    ffi.Pointer<Scalar> dstMean,
    ffi.Pointer<Scalar> dstStdDev,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_meanStdDev(
      src,
      dstMean,
      dstStdDev,
      callback,
    );
  }

  late final _cv_meanStdDevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>,
              ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_meanStdDev');
  late final _cv_meanStdDev = _cv_meanStdDevPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_meanStdDev_1(
    Mat src,
    ffi.Pointer<Scalar> dstMean,
    ffi.Pointer<Scalar> dstStdDev,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_meanStdDev_1(
      src,
      dstMean,
      dstStdDev,
      mask,
      callback,
    );
  }

  late final _cv_meanStdDev_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>,
              ffi.Pointer<Scalar>, Mat, imp1.CvCallback_0)>>('cv_meanStdDev_1');
  late final _cv_meanStdDev_1 = _cv_meanStdDev_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>,
          ffi.Pointer<Scalar>, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mean_1(
    Mat src,
    Mat mask,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mean_1(
      src,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_mean_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_mean_1');
  late final _cv_mean_1 = _cv_mean_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_merge(
    VecMat mats,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_merge(
      mats,
      dst,
      callback,
    );
  }

  late final _cv_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, Mat, imp1.CvCallback_0)>>('cv_merge');
  late final _cv_merge = _cv_mergePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecMat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_min(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_min(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_min');
  late final _cv_min = _cv_minPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_minMaxIdx(
    Mat self,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<ffi.Int> minIdx,
    ffi.Pointer<ffi.Int> maxIdx,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_minMaxIdx(
      self,
      minVal,
      maxVal,
      minIdx,
      maxIdx,
      mask,
      callback,
    );
  }

  late final _cv_minMaxIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              Mat,
              imp1.CvCallback_0)>>('cv_minMaxIdx');
  late final _cv_minMaxIdx = _cv_minMaxIdxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          Mat,
          imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_minMaxLoc(
    Mat self,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<CvPoint> minLoc,
    ffi.Pointer<CvPoint> maxLoc,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_minMaxLoc(
      self,
      minVal,
      maxVal,
      minLoc,
      maxLoc,
      mask,
      callback,
    );
  }

  late final _cv_minMaxLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<CvPoint>,
              ffi.Pointer<CvPoint>,
              Mat,
              imp1.CvCallback_0)>>('cv_minMaxLoc');
  late final _cv_minMaxLoc = _cv_minMaxLocPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<CvPoint>,
          ffi.Pointer<CvPoint>,
          Mat,
          imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mixChannels(
    VecMat src,
    VecMat dst,
    VecI32 fromTo,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mixChannels(
      src,
      dst,
      fromTo,
      callback,
    );
  }

  late final _cv_mixChannelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, VecMat, VecI32, imp1.CvCallback_0)>>('cv_mixChannels');
  late final _cv_mixChannels = _cv_mixChannelsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, VecMat, VecI32, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mulSpectrums(
    Mat a,
    Mat b,
    Mat c,
    int flags,
    bool conjB,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mulSpectrums(
      a,
      b,
      c,
      flags,
      conjB,
      callback,
    );
  }

  late final _cv_mulSpectrumsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Bool,
              imp1.CvCallback_0)>>('cv_mulSpectrums');
  late final _cv_mulSpectrums = _cv_mulSpectrumsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mulTransposed(
    Mat src,
    Mat dst,
    bool aTa,
    Mat delta,
    double scale,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mulTransposed(
      src,
      dst,
      aTa,
      delta,
      scale,
      dtype,
      callback,
    );
  }

  late final _cv_mulTransposedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool, Mat, ffi.Double,
              ffi.Int, imp1.CvCallback_0)>>('cv_mulTransposed');
  late final _cv_mulTransposed = _cv_mulTransposedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, bool, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_multiply(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_multiply(
      src1,
      src2,
      dst,
      scale,
      dtype,
      callback,
    );
  }

  late final _cv_multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_0)>>('cv_multiply');
  late final _cv_multiply = _cv_multiplyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_norm(
    Mat src1,
    int normType,
    Mat mask,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_norm(
      src1,
      normType,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_norm');
  late final _cv_norm = _cv_normPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_norm_1(
    Mat src1,
    Mat src2,
    int normType,
    Mat mask,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_norm_1(
      src1,
      src2,
      normType,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_norm_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_norm_1');
  late final _cv_norm_1 = _cv_norm_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_normalize(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    int typ,
    int dtype,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_normalize(
      src,
      dst,
      alpha,
      beta,
      typ,
      dtype,
      mask,
      callback,
    );
  }

  late final _cv_normalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double,
              ffi.Int, ffi.Int, Mat, imp1.CvCallback_0)>>('cv_normalize');
  late final _cv_normalize = _cv_normalizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_patchNaNs(
    Mat a,
    double val,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_patchNaNs(
      a,
      val,
      callback,
    );
  }

  late final _cv_patchNaNsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, imp1.CvCallback_0)>>('cv_patchNaNs');
  late final _cv_patchNaNs = _cv_patchNaNsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_perspectiveTransform(
    Mat src,
    Mat dst,
    Mat tm,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_perspectiveTransform(
      src,
      dst,
      tm,
      callback,
    );
  }

  late final _cv_perspectiveTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_perspectiveTransform');
  late final _cv_perspectiveTransform = _cv_perspectiveTransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_phase(
    Mat x,
    Mat y,
    Mat angle,
    bool angleInDegrees,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_phase(
      x,
      y,
      angle,
      angleInDegrees,
      callback,
    );
  }

  late final _cv_phasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Bool, imp1.CvCallback_0)>>('cv_phase');
  late final _cv_phase = _cv_phasePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_polarToCart(
    Mat magnitude,
    Mat degree,
    Mat x,
    Mat y,
    bool angleInDegrees,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_polarToCart(
      magnitude,
      degree,
      x,
      y,
      angleInDegrees,
      callback,
    );
  }

  late final _cv_polarToCartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool,
              imp1.CvCallback_0)>>('cv_polarToCart');
  late final _cv_polarToCart = _cv_polarToCartPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_pow(
    Mat src,
    double power,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_pow(
      src,
      power,
      dst,
      callback,
    );
  }

  late final _cv_powPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, Mat, imp1.CvCallback_0)>>('cv_pow');
  late final _cv_pow = _cv_powPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randShuffle(
    Mat mat,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randShuffle(
      mat,
      callback,
    );
  }

  late final _cv_randShufflePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_0)>>('cv_randShuffle');
  late final _cv_randShuffle = _cv_randShufflePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randShuffle_1(
    Mat mat,
    double iterFactor,
    RNG rng,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randShuffle_1(
      mat,
      iterFactor,
      rng,
      callback,
    );
  }

  late final _cv_randShuffle_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, RNG, imp1.CvCallback_0)>>('cv_randShuffle_1');
  late final _cv_randShuffle_1 = _cv_randShuffle_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, RNG, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randn(
    Mat mat,
    Scalar mean,
    Scalar stddev,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randn(
      mat,
      mean,
      stddev,
      callback,
    );
  }

  late final _cv_randnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, imp1.CvCallback_0)>>('cv_randn');
  late final _cv_randn = _cv_randnPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randu(
    Mat mat,
    Scalar low,
    Scalar high,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randu(
      mat,
      low,
      high,
      callback,
    );
  }

  late final _cv_randuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, imp1.CvCallback_0)>>('cv_randu');
  late final _cv_randu = _cv_randuPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_reduce(
    Mat src,
    Mat dst,
    int dim,
    int rType,
    int dType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_reduce(
      src,
      dst,
      dim,
      rType,
      dType,
      callback,
    );
  }

  late final _cv_reducePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_0)>>('cv_reduce');
  late final _cv_reduce = _cv_reducePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_reduceArgMax(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_reduceArgMax(
      src,
      dst,
      axis,
      lastIndex,
      callback,
    );
  }

  late final _cv_reduceArgMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool,
              imp1.CvCallback_0)>>('cv_reduceArgMax');
  late final _cv_reduceArgMax = _cv_reduceArgMaxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_reduceArgMin(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_reduceArgMin(
      src,
      dst,
      axis,
      lastIndex,
      callback,
    );
  }

  late final _cv_reduceArgMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool,
              imp1.CvCallback_0)>>('cv_reduceArgMin');
  late final _cv_reduceArgMin = _cv_reduceArgMinPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_repeat(
    Mat src,
    int nY,
    int nX,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_repeat(
      src,
      nY,
      nX,
      dst,
      callback,
    );
  }

  late final _cv_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Mat, imp1.CvCallback_0)>>('cv_repeat');
  late final _cv_repeat = _cv_repeatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_rotate(
    Mat src,
    Mat dst,
    int rotateCode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_rotate(
      src,
      dst,
      rotateCode,
      callback,
    );
  }

  late final _cv_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_rotate');
  late final _cv_rotate = _cv_rotatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_rowRange(
    Mat self,
    int start,
    int end,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_rowRange(
      self,
      start,
      end,
      rval,
      callback,
    );
  }

  late final _cv_rowRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_rowRange');
  late final _cv_rowRange = _cv_rowRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_scaleAdd(
    Mat src1,
    double alpha,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_scaleAdd(
      src1,
      alpha,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_scaleAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, Mat, Mat, imp1.CvCallback_0)>>('cv_scaleAdd');
  late final _cv_scaleAdd = _cv_scaleAddPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_setIdentity(
    Mat src,
    Scalar scalar,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_setIdentity(
      src,
      scalar,
      callback,
    );
  }

  late final _cv_setIdentityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, imp1.CvCallback_0)>>('cv_setIdentity');
  late final _cv_setIdentity = _cv_setIdentityPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, imp1.CvCallback_0)>();

  void cv_setNumThreads(
    int n,
  ) {
    return _cv_setNumThreads(
      n,
    );
  }

  late final _cv_setNumThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'cv_setNumThreads');
  late final _cv_setNumThreads =
      _cv_setNumThreadsPtr.asFunction<void Function(int)>();

  ffi.Pointer<CvStatus> cv_setRNGSeed(
    int seed,
  ) {
    return _cv_setRNGSeed(
      seed,
    );
  }

  late final _cv_setRNGSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>(
          'cv_setRNGSeed');
  late final _cv_setRNGSeed =
      _cv_setRNGSeedPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  ffi.Pointer<CvStatus> cv_solve(
    Mat src1,
    Mat src2,
    Mat dst,
    int flags,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_solve(
      src1,
      src2,
      dst,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int,
              ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_solve');
  late final _cv_solve = _cv_solvePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_solveCubic(
    Mat coeffs,
    Mat roots,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_solveCubic(
      coeffs,
      roots,
      rval,
      callback,
    );
  }

  late final _cv_solveCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_solveCubic');
  late final _cv_solveCubic = _cv_solveCubicPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_solvePoly(
    Mat coeffs,
    Mat roots,
    int maxIters,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_solvePoly(
      coeffs,
      roots,
      maxIters,
      rval,
      callback,
    );
  }

  late final _cv_solvePolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_solvePoly');
  late final _cv_solvePoly = _cv_solvePolyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sort(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sort(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_sort');
  late final _cv_sort = _cv_sortPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sortIdx(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sortIdx(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_sortIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_sortIdx');
  late final _cv_sortIdx = _cv_sortIdxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_split(
    Mat src,
    ffi.Pointer<VecMat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_split(
      src,
      rval,
      callback,
    );
  }

  late final _cv_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecMat>, imp1.CvCallback_0)>>('cv_split');
  late final _cv_split = _cv_splitPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecMat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sqrt(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sqrt(
      src,
      dst,
      callback,
    );
  }

  late final _cv_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_sqrt');
  late final _cv_sqrt = _cv_sqrtPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_subtract(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_subtract(
      src1,
      src2,
      dst,
      mask,
      dtype,
      callback,
    );
  }

  late final _cv_subtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_subtract');
  late final _cv_subtract = _cv_subtractPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sum(
    Mat src,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sum(
      src,
      rval,
      callback,
    );
  }

  late final _cv_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_sum');
  late final _cv_sum = _cv_sumPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_theRNG(
    imp1.RNGPtr rval,
  ) {
    return _cv_theRNG(
      rval,
    );
  }

  late final _cv_theRNGPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(imp1.RNGPtr)>>(
          'cv_theRNG');
  late final _cv_theRNG =
      _cv_theRNGPtr.asFunction<ffi.Pointer<CvStatus> Function(imp1.RNGPtr)>();

  ffi.Pointer<CvStatus> cv_trace(
    Mat src,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_trace(
      src,
      rval,
      callback,
    );
  }

  late final _cv_tracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_trace');
  late final _cv_trace = _cv_tracePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_transform(
    Mat src,
    Mat dst,
    Mat tm,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_transform(
      src,
      dst,
      tm,
      callback,
    );
  }

  late final _cv_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_transform');
  late final _cv_transform = _cv_transformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_transpose(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_transpose(
      src,
      dst,
      callback,
    );
  }

  late final _cv_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('cv_transpose');
  late final _cv_transpose = _cv_transposePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_transposeND(
    Mat src,
    Mat dst,
    VecI32 order,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_transposeND(
      src,
      dst,
      order,
      callback,
    );
  }

  late final _cv_transposeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, VecI32, imp1.CvCallback_0)>>('cv_transposeND');
  late final _cv_transposeND = _cv_transposeNDPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, VecI32, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_vconcat(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_vconcat(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_vconcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_vconcat');
  late final _cv_vconcat = _cv_vconcatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<ffi.Char> getBuildInfo() {
    return _getBuildInfo();
  }

  late final _getBuildInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getBuildInfo');
  late final _getBuildInfo =
      _getBuildInfoPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> getCvVersion() {
    return _getCvVersion();
  }

  late final _getCvVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getCvVersion');
  late final _getCvVersion =
      _getCvVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<CvStatus> getLogLevel(
    ffi.Pointer<ffi.Int> logLevel,
  ) {
    return _getLogLevel(
      logLevel,
    );
  }

  late final _getLogLevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>>('getLogLevel');
  late final _getLogLevel = _getLogLevelPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>();

  void registerErrorCallback(
    ErrorCallback callback,
  ) {
    return _registerErrorCallback(
      callback,
    );
  }

  late final _registerErrorCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ErrorCallback)>>(
          'registerErrorCallback');
  late final _registerErrorCallback =
      _registerErrorCallbackPtr.asFunction<void Function(ErrorCallback)>();

  ffi.Pointer<CvStatus> setLogLevel(
    int logLevel,
  ) {
    return _setLogLevel(
      logLevel,
    );
  }

  late final _setLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>(
          'setLogLevel');
  late final _setLogLevel =
      _setLogLevelPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeCore _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>
      get CvStatus_close => _library._CvStatus_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>>
      get cv_Mat_close => _library._cv_Mat_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get cv_Mat_closeVoid => _library._cv_Mat_closeVoidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>>
      get cv_RNG_close => _library._cv_RNG_closePtr;
}

typedef CvPoint = imp1.CvPoint;
typedef CvRect = imp1.CvRect;
typedef CvRect2f = imp1.CvRect2f;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;
typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(
    int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    int line,
    ffi.Pointer<ffi.Void> userdata);
typedef Mat = imp1.Mat;
typedef MatStep = imp1.MatStep;
typedef RNG = imp1.RNG;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec2b = imp1.Vec2b;
typedef Vec2d = imp1.Vec2d;
typedef Vec2f = imp1.Vec2f;
typedef Vec2i = imp1.Vec2i;
typedef Vec2s = imp1.Vec2s;
typedef Vec2w = imp1.Vec2w;
typedef Vec3b = imp1.Vec3b;
typedef Vec3d = imp1.Vec3d;
typedef Vec3f = imp1.Vec3f;
typedef Vec3i = imp1.Vec3i;
typedef Vec3s = imp1.Vec3s;
typedef Vec3w = imp1.Vec3w;
typedef Vec4b = imp1.Vec4b;
typedef Vec4d = imp1.Vec4d;
typedef Vec4f = imp1.Vec4f;
typedef Vec4i = imp1.Vec4i;
typedef Vec4s = imp1.Vec4s;
typedef Vec4w = imp1.Vec4w;
typedef Vec6d = imp1.Vec6d;
typedef Vec6f = imp1.Vec6f;
typedef Vec6i = imp1.Vec6i;
typedef Vec8i = imp1.Vec8i;
typedef VecChar = imp1.VecChar;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecPoint3f = imp1.VecPoint3f;
typedef VecPoint3i = imp1.VecPoint3i;
typedef VecUChar = imp1.VecUChar;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
