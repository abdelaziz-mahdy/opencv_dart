// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Core
///
class CvNativeCore {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeCore(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeCore.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void CvStatus_Close(
    ffi.Pointer<CvStatus> self,
  ) {
    return _CvStatus_Close(
      self,
    );
  }

  late final _CvStatus_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>(
          'CvStatus_Close');
  late final _CvStatus_Close =
      _CvStatus_ClosePtr.asFunction<void Function(ffi.Pointer<CvStatus>)>();

  ffi.Pointer<CvStatus> Eye(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
  ) {
    return _Eye(
      rows,
      cols,
      type,
      rval,
    );
  }

  late final _EyePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Eye');
  late final _Eye = _EyePtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> GetCVTickCount(
    ffi.Pointer<ffi.Int64> rval,
  ) {
    return _GetCVTickCount(
      rval,
    );
  }

  late final _GetCVTickCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Int64>)>>('GetCVTickCount');
  late final _GetCVTickCount = _GetCVTickCountPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int64>)>();

  ffi.Pointer<CvStatus> GetNumThreads(
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _GetNumThreads(
      rval,
    );
  }

  late final _GetNumThreadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Int>)>>('GetNumThreads');
  late final _GetNumThreads = _GetNumThreadsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> GetTickFrequency(
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _GetTickFrequency(
      rval,
    );
  }

  late final _GetTickFrequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Double>)>>('GetTickFrequency');
  late final _GetTickFrequency = _GetTickFrequencyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> KMeans(
    Mat data,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _KMeans(
      data,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
      rval,
    );
  }

  late final _KMeansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, TermCriteria,
              ffi.Int, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>>('KMeans');
  late final _KMeans = _KMeansPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, Mat, TermCriteria, int, int, Mat,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> KMeansPoints(
    VecPoint2f pts,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _KMeansPoints(
      pts,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
      rval,
    );
  }

  late final _KMeansPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, Mat, TermCriteria,
              ffi.Int, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>>('KMeansPoints');
  late final _KMeansPoints = _KMeansPointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint2f, int, Mat, TermCriteria, int,
          int, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> LUT(
    Mat src,
    Mat lut,
    Mat dst,
  ) {
    return _LUT(
      src,
      lut,
      dst,
    );
  }

  late final _LUTPtr = _lookup<
      ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>('LUT');
  late final _LUT =
      _LUTPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AbsDiff(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_AbsDiff(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_AbsDiffPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_AbsDiff');
  late final _Mat_AbsDiff = _Mat_AbsDiffPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Add(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    int dtype,
  ) {
    return _Mat_Add(
      src1,
      src2,
      dst,
      mask,
      dtype,
    );
  }

  late final _Mat_AddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int)>>('Mat_Add');
  late final _Mat_Add = _Mat_AddPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AddF64(
    Mat m,
    double val,
  ) {
    return _Mat_AddF64(
      m,
      val,
    );
  }

  late final _Mat_AddF64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'Mat_AddF64');
  late final _Mat_AddF64 =
      _Mat_AddF64Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_AddFloat(
    Mat m,
    double val,
  ) {
    return _Mat_AddFloat(
      m,
      val,
    );
  }

  late final _Mat_AddFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'Mat_AddFloat');
  late final _Mat_AddFloat = _Mat_AddFloatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_AddI16(
    Mat m,
    int val,
  ) {
    return _Mat_AddI16(
      m,
      val,
    );
  }

  late final _Mat_AddI16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'Mat_AddI16');
  late final _Mat_AddI16 =
      _Mat_AddI16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AddI32(
    Mat m,
    int val,
  ) {
    return _Mat_AddI32(
      m,
      val,
    );
  }

  late final _Mat_AddI32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'Mat_AddI32');
  late final _Mat_AddI32 =
      _Mat_AddI32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AddMat(
    Mat m,
    Mat val,
  ) {
    return _Mat_AddMat(
      m,
      val,
    );
  }

  late final _Mat_AddMatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_AddMat');
  late final _Mat_AddMat =
      _Mat_AddMatPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_AddSChar(
    Mat m,
    int val,
  ) {
    return _Mat_AddSChar(
      m,
      val,
    );
  }

  late final _Mat_AddSCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'Mat_AddSChar');
  late final _Mat_AddSChar =
      _Mat_AddSCharPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AddU16(
    Mat m,
    int val,
  ) {
    return _Mat_AddU16(
      m,
      val,
    );
  }

  late final _Mat_AddU16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'Mat_AddU16');
  late final _Mat_AddU16 =
      _Mat_AddU16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AddUChar(
    Mat m,
    int val,
  ) {
    return _Mat_AddUChar(
      m,
      val,
    );
  }

  late final _Mat_AddUCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'Mat_AddUChar');
  late final _Mat_AddUChar =
      _Mat_AddUCharPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AddWeighted(
    Mat src1,
    double alpha,
    Mat src2,
    double beta,
    double gamma,
    Mat dst,
    int dtype,
  ) {
    return _Mat_AddWeighted(
      src1,
      alpha,
      src2,
      beta,
      gamma,
      dst,
      dtype,
    );
  }

  late final _Mat_AddWeightedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, ffi.Double,
              ffi.Double, Mat, ffi.Int)>>('Mat_AddWeighted');
  late final _Mat_AddWeighted = _Mat_AddWeightedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, Mat, double, double, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_AdjustROI(
    Mat m,
    int dtop,
    int dbottom,
    int dleft,
    int dright,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_AdjustROI(
      m,
      dtop,
      dbottom,
      dleft,
      dright,
      rval,
    );
  }

  late final _Mat_AdjustROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<Mat>)>>('Mat_AdjustROI');
  late final _Mat_AdjustROI = _Mat_AdjustROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_BatchDistance(
    Mat src1,
    Mat src2,
    Mat dist,
    int dtype,
    Mat nidx,
    int normType,
    int K,
    Mat mask,
    int update,
    bool crosscheck,
  ) {
    return _Mat_BatchDistance(
      src1,
      src2,
      dist,
      dtype,
      nidx,
      normType,
      K,
      mask,
      update,
      crosscheck,
    );
  }

  late final _Mat_BatchDistancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int,
              ffi.Int, Mat, ffi.Int, ffi.Bool)>>('Mat_BatchDistance');
  late final _Mat_BatchDistance = _Mat_BatchDistancePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, Mat, int, int, Mat, int, bool)>();

  ffi.Pointer<CvStatus> Mat_BitwiseAnd(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_BitwiseAnd(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_BitwiseAndPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_BitwiseAnd');
  late final _Mat_BitwiseAnd = _Mat_BitwiseAndPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseAndWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseAndWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseAndWithMaskPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>>(
      'Mat_BitwiseAndWithMask');
  late final _Mat_BitwiseAndWithMask = _Mat_BitwiseAndWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseNot(
    Mat src1,
    Mat dst,
  ) {
    return _Mat_BitwiseNot(
      src1,
      dst,
    );
  }

  late final _Mat_BitwiseNotPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_BitwiseNot');
  late final _Mat_BitwiseNot =
      _Mat_BitwiseNotPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseNotWithMask(
    Mat src1,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseNotWithMask(
      src1,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseNotWithMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_BitwiseNotWithMask');
  late final _Mat_BitwiseNotWithMask = _Mat_BitwiseNotWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseOr(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_BitwiseOr(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_BitwiseOrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_BitwiseOr');
  late final _Mat_BitwiseOr = _Mat_BitwiseOrPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseOrWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseOrWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseOrWithMaskPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>>(
      'Mat_BitwiseOrWithMask');
  late final _Mat_BitwiseOrWithMask = _Mat_BitwiseOrWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseXor(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_BitwiseXor(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_BitwiseXorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_BitwiseXor');
  late final _Mat_BitwiseXor = _Mat_BitwiseXorPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BitwiseXorWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseXorWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseXorWithMaskPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>>(
      'Mat_BitwiseXorWithMask');
  late final _Mat_BitwiseXorWithMask = _Mat_BitwiseXorWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_BorderInterpolate(
    int p,
    int len,
    int borderType,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Mat_BorderInterpolate(
      p,
      len,
      borderType,
      rval,
    );
  }

  late final _Mat_BorderInterpolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('Mat_BorderInterpolate');
  late final _Mat_BorderInterpolate = _Mat_BorderInterpolatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Mat_CalcCovarMatrix(
    Mat samples,
    Mat covar,
    Mat mean,
    int flags,
    int ctype,
  ) {
    return _Mat_CalcCovarMatrix(
      samples,
      covar,
      mean,
      flags,
      ctype,
    );
  }

  late final _Mat_CalcCovarMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int)>>('Mat_CalcCovarMatrix');
  late final _Mat_CalcCovarMatrix = _Mat_CalcCovarMatrixPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, int)>();

  ffi.Pointer<CvStatus> Mat_CartToPolar(
    Mat x,
    Mat y,
    Mat magnitude,
    Mat angle,
    bool angleInDegrees,
  ) {
    return _Mat_CartToPolar(
      x,
      y,
      magnitude,
      angle,
      angleInDegrees,
    );
  }

  late final _Mat_CartToPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Bool)>>('Mat_CartToPolar');
  late final _Mat_CartToPolar = _Mat_CartToPolarPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, bool)>();

  int Mat_Channels(
    Mat m,
  ) {
    return _Mat_Channels(
      m,
    );
  }

  late final _Mat_ChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Channels');
  late final _Mat_Channels =
      _Mat_ChannelsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_CheckRange(
    Mat m,
    bool quiet,
    ffi.Pointer<CvPoint> pos,
    double minVal,
    double maxVal,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _Mat_CheckRange(
      m,
      quiet,
      pos,
      minVal,
      maxVal,
      rval,
    );
  }

  late final _Mat_CheckRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Bool,
              ffi.Pointer<CvPoint>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Bool>)>>('Mat_CheckRange');
  late final _Mat_CheckRange = _Mat_CheckRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool, ffi.Pointer<CvPoint>, double,
          double, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> Mat_Clone(
    Mat m,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_Clone(
      m,
      rval,
    );
  }

  late final _Mat_ClonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>>('Mat_Clone');
  late final _Mat_Clone = _Mat_ClonePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_Clone_Async(
    Mat self,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_Clone_Async(
      self,
      callback,
    );
  }

  late final _Mat_Clone_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('Mat_Clone_Async');
  late final _Mat_Clone_Async = _Mat_Clone_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  void Mat_Close(
    imp1.MatPtr m,
  ) {
    return _Mat_Close(
      m,
    );
  }

  late final _Mat_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>>('Mat_Close');
  late final _Mat_Close =
      _Mat_ClosePtr.asFunction<void Function(imp1.MatPtr)>();

  void Mat_CloseVoid(
    ffi.Pointer<ffi.Void> m,
  ) {
    return _Mat_CloseVoid(
      m,
    );
  }

  late final _Mat_CloseVoidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Mat_CloseVoid');
  late final _Mat_CloseVoid =
      _Mat_CloseVoidPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CvStatus> Mat_Col(
    Mat m,
    int x,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_Col(
      m,
      x,
      rval,
    );
  }

  late final _Mat_ColPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Pointer<Mat>)>>('Mat_Col');
  late final _Mat_Col = _Mat_ColPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, ffi.Pointer<Mat>)>();

  int Mat_Cols(
    Mat m,
  ) {
    return _Mat_Cols(
      m,
    );
  }

  late final _Mat_ColsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Cols');
  late final _Mat_Cols =
      _Mat_ColsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Compare(
    Mat src1,
    Mat src2,
    Mat dst,
    int ct,
  ) {
    return _Mat_Compare(
      src1,
      src2,
      dst,
      ct,
    );
  }

  late final _Mat_ComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int)>>('Mat_Compare');
  late final _Mat_Compare = _Mat_ComparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_CompleteSymm(
    Mat m,
    bool lowerToUpper,
  ) {
    return _Mat_CompleteSymm(
      m,
      lowerToUpper,
    );
  }

  late final _Mat_CompleteSymmPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool)>>(
      'Mat_CompleteSymm');
  late final _Mat_CompleteSymm = _Mat_CompleteSymmPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool)>();

  ffi.Pointer<CvStatus> Mat_ConvertFp16(
    Mat m,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_ConvertFp16(
      m,
      rval,
    );
  }

  late final _Mat_ConvertFp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>)>>('Mat_ConvertFp16');
  late final _Mat_ConvertFp16 = _Mat_ConvertFp16Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_ConvertScaleAbs(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
  ) {
    return _Mat_ConvertScaleAbs(
      src,
      dst,
      alpha,
      beta,
    );
  }

  late final _Mat_ConvertScaleAbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double)>>('Mat_ConvertScaleAbs');
  late final _Mat_ConvertScaleAbs = _Mat_ConvertScaleAbsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, double)>();

  ffi.Pointer<CvStatus> Mat_ConvertTo(
    Mat m,
    Mat dst,
    int type,
  ) {
    return _Mat_ConvertTo(
      m,
      dst,
      type,
    );
  }

  late final _Mat_ConvertToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Mat_ConvertTo');
  late final _Mat_ConvertTo = _Mat_ConvertToPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_ConvertToWithParams(
    Mat m,
    Mat dst,
    int type,
    double alpha,
    double beta,
  ) {
    return _Mat_ConvertToWithParams(
      m,
      dst,
      type,
      alpha,
      beta,
    );
  }

  late final _Mat_ConvertToWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Float,
              ffi.Float)>>('Mat_ConvertToWithParams');
  late final _Mat_ConvertToWithParams = _Mat_ConvertToWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double)>();

  ffi.Pointer<CvStatus> Mat_ConvertToWithParams_Async(
    Mat self,
    int type,
    double alpha,
    double beta,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_ConvertToWithParams_Async(
      self,
      type,
      alpha,
      beta,
      callback,
    );
  }

  late final _Mat_ConvertToWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Float, ffi.Float,
              imp1.CvCallback_1)>>('Mat_ConvertToWithParams_Async');
  late final _Mat_ConvertToWithParams_Async =
      _Mat_ConvertToWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_ConvertTo_Async(
    Mat self,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_ConvertTo_Async(
      self,
      type,
      callback,
    );
  }

  late final _Mat_ConvertTo_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('Mat_ConvertTo_Async');
  late final _Mat_ConvertTo_Async = _Mat_ConvertTo_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_CopyMakeBorder(
    Mat src,
    Mat dst,
    int top,
    int bottom,
    int left,
    int right,
    int borderType,
    Scalar value,
  ) {
    return _Mat_CopyMakeBorder(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      borderType,
      value,
    );
  }

  late final _Mat_CopyMakeBorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, Scalar)>>('Mat_CopyMakeBorder');
  late final _Mat_CopyMakeBorder = _Mat_CopyMakeBorderPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, int, int, int, Scalar)>();

  ffi.Pointer<CvStatus> Mat_CopyTo(
    Mat m,
    Mat dst,
  ) {
    return _Mat_CopyTo(
      m,
      dst,
    );
  }

  late final _Mat_CopyToPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_CopyTo');
  late final _Mat_CopyTo =
      _Mat_CopyToPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_CopyToWithMask(
    Mat m,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_CopyToWithMask(
      m,
      dst,
      mask,
    );
  }

  late final _Mat_CopyToWithMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_CopyToWithMask');
  late final _Mat_CopyToWithMask = _Mat_CopyToWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_CopyToWithMask_Async(
    Mat self,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_CopyToWithMask_Async(
      self,
      dst,
      mask,
      callback,
    );
  }

  late final _Mat_CopyToWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_0)>>('Mat_CopyToWithMask_Async');
  late final _Mat_CopyToWithMask_Async =
      _Mat_CopyToWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Mat_CopyTo_Async(
    Mat self,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _Mat_CopyTo_Async(
      self,
      dst,
      callback,
    );
  }

  late final _Mat_CopyTo_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_0)>>('Mat_CopyTo_Async');
  late final _Mat_CopyTo_Async = _Mat_CopyTo_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  int Mat_CountNonZero(
    Mat src,
  ) {
    return _Mat_CountNonZero(
      src,
    );
  }

  late final _Mat_CountNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_CountNonZero');
  late final _Mat_CountNonZero =
      _Mat_CountNonZeroPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_DCT(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_DCT(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_DCTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Mat_DCT');
  late final _Mat_DCT =
      _Mat_DCTPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_DFT(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
  ) {
    return _Mat_DFT(
      src,
      dst,
      flags,
      nonzeroRows,
    );
  }

  late final _Mat_DFTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Int)>>('Mat_DFT');
  late final _Mat_DFT = _Mat_DFTPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int)>();

  ffi.Pointer<imp1.uchar> Mat_Data(
    Mat m,
  ) {
    return _Mat_Data(
      m,
    );
  }

  late final _Mat_DataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat)>>(
          'Mat_Data');
  late final _Mat_Data =
      _Mat_DataPtr.asFunction<ffi.Pointer<imp1.uchar> Function(Mat)>(
          isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Determinant(
    Mat m,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Mat_Determinant(
      m,
      rval,
    );
  }

  late final _Mat_DeterminantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<ffi.Double>)>>('Mat_Determinant');
  late final _Mat_Determinant = _Mat_DeterminantPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>)>();

  int Mat_Dims(
    Mat m,
  ) {
    return _Mat_Dims(
      m,
    );
  }

  late final _Mat_DimsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Dims');
  late final _Mat_Dims =
      _Mat_DimsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Divide(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
  ) {
    return _Mat_Divide(
      src1,
      src2,
      dst,
      scale,
      dtype,
    );
  }

  late final _Mat_DividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Double, ffi.Int)>>('Mat_Divide');
  late final _Mat_Divide = _Mat_DividePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, int)>();

  ffi.Pointer<CvStatus> Mat_DivideF64(
    Mat m,
    double val,
  ) {
    return _Mat_DivideF64(
      m,
      val,
    );
  }

  late final _Mat_DivideF64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'Mat_DivideF64');
  late final _Mat_DivideF64 = _Mat_DivideF64Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_DivideFloat(
    Mat m,
    double val,
  ) {
    return _Mat_DivideFloat(
      m,
      val,
    );
  }

  late final _Mat_DivideFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'Mat_DivideFloat');
  late final _Mat_DivideFloat = _Mat_DivideFloatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_DivideI16(
    Mat m,
    int val,
  ) {
    return _Mat_DivideI16(
      m,
      val,
    );
  }

  late final _Mat_DivideI16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'Mat_DivideI16');
  late final _Mat_DivideI16 =
      _Mat_DivideI16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_DivideI32(
    Mat m,
    int val,
  ) {
    return _Mat_DivideI32(
      m,
      val,
    );
  }

  late final _Mat_DivideI32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'Mat_DivideI32');
  late final _Mat_DivideI32 =
      _Mat_DivideI32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_DivideMat(
    Mat m,
    Mat val,
  ) {
    return _Mat_DivideMat(
      m,
      val,
    );
  }

  late final _Mat_DivideMatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_DivideMat');
  late final _Mat_DivideMat =
      _Mat_DivideMatPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_DivideSChar(
    Mat m,
    int val,
  ) {
    return _Mat_DivideSChar(
      m,
      val,
    );
  }

  late final _Mat_DivideSCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'Mat_DivideSChar');
  late final _Mat_DivideSChar = _Mat_DivideSCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_DivideU16(
    Mat m,
    int val,
  ) {
    return _Mat_DivideU16(
      m,
      val,
    );
  }

  late final _Mat_DivideU16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'Mat_DivideU16');
  late final _Mat_DivideU16 =
      _Mat_DivideU16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_DivideUChar(
    Mat m,
    int val,
  ) {
    return _Mat_DivideUChar(
      m,
      val,
    );
  }

  late final _Mat_DivideUCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'Mat_DivideUChar');
  late final _Mat_DivideUChar = _Mat_DivideUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_Eigen(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _Mat_Eigen(
      src,
      eigenvalues,
      eigenvectors,
      rval,
    );
  }

  late final _Mat_EigenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Pointer<ffi.Bool>)>>('Mat_Eigen');
  late final _Mat_Eigen = _Mat_EigenPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> Mat_EigenNonSymmetric(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
  ) {
    return _Mat_EigenNonSymmetric(
      src,
      eigenvalues,
      eigenvectors,
    );
  }

  late final _Mat_EigenNonSymmetricPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_EigenNonSymmetric');
  late final _Mat_EigenNonSymmetric = _Mat_EigenNonSymmetricPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  int Mat_ElemSize(
    Mat m,
  ) {
    return _Mat_ElemSize(
      m,
    );
  }

  late final _Mat_ElemSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('Mat_ElemSize');
  late final _Mat_ElemSize =
      _Mat_ElemSizePtr.asFunction<int Function(Mat)>(isLeaf: true);

  int Mat_ElemSize1(
    Mat m,
  ) {
    return _Mat_ElemSize1(
      m,
    );
  }

  late final _Mat_ElemSize1Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('Mat_ElemSize1');
  late final _Mat_ElemSize1 =
      _Mat_ElemSize1Ptr.asFunction<int Function(Mat)>(isLeaf: true);

  bool Mat_Empty(
    Mat m,
  ) {
    return _Mat_Empty(
      m,
    );
  }

  late final _Mat_EmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('Mat_Empty');
  late final _Mat_Empty = _Mat_EmptyPtr.asFunction<bool Function(Mat)>();

  ffi.Pointer<CvStatus> Mat_Exp(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Exp(
      src,
      dst,
    );
  }

  late final _Mat_ExpPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_Exp');
  late final _Mat_Exp =
      _Mat_ExpPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_ExtractChannel(
    Mat src,
    Mat dst,
    int coi,
  ) {
    return _Mat_ExtractChannel(
      src,
      dst,
      coi,
    );
  }

  late final _Mat_ExtractChannelPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>(
      'Mat_ExtractChannel');
  late final _Mat_ExtractChannel = _Mat_ExtractChannelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_Eye_Async(
    int rows,
    int cols,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_Eye_Async(
      rows,
      cols,
      type,
      callback,
    );
  }

  late final _Mat_Eye_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('Mat_Eye_Async');
  late final _Mat_Eye_Async = _Mat_Eye_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_FindNonZero(
    Mat src,
    Mat idx,
  ) {
    return _Mat_FindNonZero(
      src,
      idx,
    );
  }

  late final _Mat_FindNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_FindNonZero');
  late final _Mat_FindNonZero = _Mat_FindNonZeroPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  int Mat_Flags(
    Mat m,
  ) {
    return _Mat_Flags(
      m,
    );
  }

  late final _Mat_FlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Flags');
  late final _Mat_Flags =
      _Mat_FlagsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Flip(
    Mat src,
    Mat dst,
    int flipCode,
  ) {
    return _Mat_Flip(
      src,
      dst,
      flipCode,
    );
  }

  late final _Mat_FlipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Mat_Flip');
  late final _Mat_Flip =
      _Mat_FlipPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_FromCMat(
    Mat m,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_FromCMat(
      m,
      rval,
    );
  }

  late final _Mat_FromCMatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>)>>('Mat_FromCMat');
  late final _Mat_FromCMat = _Mat_FromCMatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_FromPtr(
    Mat m,
    int rows,
    int cols,
    int type,
    int prows,
    int pcols,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_FromPtr(
      m,
      rows,
      cols,
      type,
      prows,
      pcols,
      rval,
    );
  }

  late final _Mat_FromPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Mat_FromPtr');
  late final _Mat_FromPtr = _Mat_FromPtrPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_FromRange(
    Mat m,
    int rowStart,
    int rowEnd,
    int colStart,
    int colEnd,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_FromRange(
      m,
      rowStart,
      rowEnd,
      colStart,
      colEnd,
      rval,
    );
  }

  late final _Mat_FromRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<Mat>)>>('Mat_FromRange');
  late final _Mat_FromRange = _Mat_FromRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_Gemm(
    Mat src1,
    Mat src2,
    double alpha,
    Mat src3,
    double beta,
    Mat dst,
    int flags,
  ) {
    return _Mat_Gemm(
      src1,
      src2,
      alpha,
      src3,
      beta,
      dst,
      flags,
    );
  }

  late final _Mat_GemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat, ffi.Double,
              Mat, ffi.Int)>>('Mat_Gemm');
  late final _Mat_Gemm = _Mat_GemmPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, Mat, double, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_GetDouble(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Mat_GetDouble(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('Mat_GetDouble');
  late final _Mat_GetDouble = _Mat_GetDoublePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Double>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetDouble3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Mat_GetDouble3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetDouble3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('Mat_GetDouble3');
  late final _Mat_GetDouble3 = _Mat_GetDouble3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Double>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetFloat(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _Mat_GetFloat(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>>('Mat_GetFloat');
  late final _Mat_GetFloat = _Mat_GetFloatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetFloat3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _Mat_GetFloat3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Float>)>>('Mat_GetFloat3');
  late final _Mat_GetFloat3 = _Mat_GetFloat3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetInt(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Int32> rval,
  ) {
    return _Mat_GetInt(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>>('Mat_GetInt');
  late final _Mat_GetInt = _Mat_GetIntPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Int32>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetInt3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Int32> rval,
  ) {
    return _Mat_GetInt3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int32>)>>('Mat_GetInt3');
  late final _Mat_GetInt3 = _Mat_GetInt3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Int32>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetOptimalDFTSize(
    int vecsize,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Mat_GetOptimalDFTSize(
      vecsize,
      rval,
    );
  }

  late final _Mat_GetOptimalDFTSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Pointer<ffi.Int>)>>('Mat_GetOptimalDFTSize');
  late final _Mat_GetOptimalDFTSize = _Mat_GetOptimalDFTSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, ffi.Pointer<ffi.Int>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetSChar(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Int8> rval,
  ) {
    return _Mat_GetSChar(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetSCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>>('Mat_GetSChar');
  late final _Mat_GetSChar = _Mat_GetSCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Int8>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetSChar3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Int8> rval,
  ) {
    return _Mat_GetSChar3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetSChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int8>)>>('Mat_GetSChar3');
  late final _Mat_GetSChar3 = _Mat_GetSChar3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Int8>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetShort(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Int16> rval,
  ) {
    return _Mat_GetShort(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetShortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>>('Mat_GetShort');
  late final _Mat_GetShort = _Mat_GetShortPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Int16>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetShort3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Int16> rval,
  ) {
    return _Mat_GetShort3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetShort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int16>)>>('Mat_GetShort3');
  late final _Mat_GetShort3 = _Mat_GetShort3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Int16>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetUChar(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Uint8> rval,
  ) {
    return _Mat_GetUChar(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetUCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>>('Mat_GetUChar');
  late final _Mat_GetUChar = _Mat_GetUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Uint8>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetUChar3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Uint8> rval,
  ) {
    return _Mat_GetUChar3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetUChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('Mat_GetUChar3');
  late final _Mat_GetUChar3 = _Mat_GetUChar3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Uint8>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetUShort(
    Mat m,
    int row,
    int col,
    ffi.Pointer<ffi.Uint16> rval,
  ) {
    return _Mat_GetUShort(
      m,
      row,
      col,
      rval,
    );
  }

  late final _Mat_GetUShortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Uint16>)>>('Mat_GetUShort');
  late final _Mat_GetUShort = _Mat_GetUShortPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, ffi.Pointer<ffi.Uint16>)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_GetUShort3(
    Mat m,
    int x,
    int y,
    int z,
    ffi.Pointer<ffi.Uint16> rval,
  ) {
    return _Mat_GetUShort3(
      m,
      x,
      y,
      z,
      rval,
    );
  }

  late final _Mat_GetUShort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Uint16>)>>('Mat_GetUShort3');
  late final _Mat_GetUShort3 = _Mat_GetUShort3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, ffi.Pointer<ffi.Uint16>)>(isLeaf: true);

  ffi.Pointer<Vec2b> Mat_GetVec2b(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec2b(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec2bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec2b> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec2b');
  late final _Mat_GetVec2b =
      _Mat_GetVec2bPtr.asFunction<ffi.Pointer<Vec2b> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec2d> Mat_GetVec2d(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec2d(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec2d> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec2d');
  late final _Mat_GetVec2d =
      _Mat_GetVec2dPtr.asFunction<ffi.Pointer<Vec2d> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec2f> Mat_GetVec2f(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec2f(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec2f> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec2f');
  late final _Mat_GetVec2f =
      _Mat_GetVec2fPtr.asFunction<ffi.Pointer<Vec2f> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec2i> Mat_GetVec2i(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec2i(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec2i> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec2i');
  late final _Mat_GetVec2i =
      _Mat_GetVec2iPtr.asFunction<ffi.Pointer<Vec2i> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec2s> Mat_GetVec2s(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec2s(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec2sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec2s> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec2s');
  late final _Mat_GetVec2s =
      _Mat_GetVec2sPtr.asFunction<ffi.Pointer<Vec2s> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec2w> Mat_GetVec2w(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec2w(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec2wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec2w> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec2w');
  late final _Mat_GetVec2w =
      _Mat_GetVec2wPtr.asFunction<ffi.Pointer<Vec2w> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec3b> Mat_GetVec3b(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec3b(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec3bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec3b> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec3b');
  late final _Mat_GetVec3b =
      _Mat_GetVec3bPtr.asFunction<ffi.Pointer<Vec3b> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec3d> Mat_GetVec3d(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec3d(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec3d> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec3d');
  late final _Mat_GetVec3d =
      _Mat_GetVec3dPtr.asFunction<ffi.Pointer<Vec3d> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec3f> Mat_GetVec3f(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec3f(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec3f> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec3f');
  late final _Mat_GetVec3f =
      _Mat_GetVec3fPtr.asFunction<ffi.Pointer<Vec3f> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec3i> Mat_GetVec3i(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec3i(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec3iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec3i> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec3i');
  late final _Mat_GetVec3i =
      _Mat_GetVec3iPtr.asFunction<ffi.Pointer<Vec3i> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec3s> Mat_GetVec3s(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec3s(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec3sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec3s> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec3s');
  late final _Mat_GetVec3s =
      _Mat_GetVec3sPtr.asFunction<ffi.Pointer<Vec3s> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec3w> Mat_GetVec3w(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec3w(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec3wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec3w> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec3w');
  late final _Mat_GetVec3w =
      _Mat_GetVec3wPtr.asFunction<ffi.Pointer<Vec3w> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec4b> Mat_GetVec4b(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec4b(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec4bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec4b> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec4b');
  late final _Mat_GetVec4b =
      _Mat_GetVec4bPtr.asFunction<ffi.Pointer<Vec4b> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec4d> Mat_GetVec4d(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec4d(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec4d> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec4d');
  late final _Mat_GetVec4d =
      _Mat_GetVec4dPtr.asFunction<ffi.Pointer<Vec4d> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec4f> Mat_GetVec4f(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec4f(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec4f> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec4f');
  late final _Mat_GetVec4f =
      _Mat_GetVec4fPtr.asFunction<ffi.Pointer<Vec4f> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec4i> Mat_GetVec4i(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec4i(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec4iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec4i> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec4i');
  late final _Mat_GetVec4i =
      _Mat_GetVec4iPtr.asFunction<ffi.Pointer<Vec4i> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec4s> Mat_GetVec4s(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec4s(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec4sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec4s> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec4s');
  late final _Mat_GetVec4s =
      _Mat_GetVec4sPtr.asFunction<ffi.Pointer<Vec4s> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec4w> Mat_GetVec4w(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec4w(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec4wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec4w> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec4w');
  late final _Mat_GetVec4w =
      _Mat_GetVec4wPtr.asFunction<ffi.Pointer<Vec4w> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec6d> Mat_GetVec6d(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec6d(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec6dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec6d> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec6d');
  late final _Mat_GetVec6d =
      _Mat_GetVec6dPtr.asFunction<ffi.Pointer<Vec6d> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec6f> Mat_GetVec6f(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec6f(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec6fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec6f> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec6f');
  late final _Mat_GetVec6f =
      _Mat_GetVec6fPtr.asFunction<ffi.Pointer<Vec6f> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec6i> Mat_GetVec6i(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec6i(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec6iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec6i> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec6i');
  late final _Mat_GetVec6i =
      _Mat_GetVec6iPtr.asFunction<ffi.Pointer<Vec6i> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<Vec8i> Mat_GetVec8i(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetVec8i(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetVec8iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Vec8i> Function(Mat, ffi.Int, ffi.Int)>>('Mat_GetVec8i');
  late final _Mat_GetVec8i =
      _Mat_GetVec8iPtr.asFunction<ffi.Pointer<Vec8i> Function(Mat, int, int)>(
          isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Hconcat(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Hconcat(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_HconcatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_Hconcat');
  late final _Mat_Hconcat = _Mat_HconcatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Idct(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_Idct(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_IdctPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Mat_Idct');
  late final _Mat_Idct =
      _Mat_IdctPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_Idft(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
  ) {
    return _Mat_Idft(
      src,
      dst,
      flags,
      nonzeroRows,
    );
  }

  late final _Mat_IdftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Int)>>('Mat_Idft');
  late final _Mat_Idft = _Mat_IdftPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int)>();

  ffi.Pointer<CvStatus> Mat_InRange(
    Mat src,
    Mat lowerb,
    Mat upperb,
    Mat dst,
  ) {
    return _Mat_InRange(
      src,
      lowerb,
      upperb,
      dst,
    );
  }

  late final _Mat_InRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>>('Mat_InRange');
  late final _Mat_InRange = _Mat_InRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_InRangeWithScalar(
    Mat src,
    Scalar lowerb,
    Scalar upperb,
    Mat dst,
  ) {
    return _Mat_InRangeWithScalar(
      src,
      lowerb,
      upperb,
      dst,
    );
  }

  late final _Mat_InRangeWithScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, Mat)>>('Mat_InRangeWithScalar');
  late final _Mat_InRangeWithScalar = _Mat_InRangeWithScalarPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, Mat)>();

  ffi.Pointer<CvStatus> Mat_InsertChannel(
    Mat src,
    Mat dst,
    int coi,
  ) {
    return _Mat_InsertChannel(
      src,
      dst,
      coi,
    );
  }

  late final _Mat_InsertChannelPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>(
      'Mat_InsertChannel');
  late final _Mat_InsertChannel = _Mat_InsertChannelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_Invert(
    Mat src,
    Mat dst,
    int flags,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Mat_Invert(
      src,
      dst,
      flags,
      rval,
    );
  }

  late final _Mat_InvertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>>('Mat_Invert');
  late final _Mat_Invert = _Mat_InvertPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, ffi.Pointer<ffi.Double>)>();

  bool Mat_IsContinuous(
    Mat m,
  ) {
    return _Mat_IsContinuous(
      m,
    );
  }

  late final _Mat_IsContinuousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('Mat_IsContinuous');
  late final _Mat_IsContinuous =
      _Mat_IsContinuousPtr.asFunction<bool Function(Mat)>(isLeaf: true);

  bool Mat_IsSubmatrix(
    Mat m,
  ) {
    return _Mat_IsSubmatrix(
      m,
    );
  }

  late final _Mat_IsSubmatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('Mat_IsSubmatrix');
  late final _Mat_IsSubmatrix =
      _Mat_IsSubmatrixPtr.asFunction<bool Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_LocateROI(
    Mat m,
    ffi.Pointer<CvSize> wholeSize,
    ffi.Pointer<CvPoint> ofs,
  ) {
    return _Mat_LocateROI(
      m,
      wholeSize,
      ofs,
    );
  }

  late final _Mat_LocateROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<CvSize>,
              ffi.Pointer<CvPoint>)>>('Mat_LocateROI');
  late final _Mat_LocateROI = _Mat_LocateROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<CvSize>, ffi.Pointer<CvPoint>)>();

  ffi.Pointer<CvStatus> Mat_Log(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Log(
      src,
      dst,
    );
  }

  late final _Mat_LogPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_Log');
  late final _Mat_Log =
      _Mat_LogPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Magnitude(
    Mat x,
    Mat y,
    Mat magnitude,
  ) {
    return _Mat_Magnitude(
      x,
      y,
      magnitude,
    );
  }

  late final _Mat_MagnitudePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_Magnitude');
  late final _Mat_Magnitude = _Mat_MagnitudePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Max(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Max(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_MaxPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_Max');
  late final _Mat_Max =
      _Mat_MaxPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Mean(
    Mat m,
    ffi.Pointer<Scalar> rval,
  ) {
    return _Mat_Mean(
      m,
      rval,
    );
  }

  late final _Mat_MeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>)>>('Mat_Mean');
  late final _Mat_Mean = _Mat_MeanPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> Mat_MeanStdDev(
    Mat src,
    ffi.Pointer<Scalar> dstMean,
    ffi.Pointer<Scalar> dstStdDev,
  ) {
    return _Mat_MeanStdDev(
      src,
      dstMean,
      dstStdDev,
    );
  }

  late final _Mat_MeanStdDevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>,
              ffi.Pointer<Scalar>)>>('Mat_MeanStdDev');
  late final _Mat_MeanStdDev = _Mat_MeanStdDevPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> Mat_MeanStdDevWithMask(
    Mat src,
    ffi.Pointer<Scalar> dstMean,
    ffi.Pointer<Scalar> dstStdDev,
    Mat mask,
  ) {
    return _Mat_MeanStdDevWithMask(
      src,
      dstMean,
      dstStdDev,
      mask,
    );
  }

  late final _Mat_MeanStdDevWithMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>,
              ffi.Pointer<Scalar>, Mat)>>('Mat_MeanStdDevWithMask');
  late final _Mat_MeanStdDevWithMask = _Mat_MeanStdDevWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, Mat)>();

  ffi.Pointer<CvStatus> Mat_MeanWithMask(
    Mat m,
    Mat mask,
    ffi.Pointer<Scalar> rval,
  ) {
    return _Mat_MeanWithMask(
      m,
      mask,
      rval,
    );
  }

  late final _Mat_MeanWithMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<Scalar>)>>('Mat_MeanWithMask');
  late final _Mat_MeanWithMask = _Mat_MeanWithMaskPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> Mat_Merge(
    VecMat mats,
    ffi.Pointer<Mat> dst,
  ) {
    return _Mat_Merge(
      mats,
      dst,
    );
  }

  late final _Mat_MergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, ffi.Pointer<Mat>)>>('Mat_Merge');
  late final _Mat_Merge = _Mat_MergePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecMat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_Min(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Min(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_MinPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_Min');
  late final _Mat_Min =
      _Mat_MinPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_MinMaxIdx(
    Mat m,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<ffi.Int> minIdx,
    ffi.Pointer<ffi.Int> maxIdx,
  ) {
    return _Mat_MinMaxIdx(
      m,
      minVal,
      maxVal,
      minIdx,
      maxIdx,
    );
  }

  late final _Mat_MinMaxIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('Mat_MinMaxIdx');
  late final _Mat_MinMaxIdx = _Mat_MinMaxIdxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Mat_MinMaxLoc(
    Mat m,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<CvPoint> minLoc,
    ffi.Pointer<CvPoint> maxLoc,
  ) {
    return _Mat_MinMaxLoc(
      m,
      minVal,
      maxVal,
      minLoc,
      maxLoc,
    );
  }

  late final _Mat_MinMaxLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<CvPoint>,
              ffi.Pointer<CvPoint>)>>('Mat_MinMaxLoc');
  late final _Mat_MinMaxLoc = _Mat_MinMaxLocPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<CvPoint>,
          ffi.Pointer<CvPoint>)>();

  ffi.Pointer<CvStatus> Mat_MixChannels(
    VecMat src,
    VecMat dst,
    VecI32 fromTo,
  ) {
    return _Mat_MixChannels(
      src,
      dst,
      fromTo,
    );
  }

  late final _Mat_MixChannelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, VecMat, VecI32)>>('Mat_MixChannels');
  late final _Mat_MixChannels = _Mat_MixChannelsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecI32)>();

  ffi.Pointer<CvStatus> Mat_Mul(
    Mat m,
    Mat val,
    ffi.Pointer<Mat> dst,
    double scale,
  ) {
    return _Mat_Mul(
      m,
      val,
      dst,
      scale,
    );
  }

  late final _Mat_MulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<Mat>, ffi.Double)>>('Mat_Mul');
  late final _Mat_Mul = _Mat_MulPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>, double)>();

  ffi.Pointer<CvStatus> Mat_MulSpectrums(
    Mat a,
    Mat b,
    Mat c,
    int flags,
    bool conjB,
  ) {
    return _Mat_MulSpectrums(
      a,
      b,
      c,
      flags,
      conjB,
    );
  }

  late final _Mat_MulSpectrumsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Bool)>>('Mat_MulSpectrums');
  late final _Mat_MulSpectrums = _Mat_MulSpectrumsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, bool)>();

  ffi.Pointer<CvStatus> Mat_Multiply(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
  ) {
    return _Mat_Multiply(
      src1,
      src2,
      dst,
      scale,
      dtype,
    );
  }

  late final _Mat_MultiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Double, ffi.Int)>>('Mat_Multiply');
  late final _Mat_Multiply = _Mat_MultiplyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, int)>();

  ffi.Pointer<CvStatus> Mat_MultiplyF64(
    Mat m,
    double val,
  ) {
    return _Mat_MultiplyF64(
      m,
      val,
    );
  }

  late final _Mat_MultiplyF64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'Mat_MultiplyF64');
  late final _Mat_MultiplyF64 = _Mat_MultiplyF64Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_MultiplyFloat(
    Mat m,
    double val,
  ) {
    return _Mat_MultiplyFloat(
      m,
      val,
    );
  }

  late final _Mat_MultiplyFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'Mat_MultiplyFloat');
  late final _Mat_MultiplyFloat = _Mat_MultiplyFloatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_MultiplyI16(
    Mat m,
    int val,
  ) {
    return _Mat_MultiplyI16(
      m,
      val,
    );
  }

  late final _Mat_MultiplyI16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'Mat_MultiplyI16');
  late final _Mat_MultiplyI16 = _Mat_MultiplyI16Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_MultiplyI32(
    Mat m,
    int val,
  ) {
    return _Mat_MultiplyI32(
      m,
      val,
    );
  }

  late final _Mat_MultiplyI32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'Mat_MultiplyI32');
  late final _Mat_MultiplyI32 = _Mat_MultiplyI32Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_MultiplyMat(
    Mat m,
    Mat val,
  ) {
    return _Mat_MultiplyMat(
      m,
      val,
    );
  }

  late final _Mat_MultiplyMatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_MultiplyMat');
  late final _Mat_MultiplyMat = _Mat_MultiplyMatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_MultiplyMatrix(
    Mat x,
    Mat y,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_MultiplyMatrix(
      x,
      y,
      rval,
    );
  }

  late final _Mat_MultiplyMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<Mat>)>>('Mat_MultiplyMatrix');
  late final _Mat_MultiplyMatrix = _Mat_MultiplyMatrixPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_MultiplySChar(
    Mat m,
    int val,
  ) {
    return _Mat_MultiplySChar(
      m,
      val,
    );
  }

  late final _Mat_MultiplySCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'Mat_MultiplySChar');
  late final _Mat_MultiplySChar = _Mat_MultiplySCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_MultiplyU16(
    Mat m,
    int val,
  ) {
    return _Mat_MultiplyU16(
      m,
      val,
    );
  }

  late final _Mat_MultiplyU16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'Mat_MultiplyU16');
  late final _Mat_MultiplyU16 = _Mat_MultiplyU16Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_MultiplyUChar(
    Mat m,
    int val,
  ) {
    return _Mat_MultiplyUChar(
      m,
      val,
    );
  }

  late final _Mat_MultiplyUCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'Mat_MultiplyUChar');
  late final _Mat_MultiplyUChar = _Mat_MultiplyUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  /// @brief Create empty Mat
  ///
  /// ALL return values with a type of `Pointer of Struct`,
  /// e.g., Mat, the internal pointer (Mat.ptr) MUST be NULL
  /// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
  /// Mat* mat = (Mat*)malloc(sizeof(Mat));
  /// CvStatus *status = Mat_New(mat);
  /// Mat_Close(mat);
  ///
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> Mat_New(
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_New(
      rval,
    );
  }

  late final _Mat_NewPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>>(
      'Mat_New');
  late final _Mat_New = _Mat_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromBytes(
    int rows,
    int cols,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewFromBytes(
      rows,
      cols,
      type,
      buf,
      rval,
    );
  }

  late final _Mat_NewFromBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>)>>('Mat_NewFromBytes');
  late final _Mat_NewFromBytes = _Mat_NewFromBytesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromBytes_Async(
    int rows,
    int cols,
    int type,
    ffi.Pointer<ffi.Void> buf,
    int step,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewFromBytes_Async(
      rows,
      cols,
      type,
      buf,
      step,
      callback,
    );
  }

  late final _Mat_NewFromBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              imp1.CvCallback_1)>>('Mat_NewFromBytes_Async');
  late final _Mat_NewFromBytes_Async = _Mat_NewFromBytes_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<ffi.Void>, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewFromScalar(
    Scalar ar,
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewFromScalar(
      ar,
      rows,
      cols,
      type,
      rval,
    );
  }

  late final _Mat_NewFromScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Scalar, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>)>>('Mat_NewFromScalar');
  late final _Mat_NewFromScalar = _Mat_NewFromScalarPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Scalar, int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromScalar_Async(
    Scalar s,
    int rows,
    int cols,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewFromScalar_Async(
      s,
      rows,
      cols,
      type,
      callback,
    );
  }

  late final _Mat_NewFromScalar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Scalar, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('Mat_NewFromScalar_Async');
  late final _Mat_NewFromScalar_Async = _Mat_NewFromScalar_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Scalar, int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint(
    VecPoint vec,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewFromVecPoint(
      vec,
      rval,
    );
  }

  late final _Mat_NewFromVecPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<Mat>)>>('Mat_NewFromVecPoint');
  late final _Mat_NewFromVecPoint = _Mat_NewFromVecPointPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint2f(
    VecPoint2f vec,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewFromVecPoint2f(
      vec,
      rval,
    );
  }

  late final _Mat_NewFromVecPoint2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, ffi.Pointer<Mat>)>>('Mat_NewFromVecPoint2f');
  late final _Mat_NewFromVecPoint2f = _Mat_NewFromVecPoint2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint2f_Async(
    VecPoint2f vec,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewFromVecPoint2f_Async(
      vec,
      callback,
    );
  }

  late final _Mat_NewFromVecPoint2f_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, imp1.CvCallback_1)>>('Mat_NewFromVecPoint2f_Async');
  late final _Mat_NewFromVecPoint2f_Async =
      _Mat_NewFromVecPoint2f_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint3f(
    VecPoint3f vec,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewFromVecPoint3f(
      vec,
      rval,
    );
  }

  late final _Mat_NewFromVecPoint3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint3f, ffi.Pointer<Mat>)>>('Mat_NewFromVecPoint3f');
  late final _Mat_NewFromVecPoint3f = _Mat_NewFromVecPoint3fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint3f_Async(
    VecPoint3f vec,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewFromVecPoint3f_Async(
      vec,
      callback,
    );
  }

  late final _Mat_NewFromVecPoint3f_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint3f, imp1.CvCallback_1)>>('Mat_NewFromVecPoint3f_Async');
  late final _Mat_NewFromVecPoint3f_Async =
      _Mat_NewFromVecPoint3f_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecPoint3f, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint3i(
    VecPoint3i vec,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewFromVecPoint3i(
      vec,
      rval,
    );
  }

  late final _Mat_NewFromVecPoint3iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint3i, ffi.Pointer<Mat>)>>('Mat_NewFromVecPoint3i');
  late final _Mat_NewFromVecPoint3i = _Mat_NewFromVecPoint3iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint3i, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewFromVecPoint_Async(
    VecPoint vec,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewFromVecPoint_Async(
      vec,
      callback,
    );
  }

  late final _Mat_NewFromVecPoint_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, imp1.CvCallback_1)>>('Mat_NewFromVecPoint_Async');
  late final _Mat_NewFromVecPoint_Async =
      _Mat_NewFromVecPoint_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewWithSize(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewWithSize(
      rows,
      cols,
      type,
      rval,
    );
  }

  late final _Mat_NewWithSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Mat_NewWithSize');
  late final _Mat_NewWithSize = _Mat_NewWithSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewWithSize_Async(
    int rows,
    int cols,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewWithSize_Async(
      rows,
      cols,
      type,
      callback,
    );
  }

  late final _Mat_NewWithSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('Mat_NewWithSize_Async');
  late final _Mat_NewWithSize_Async = _Mat_NewWithSize_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewWithSizes(
    VecI32 sizes,
    int type,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewWithSizes(
      sizes,
      type,
      rval,
    );
  }

  late final _Mat_NewWithSizesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, ffi.Int, ffi.Pointer<Mat>)>>('Mat_NewWithSizes');
  late final _Mat_NewWithSizes = _Mat_NewWithSizesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecI32, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewWithSizesFromBytes(
    VecI32 sizes,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewWithSizesFromBytes(
      sizes,
      type,
      buf,
      rval,
    );
  }

  late final _Mat_NewWithSizesFromBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<Mat>)>>('Mat_NewWithSizesFromBytes');
  late final _Mat_NewWithSizesFromBytes =
      _Mat_NewWithSizesFromBytesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewWithSizesFromBytes_Async(
    VecI32 sizes,
    int type,
    VecChar buf,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewWithSizesFromBytes_Async(
      sizes,
      type,
      buf,
      callback,
    );
  }

  late final _Mat_NewWithSizesFromBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, VecChar,
              imp1.CvCallback_1)>>('Mat_NewWithSizesFromBytes_Async');
  late final _Mat_NewWithSizesFromBytes_Async =
      _Mat_NewWithSizesFromBytes_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, int, VecChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewWithSizesFromScalar(
    VecI32 sizes,
    int type,
    Scalar ar,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_NewWithSizesFromScalar(
      sizes,
      type,
      ar,
      rval,
    );
  }

  late final _Mat_NewWithSizesFromScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, Scalar,
              ffi.Pointer<Mat>)>>('Mat_NewWithSizesFromScalar');
  late final _Mat_NewWithSizesFromScalar =
      _Mat_NewWithSizesFromScalarPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, int, Scalar, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_NewWithSizesScalar_Async(
    VecI32 sizes,
    int type,
    Scalar s,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewWithSizesScalar_Async(
      sizes,
      type,
      s,
      callback,
    );
  }

  late final _Mat_NewWithSizesScalar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, Scalar,
              imp1.CvCallback_1)>>('Mat_NewWithSizesScalar_Async');
  late final _Mat_NewWithSizesScalar_Async =
      _Mat_NewWithSizesScalar_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_NewWithSizes_Async(
    VecI32 sizes,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_NewWithSizes_Async(
      sizes,
      type,
      callback,
    );
  }

  late final _Mat_NewWithSizes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, ffi.Int, imp1.CvCallback_1)>>('Mat_NewWithSizes_Async');
  late final _Mat_NewWithSizes_Async = _Mat_NewWithSizes_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecI32, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_New_Async(
      callback,
    );
  }

  late final _Mat_New_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>('Mat_New_Async');
  late final _Mat_New_Async = _Mat_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_Normalize(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    int typ,
    int dtype,
    Mat mask,
  ) {
    return _Mat_Normalize(
      src,
      dst,
      alpha,
      beta,
      typ,
      dtype,
      mask,
    );
  }

  late final _Mat_NormalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double,
              ffi.Int, ffi.Int, Mat)>>('Mat_Normalize');
  late final _Mat_Normalize = _Mat_NormalizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, int, Mat)>();

  ffi.Pointer<CvStatus> Mat_Ones_Async(
    int rows,
    int cols,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_Ones_Async(
      rows,
      cols,
      type,
      callback,
    );
  }

  late final _Mat_Ones_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('Mat_Ones_Async');
  late final _Mat_Ones_Async = _Mat_Ones_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_PCACompute(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    Mat eigenvalues,
    int maxComponents,
  ) {
    return _Mat_PCACompute(
      src,
      mean,
      eigenvectors,
      eigenvalues,
      maxComponents,
    );
  }

  late final _Mat_PCAComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int)>>('Mat_PCACompute');
  late final _Mat_PCACompute = _Mat_PCAComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_PatchNaNs(
    Mat m,
    double val,
  ) {
    return _Mat_PatchNaNs(
      m,
      val,
    );
  }

  late final _Mat_PatchNaNsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double)>>(
      'Mat_PatchNaNs');
  late final _Mat_PatchNaNs = _Mat_PatchNaNsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_PerspectiveTransform(
    Mat src,
    Mat dst,
    Mat tm,
  ) {
    return _Mat_PerspectiveTransform(
      src,
      dst,
      tm,
    );
  }

  late final _Mat_PerspectiveTransformPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_PerspectiveTransform');
  late final _Mat_PerspectiveTransform = _Mat_PerspectiveTransformPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Phase(
    Mat x,
    Mat y,
    Mat angle,
    bool angleInDegrees,
  ) {
    return _Mat_Phase(
      x,
      y,
      angle,
      angleInDegrees,
    );
  }

  late final _Mat_PhasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Bool)>>('Mat_Phase');
  late final _Mat_Phase = _Mat_PhasePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, bool)>();

  ffi.Pointer<CvStatus> Mat_PolarToCart(
    Mat magnitude,
    Mat degree,
    Mat x,
    Mat y,
    bool angleInDegrees,
  ) {
    return _Mat_PolarToCart(
      magnitude,
      degree,
      x,
      y,
      angleInDegrees,
    );
  }

  late final _Mat_PolarToCartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Bool)>>('Mat_PolarToCart');
  late final _Mat_PolarToCart = _Mat_PolarToCartPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, bool)>();

  ffi.Pointer<CvStatus> Mat_Pow(
    Mat src,
    double power,
    Mat dst,
  ) {
    return _Mat_Pow(
      src,
      power,
      dst,
    );
  }

  late final _Mat_PowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat)>>('Mat_Pow');
  late final _Mat_Pow = _Mat_PowPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, Mat)>();

  ffi.Pointer<imp1.uchar> Mat_Ptr_u8_1(
    Mat m,
    int i,
  ) {
    return _Mat_Ptr_u8_1(
      m,
      i,
    );
  }

  late final _Mat_Ptr_u8_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat, ffi.Int)>>(
      'Mat_Ptr_u8_1');
  late final _Mat_Ptr_u8_1 =
      _Mat_Ptr_u8_1Ptr.asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int)>();

  ffi.Pointer<imp1.uchar> Mat_Ptr_u8_2(
    Mat m,
    int i,
    int j,
  ) {
    return _Mat_Ptr_u8_2(
      m,
      i,
      j,
    );
  }

  late final _Mat_Ptr_u8_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp1.uchar> Function(
              Mat, ffi.Int, ffi.Int)>>('Mat_Ptr_u8_2');
  late final _Mat_Ptr_u8_2 = _Mat_Ptr_u8_2Ptr.asFunction<
      ffi.Pointer<imp1.uchar> Function(Mat, int, int)>();

  ffi.Pointer<imp1.uchar> Mat_Ptr_u8_3(
    Mat m,
    int i,
    int j,
    int k,
  ) {
    return _Mat_Ptr_u8_3(
      m,
      i,
      j,
      k,
    );
  }

  late final _Mat_Ptr_u8_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp1.uchar> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_Ptr_u8_3');
  late final _Mat_Ptr_u8_3 = _Mat_Ptr_u8_3Ptr.asFunction<
      ffi.Pointer<imp1.uchar> Function(Mat, int, int, int)>();

  ffi.Pointer<CvStatus> Mat_Reduce(
    Mat src,
    Mat dst,
    int dim,
    int rType,
    int dType,
  ) {
    return _Mat_Reduce(
      src,
      dst,
      dim,
      rType,
      dType,
    );
  }

  late final _Mat_ReducePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_Reduce');
  late final _Mat_Reduce = _Mat_ReducePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, int)>();

  ffi.Pointer<CvStatus> Mat_ReduceArgMax(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
  ) {
    return _Mat_ReduceArgMax(
      src,
      dst,
      axis,
      lastIndex,
    );
  }

  late final _Mat_ReduceArgMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Bool)>>('Mat_ReduceArgMax');
  late final _Mat_ReduceArgMax = _Mat_ReduceArgMaxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool)>();

  ffi.Pointer<CvStatus> Mat_ReduceArgMin(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
  ) {
    return _Mat_ReduceArgMin(
      src,
      dst,
      axis,
      lastIndex,
    );
  }

  late final _Mat_ReduceArgMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Bool)>>('Mat_ReduceArgMin');
  late final _Mat_ReduceArgMin = _Mat_ReduceArgMinPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool)>();

  ffi.Pointer<CvStatus> Mat_Region(
    Mat m,
    CvRect r,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_Region(
      m,
      r,
      rval,
    );
  }

  late final _Mat_RegionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvRect, ffi.Pointer<Mat>)>>('Mat_Region');
  late final _Mat_Region = _Mat_RegionPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvRect, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_Region_Async(
    Mat self,
    CvRect r,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_Region_Async(
      self,
      r,
      callback,
    );
  }

  late final _Mat_Region_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvRect, imp1.CvCallback_1)>>('Mat_Region_Async');
  late final _Mat_Region_Async = _Mat_Region_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvRect, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_Release(
    ffi.Pointer<Mat> m,
  ) {
    return _Mat_Release(
      m,
    );
  }

  late final _Mat_ReleasePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>>(
      'Mat_Release');
  late final _Mat_Release = _Mat_ReleasePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_Repeat(
    Mat src,
    int nY,
    int nX,
    Mat dst,
  ) {
    return _Mat_Repeat(
      src,
      nY,
      nX,
      dst,
    );
  }

  late final _Mat_RepeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Mat)>>('Mat_Repeat');
  late final _Mat_Repeat = _Mat_RepeatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Mat)>();

  ffi.Pointer<CvStatus> Mat_Reshape(
    Mat m,
    int cn,
    int rows,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_Reshape(
      m,
      cn,
      rows,
      rval,
    );
  }

  late final _Mat_ReshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Mat_Reshape');
  late final _Mat_Reshape = _Mat_ReshapePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_ReshapeByVec(
    Mat m,
    int cn,
    VecI32 newshape,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_ReshapeByVec(
      m,
      cn,
      newshape,
      rval,
    );
  }

  late final _Mat_ReshapeByVecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, VecI32, ffi.Pointer<Mat>)>>('Mat_ReshapeByVec');
  late final _Mat_ReshapeByVec = _Mat_ReshapeByVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, VecI32, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_Reshape_Async(
    Mat self,
    int cn,
    int rows,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_Reshape_Async(
      self,
      cn,
      rows,
      callback,
    );
  }

  late final _Mat_Reshape_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('Mat_Reshape_Async');
  late final _Mat_Reshape_Async = _Mat_Reshape_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_Row(
    Mat m,
    int y,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_Row(
      m,
      y,
      rval,
    );
  }

  late final _Mat_RowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Pointer<Mat>)>>('Mat_Row');
  late final _Mat_Row = _Mat_RowPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, ffi.Pointer<Mat>)>();

  int Mat_Rows(
    Mat m,
  ) {
    return _Mat_Rows(
      m,
    );
  }

  late final _Mat_RowsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Rows');
  late final _Mat_Rows =
      _Mat_RowsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_ScaleAdd(
    Mat src1,
    double alpha,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_ScaleAdd(
      src1,
      alpha,
      src2,
      dst,
    );
  }

  late final _Mat_ScaleAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, Mat, Mat)>>('Mat_ScaleAdd');
  late final _Mat_ScaleAdd = _Mat_ScaleAddPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_SetDouble(
    Mat m,
    int row,
    int col,
    double val,
  ) {
    return _Mat_SetDouble(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Double)>>('Mat_SetDouble');
  late final _Mat_SetDouble = _Mat_SetDoublePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, double)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetDouble3(
    Mat m,
    int x,
    int y,
    int z,
    double val,
  ) {
    return _Mat_SetDouble3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetDouble3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>>('Mat_SetDouble3');
  late final _Mat_SetDouble3 = _Mat_SetDouble3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, double)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetFloat(
    Mat m,
    int row,
    int col,
    double val,
  ) {
    return _Mat_SetFloat(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Float)>>('Mat_SetFloat');
  late final _Mat_SetFloat = _Mat_SetFloatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, double)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetFloat3(
    Mat m,
    int x,
    int y,
    int z,
    double val,
  ) {
    return _Mat_SetFloat3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Float)>>('Mat_SetFloat3');
  late final _Mat_SetFloat3 = _Mat_SetFloat3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, double)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetIdentity(
    Mat src,
    double scalar,
  ) {
    return _Mat_SetIdentity(
      src,
      scalar,
    );
  }

  late final _Mat_SetIdentityPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double)>>(
      'Mat_SetIdentity');
  late final _Mat_SetIdentity = _Mat_SetIdentityPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetInt(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetInt(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int32)>>('Mat_SetInt');
  late final _Mat_SetInt = _Mat_SetIntPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetInt3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetInt3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>>('Mat_SetInt3');
  late final _Mat_SetInt3 = _Mat_SetInt3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetSChar(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetSChar(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetSCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int8)>>('Mat_SetSChar');
  late final _Mat_SetSChar = _Mat_SetSCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetSChar3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetSChar3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetSChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>>('Mat_SetSChar3');
  late final _Mat_SetSChar3 = _Mat_SetSChar3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetShort(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetShort(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetShortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int16)>>('Mat_SetShort');
  late final _Mat_SetShort = _Mat_SetShortPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetShort3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetShort3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetShort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>>('Mat_SetShort3');
  late final _Mat_SetShort3 = _Mat_SetShort3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetTo(
    Mat m,
    Scalar value,
    Mat mask,
  ) {
    return _Mat_SetTo(
      m,
      value,
      mask,
    );
  }

  late final _Mat_SetToPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Mat)>>(
      'Mat_SetTo');
  late final _Mat_SetTo = _Mat_SetToPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetUChar(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetUChar(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetUCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Uint8)>>('Mat_SetUChar');
  late final _Mat_SetUChar = _Mat_SetUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetUChar3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetUChar3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetUChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>>('Mat_SetUChar3');
  late final _Mat_SetUChar3 = _Mat_SetUChar3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetUShort(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetUShort(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetUShortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Uint16)>>('Mat_SetUShort');
  late final _Mat_SetUShort = _Mat_SetUShortPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetUShort3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetUShort3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetUShort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>>('Mat_SetUShort3');
  late final _Mat_SetUShort3 = _Mat_SetUShort3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec2b(
    Mat m,
    int row,
    int col,
    Vec2b val,
  ) {
    return _Mat_SetVec2b(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec2bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec2b)>>('Mat_SetVec2b');
  late final _Mat_SetVec2b = _Mat_SetVec2bPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec2b)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec2d(
    Mat m,
    int row,
    int col,
    Vec2d val,
  ) {
    return _Mat_SetVec2d(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec2d)>>('Mat_SetVec2d');
  late final _Mat_SetVec2d = _Mat_SetVec2dPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec2d)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec2f(
    Mat m,
    int row,
    int col,
    Vec2f val,
  ) {
    return _Mat_SetVec2f(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec2f)>>('Mat_SetVec2f');
  late final _Mat_SetVec2f = _Mat_SetVec2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec2f)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec2i(
    Mat m,
    int row,
    int col,
    Vec2i val,
  ) {
    return _Mat_SetVec2i(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec2i)>>('Mat_SetVec2i');
  late final _Mat_SetVec2i = _Mat_SetVec2iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec2i)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec2s(
    Mat m,
    int row,
    int col,
    Vec2s val,
  ) {
    return _Mat_SetVec2s(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec2sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec2s)>>('Mat_SetVec2s');
  late final _Mat_SetVec2s = _Mat_SetVec2sPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec2s)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec2w(
    Mat m,
    int row,
    int col,
    Vec2w val,
  ) {
    return _Mat_SetVec2w(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec2wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec2w)>>('Mat_SetVec2w');
  late final _Mat_SetVec2w = _Mat_SetVec2wPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec2w)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec3b(
    Mat m,
    int row,
    int col,
    Vec3b val,
  ) {
    return _Mat_SetVec3b(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec3bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec3b)>>('Mat_SetVec3b');
  late final _Mat_SetVec3b = _Mat_SetVec3bPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec3b)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec3d(
    Mat m,
    int row,
    int col,
    Vec3d val,
  ) {
    return _Mat_SetVec3d(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec3d)>>('Mat_SetVec3d');
  late final _Mat_SetVec3d = _Mat_SetVec3dPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec3d)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec3f(
    Mat m,
    int row,
    int col,
    Vec3f val,
  ) {
    return _Mat_SetVec3f(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec3f)>>('Mat_SetVec3f');
  late final _Mat_SetVec3f = _Mat_SetVec3fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec3f)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec3i(
    Mat m,
    int row,
    int col,
    Vec3i val,
  ) {
    return _Mat_SetVec3i(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec3iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec3i)>>('Mat_SetVec3i');
  late final _Mat_SetVec3i = _Mat_SetVec3iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec3i)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec3s(
    Mat m,
    int row,
    int col,
    Vec3s val,
  ) {
    return _Mat_SetVec3s(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec3sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec3s)>>('Mat_SetVec3s');
  late final _Mat_SetVec3s = _Mat_SetVec3sPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec3s)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec3w(
    Mat m,
    int row,
    int col,
    Vec3w val,
  ) {
    return _Mat_SetVec3w(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec3wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec3w)>>('Mat_SetVec3w');
  late final _Mat_SetVec3w = _Mat_SetVec3wPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec3w)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec4b(
    Mat m,
    int row,
    int col,
    Vec4b val,
  ) {
    return _Mat_SetVec4b(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec4bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec4b)>>('Mat_SetVec4b');
  late final _Mat_SetVec4b = _Mat_SetVec4bPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec4b)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec4d(
    Mat m,
    int row,
    int col,
    Vec4d val,
  ) {
    return _Mat_SetVec4d(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec4d)>>('Mat_SetVec4d');
  late final _Mat_SetVec4d = _Mat_SetVec4dPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec4d)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec4f(
    Mat m,
    int row,
    int col,
    Vec4f val,
  ) {
    return _Mat_SetVec4f(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec4f)>>('Mat_SetVec4f');
  late final _Mat_SetVec4f = _Mat_SetVec4fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec4f)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec4i(
    Mat m,
    int row,
    int col,
    Vec4i val,
  ) {
    return _Mat_SetVec4i(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec4iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec4i)>>('Mat_SetVec4i');
  late final _Mat_SetVec4i = _Mat_SetVec4iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec4i)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec4s(
    Mat m,
    int row,
    int col,
    Vec4s val,
  ) {
    return _Mat_SetVec4s(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec4sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec4s)>>('Mat_SetVec4s');
  late final _Mat_SetVec4s = _Mat_SetVec4sPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec4s)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec4w(
    Mat m,
    int row,
    int col,
    Vec4w val,
  ) {
    return _Mat_SetVec4w(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec4wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec4w)>>('Mat_SetVec4w');
  late final _Mat_SetVec4w = _Mat_SetVec4wPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec4w)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec6d(
    Mat m,
    int row,
    int col,
    Vec6d val,
  ) {
    return _Mat_SetVec6d(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec6dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec6d)>>('Mat_SetVec6d');
  late final _Mat_SetVec6d = _Mat_SetVec6dPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec6d)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec6f(
    Mat m,
    int row,
    int col,
    Vec6f val,
  ) {
    return _Mat_SetVec6f(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec6fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec6f)>>('Mat_SetVec6f');
  late final _Mat_SetVec6f = _Mat_SetVec6fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec6f)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec6i(
    Mat m,
    int row,
    int col,
    Vec6i val,
  ) {
    return _Mat_SetVec6i(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec6iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec6i)>>('Mat_SetVec6i');
  late final _Mat_SetVec6i = _Mat_SetVec6iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec6i)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_SetVec8i(
    Mat m,
    int row,
    int col,
    Vec8i val,
  ) {
    return _Mat_SetVec8i(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetVec8iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, Vec8i)>>('Mat_SetVec8i');
  late final _Mat_SetVec8i = _Mat_SetVec8iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, Vec8i)>(isLeaf: true);

  ffi.Pointer<VecI32> Mat_Size(
    Mat m,
  ) {
    return _Mat_Size(
      m,
    );
  }

  late final _Mat_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(Mat)>>(
          'Mat_Size');
  late final _Mat_Size =
      _Mat_SizePtr.asFunction<ffi.Pointer<VecI32> Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Solve(
    Mat src1,
    Mat src2,
    Mat dst,
    int flags,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _Mat_Solve(
      src1,
      src2,
      dst,
      flags,
      rval,
    );
  }

  late final _Mat_SolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>>('Mat_Solve');
  late final _Mat_Solve = _Mat_SolvePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> Mat_SolveCubic(
    Mat coeffs,
    Mat roots,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Mat_SolveCubic(
      coeffs,
      roots,
      rval,
    );
  }

  late final _Mat_SolveCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Int>)>>('Mat_SolveCubic');
  late final _Mat_SolveCubic = _Mat_SolveCubicPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Mat_SolvePoly(
    Mat coeffs,
    Mat roots,
    int maxIters,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Mat_SolvePoly(
      coeffs,
      roots,
      maxIters,
      rval,
    );
  }

  late final _Mat_SolvePolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>>('Mat_SolvePoly');
  late final _Mat_SolvePoly = _Mat_SolvePolyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> Mat_Sort(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_Sort(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_SortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Mat_Sort');
  late final _Mat_Sort =
      _Mat_SortPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_SortIdx(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_SortIdx(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_SortIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Mat_SortIdx');
  late final _Mat_SortIdx = _Mat_SortIdxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_Split(
    Mat src,
    ffi.Pointer<VecMat> rval,
  ) {
    return _Mat_Split(
      src,
      rval,
    );
  }

  late final _Mat_SplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecMat>)>>('Mat_Split');
  late final _Mat_Split = _Mat_SplitPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>)>();

  ffi.Pointer<CvStatus> Mat_Sqrt(
    Mat m,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_Sqrt(
      m,
      rval,
    );
  }

  late final _Mat_SqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>>('Mat_Sqrt');
  late final _Mat_Sqrt = _Mat_SqrtPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  MatStep Mat_Step(
    Mat m,
  ) {
    return _Mat_Step(
      m,
    );
  }

  late final _Mat_StepPtr =
      _lookup<ffi.NativeFunction<MatStep Function(Mat)>>('Mat_Step');
  late final _Mat_Step =
      _Mat_StepPtr.asFunction<MatStep Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Subtract(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    int dtype,
  ) {
    return _Mat_Subtract(
      src1,
      src2,
      dst,
      mask,
      dtype,
    );
  }

  late final _Mat_SubtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int)>>('Mat_Subtract');
  late final _Mat_Subtract = _Mat_SubtractPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int)>();

  ffi.Pointer<CvStatus> Mat_SubtractF64(
    Mat m,
    double val,
  ) {
    return _Mat_SubtractF64(
      m,
      val,
    );
  }

  late final _Mat_SubtractF64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>(
      'Mat_SubtractF64');
  late final _Mat_SubtractF64 = _Mat_SubtractF64Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_SubtractFloat(
    Mat m,
    double val,
  ) {
    return _Mat_SubtractFloat(
      m,
      val,
    );
  }

  late final _Mat_SubtractFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>(
          'Mat_SubtractFloat');
  late final _Mat_SubtractFloat = _Mat_SubtractFloatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> Mat_SubtractI16(
    Mat m,
    int val,
  ) {
    return _Mat_SubtractI16(
      m,
      val,
    );
  }

  late final _Mat_SubtractI16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>(
      'Mat_SubtractI16');
  late final _Mat_SubtractI16 = _Mat_SubtractI16Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_SubtractI32(
    Mat m,
    int val,
  ) {
    return _Mat_SubtractI32(
      m,
      val,
    );
  }

  late final _Mat_SubtractI32Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>(
      'Mat_SubtractI32');
  late final _Mat_SubtractI32 = _Mat_SubtractI32Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_SubtractMat(
    Mat m,
    Mat val,
  ) {
    return _Mat_SubtractMat(
      m,
      val,
    );
  }

  late final _Mat_SubtractMatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_SubtractMat');
  late final _Mat_SubtractMat = _Mat_SubtractMatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_SubtractSChar(
    Mat m,
    int val,
  ) {
    return _Mat_SubtractSChar(
      m,
      val,
    );
  }

  late final _Mat_SubtractSCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>(
      'Mat_SubtractSChar');
  late final _Mat_SubtractSChar = _Mat_SubtractSCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_SubtractU16(
    Mat m,
    int val,
  ) {
    return _Mat_SubtractU16(
      m,
      val,
    );
  }

  late final _Mat_SubtractU16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>(
      'Mat_SubtractU16');
  late final _Mat_SubtractU16 = _Mat_SubtractU16Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_SubtractUChar(
    Mat m,
    int val,
  ) {
    return _Mat_SubtractUChar(
      m,
      val,
    );
  }

  late final _Mat_SubtractUCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>(
      'Mat_SubtractUChar');
  late final _Mat_SubtractUChar = _Mat_SubtractUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> Mat_Sum(
    Mat src,
    ffi.Pointer<Scalar> rval,
  ) {
    return _Mat_Sum(
      src,
      rval,
    );
  }

  late final _Mat_SumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>>('Mat_Sum');
  late final _Mat_Sum = _Mat_SumPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> Mat_T(
    Mat x,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_T(
      x,
      rval,
    );
  }

  late final _Mat_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>>('Mat_T');
  late final _Mat_T = _Mat_TPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_ToVecChar(
    Mat m,
    ffi.Pointer<VecChar> rval,
  ) {
    return _Mat_ToVecChar(
      m,
      rval,
    );
  }

  late final _Mat_ToVecCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecChar>)>>('Mat_ToVecChar');
  late final _Mat_ToVecChar = _Mat_ToVecCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecChar>)>();

  ffi.Pointer<CvStatus> Mat_ToVecChar_Async(
    Mat self,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_ToVecChar_Async(
      self,
      callback,
    );
  }

  late final _Mat_ToVecChar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('Mat_ToVecChar_Async');
  late final _Mat_ToVecChar_Async = _Mat_ToVecChar_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_ToVecUChar(
    Mat m,
    ffi.Pointer<VecUChar> rval,
  ) {
    return _Mat_ToVecUChar(
      m,
      rval,
    );
  }

  late final _Mat_ToVecUCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecUChar>)>>('Mat_ToVecUChar');
  late final _Mat_ToVecUChar = _Mat_ToVecUCharPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>)>();

  ffi.Pointer<CvStatus> Mat_ToVecUChar_Async(
    Mat self,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_ToVecUChar_Async(
      self,
      callback,
    );
  }

  late final _Mat_ToVecUChar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('Mat_ToVecUChar_Async');
  late final _Mat_ToVecUChar_Async = _Mat_ToVecUChar_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  int Mat_Total(
    Mat m,
  ) {
    return _Mat_Total(
      m,
    );
  }

  late final _Mat_TotalPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('Mat_Total');
  late final _Mat_Total =
      _Mat_TotalPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Trace(
    Mat src,
    ffi.Pointer<Scalar> rval,
  ) {
    return _Mat_Trace(
      src,
      rval,
    );
  }

  late final _Mat_TracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>)>>('Mat_Trace');
  late final _Mat_Trace = _Mat_TracePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> Mat_Transform(
    Mat src,
    Mat dst,
    Mat tm,
  ) {
    return _Mat_Transform(
      src,
      dst,
      tm,
    );
  }

  late final _Mat_TransformPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_Transform');
  late final _Mat_Transform = _Mat_TransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Transpose(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Transpose(
      src,
      dst,
    );
  }

  late final _Mat_TransposePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'Mat_Transpose');
  late final _Mat_Transpose =
      _Mat_TransposePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  int Mat_Type(
    Mat m,
  ) {
    return _Mat_Type(
      m,
    );
  }

  late final _Mat_TypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Type');
  late final _Mat_Type =
      _Mat_TypePtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> Mat_Vconcat(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Vconcat(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_VconcatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>>(
      'Mat_Vconcat');
  late final _Mat_Vconcat = _Mat_VconcatPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>();

  ffi.Pointer<CvStatus> Mat_Zeros_Async(
    int rows,
    int cols,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _Mat_Zeros_Async(
      rows,
      cols,
      type,
      callback,
    );
  }

  late final _Mat_Zeros_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('Mat_Zeros_Async');
  late final _Mat_Zeros_Async = _Mat_Zeros_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Mat_colRange(
    Mat m,
    int start,
    int end,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_colRange(
      m,
      start,
      end,
      rval,
    );
  }

  late final _Mat_colRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Mat_colRange');
  late final _Mat_colRange = _Mat_colRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_rowRange(
    Mat m,
    int start,
    int end,
    ffi.Pointer<Mat> rval,
  ) {
    return _Mat_rowRange(
      m,
      start,
      end,
      rval,
    );
  }

  late final _Mat_rowRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Mat_rowRange');
  late final _Mat_rowRange = _Mat_rowRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Mat_toString(
    Mat self,
    int fmtType,
    int f16Precision,
    int f32Precision,
    int f64Precision,
    bool multiLine,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _Mat_toString(
      self,
      fmtType,
      f16Precision,
      f32Precision,
      f64Precision,
      multiLine,
      rval,
    );
  }

  late final _Mat_toStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Mat_toString');
  late final _Mat_toString = _Mat_toStringPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, int, int, int, bool, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> Mat_toVecPoint(
    Mat self,
    ffi.Pointer<VecPoint> vec,
  ) {
    return _Mat_toVecPoint(
      self,
      vec,
    );
  }

  late final _Mat_toVecPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecPoint>)>>('Mat_toVecPoint');
  late final _Mat_toVecPoint = _Mat_toVecPointPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint>)>();

  ffi.Pointer<CvStatus> Mat_toVecPoint2f(
    Mat self,
    ffi.Pointer<VecPoint2f> vec,
  ) {
    return _Mat_toVecPoint2f(
      self,
      vec,
    );
  }

  late final _Mat_toVecPoint2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecPoint2f>)>>('Mat_toVecPoint2f');
  late final _Mat_toVecPoint2f = _Mat_toVecPoint2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvStatus> Mat_toVecPoint3f(
    Mat self,
    ffi.Pointer<VecPoint3f> vec,
  ) {
    return _Mat_toVecPoint3f(
      self,
      vec,
    );
  }

  late final _Mat_toVecPoint3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecPoint3f>)>>('Mat_toVecPoint3f');
  late final _Mat_toVecPoint3f = _Mat_toVecPoint3fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3f>)>();

  ffi.Pointer<CvStatus> Mat_toVecPoint3i(
    Mat self,
    ffi.Pointer<VecPoint3i> vec,
  ) {
    return _Mat_toVecPoint3i(
      self,
      vec,
    );
  }

  late final _Mat_toVecPoint3iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecPoint3i>)>>('Mat_toVecPoint3i');
  late final _Mat_toVecPoint3i = _Mat_toVecPoint3iPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3i>)>();

  ffi.Pointer<CvStatus> Norm(
    Mat src1,
    int normType,
    Mat mask,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Norm(
      src1,
      normType,
      mask,
      rval,
    );
  }

  late final _NormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>>('Norm');
  late final _Norm = _NormPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> NormWithMats(
    Mat src1,
    Mat src2,
    int normType,
    Mat mask,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _NormWithMats(
      src1,
      src2,
      normType,
      mask,
      rval,
    );
  }

  late final _NormWithMatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat,
              ffi.Pointer<ffi.Double>)>>('NormWithMats');
  late final _NormWithMats = _NormWithMatsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> Ones(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
  ) {
    return _Ones(
      rows,
      cols,
      type,
      rval,
    );
  }

  late final _OnesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Ones');
  late final _Ones = _OnesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> RNG_Fill(
    RNG rng,
    Mat mat,
    int distType,
    double a,
    double b,
    bool saturateRange,
  ) {
    return _RNG_Fill(
      rng,
      mat,
      distType,
      a,
      b,
      saturateRange,
    );
  }

  late final _RNG_FillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RNG, Mat, ffi.Int, ffi.Double,
              ffi.Double, ffi.Bool)>>('RNG_Fill');
  late final _RNG_Fill = _RNG_FillPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, Mat, int, double, double, bool)>();

  ffi.Pointer<CvStatus> RNG_Fill_Async(
    RNG rng,
    Mat mat,
    int distType,
    double a,
    double b,
    bool saturateRange,
    imp1.CvCallback_0 callback,
  ) {
    return _RNG_Fill_Async(
      rng,
      mat,
      distType,
      a,
      b,
      saturateRange,
      callback,
    );
  }

  late final _RNG_Fill_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RNG, Mat, ffi.Int, ffi.Double,
              ffi.Double, ffi.Bool, imp1.CvCallback_0)>>('RNG_Fill_Async');
  late final _RNG_Fill_Async = _RNG_Fill_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          RNG, Mat, int, double, double, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> RNG_Gaussian(
    RNG rng,
    double sigma,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _RNG_Gaussian(
      rng,
      sigma,
      rval,
    );
  }

  late final _RNG_GaussianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Double, ffi.Pointer<ffi.Double>)>>('RNG_Gaussian');
  late final _RNG_Gaussian = _RNG_GaussianPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> RNG_Gaussian_Async(
    RNG rng,
    double sigma,
    imp1.CvCallback_1 callback,
  ) {
    return _RNG_Gaussian_Async(
      rng,
      sigma,
      callback,
    );
  }

  late final _RNG_Gaussian_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Double, imp1.CvCallback_1)>>('RNG_Gaussian_Async');
  late final _RNG_Gaussian_Async = _RNG_Gaussian_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> RNG_Next(
    RNG rng,
    ffi.Pointer<ffi.Uint32> rval,
  ) {
    return _RNG_Next(
      rng,
      rval,
    );
  }

  late final _RNG_NextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Pointer<ffi.Uint32>)>>('RNG_Next');
  late final _RNG_Next = _RNG_NextPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<CvStatus> RNG_Next_Async(
    RNG rng,
    imp1.CvCallback_1 callback,
  ) {
    return _RNG_Next_Async(
      rng,
      callback,
    );
  }

  late final _RNG_Next_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, imp1.CvCallback_1)>>('RNG_Next_Async');
  late final _RNG_Next_Async = _RNG_Next_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> RNG_Uniform(
    RNG rng,
    int a,
    int b,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _RNG_Uniform(
      rng,
      a,
      b,
      rval,
    );
  }

  late final _RNG_UniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('RNG_Uniform');
  late final _RNG_Uniform = _RNG_UniformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> RNG_UniformDouble(
    RNG rng,
    double a,
    double b,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _RNG_UniformDouble(
      rng,
      a,
      b,
      rval,
    );
  }

  late final _RNG_UniformDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('RNG_UniformDouble');
  late final _RNG_UniformDouble = _RNG_UniformDoublePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          RNG, double, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> RNG_UniformDouble_Async(
    RNG rng,
    double a,
    double b,
    imp1.CvCallback_1 callback,
  ) {
    return _RNG_UniformDouble_Async(
      rng,
      a,
      b,
      callback,
    );
  }

  late final _RNG_UniformDouble_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Double,
              imp1.CvCallback_1)>>('RNG_UniformDouble_Async');
  late final _RNG_UniformDouble_Async = _RNG_UniformDouble_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> RNG_Uniform_Async(
    RNG rng,
    int a,
    int b,
    imp1.CvCallback_1 callback,
  ) {
    return _RNG_Uniform_Async(
      rng,
      a,
      b,
      callback,
    );
  }

  late final _RNG_Uniform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('RNG_Uniform_Async');
  late final _RNG_Uniform_Async = _RNG_Uniform_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RNG, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> RandN(
    Mat mat,
    Scalar mean,
    Scalar stddev,
  ) {
    return _RandN(
      mat,
      mean,
      stddev,
    );
  }

  late final _RandNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>>('RandN');
  late final _RandN = _RandNPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>();

  ffi.Pointer<CvStatus> RandN_Async(
    Mat mat,
    Scalar mean,
    Scalar stddev,
    imp1.CvCallback_0 callback,
  ) {
    return _RandN_Async(
      mat,
      mean,
      stddev,
      callback,
    );
  }

  late final _RandN_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, imp1.CvCallback_0)>>('RandN_Async');
  late final _RandN_Async = _RandN_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> RandShuffle(
    Mat mat,
  ) {
    return _RandShuffle(
      mat,
    );
  }

  late final _RandShufflePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat)>>(
          'RandShuffle');
  late final _RandShuffle =
      _RandShufflePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat)>();

  ffi.Pointer<CvStatus> RandShuffleWithParams(
    Mat mat,
    double iterFactor,
    RNG rng,
  ) {
    return _RandShuffleWithParams(
      mat,
      iterFactor,
      rng,
    );
  }

  late final _RandShuffleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, RNG)>>('RandShuffleWithParams');
  late final _RandShuffleWithParams = _RandShuffleWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, RNG)>();

  ffi.Pointer<CvStatus> RandShuffleWithParams_Async(
    Mat mat,
    double iterFactor,
    RNG rng,
    imp1.CvCallback_0 callback,
  ) {
    return _RandShuffleWithParams_Async(
      mat,
      iterFactor,
      rng,
      callback,
    );
  }

  late final _RandShuffleWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, RNG,
              imp1.CvCallback_0)>>('RandShuffleWithParams_Async');
  late final _RandShuffleWithParams_Async =
      _RandShuffleWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, RNG, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> RandShuffle_Async(
    Mat mat,
    imp1.CvCallback_0 callback,
  ) {
    return _RandShuffle_Async(
      mat,
      callback,
    );
  }

  late final _RandShuffle_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_0)>>('RandShuffle_Async');
  late final _RandShuffle_Async = _RandShuffle_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> RandU(
    Mat mat,
    Scalar low,
    Scalar high,
  ) {
    return _RandU(
      mat,
      low,
      high,
    );
  }

  late final _RandUPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>>('RandU');
  late final _RandU = _RandUPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>();

  ffi.Pointer<CvStatus> RandU_Async(
    Mat mat,
    Scalar low,
    Scalar high,
    imp1.CvCallback_0 callback,
  ) {
    return _RandU_Async(
      mat,
      low,
      high,
      callback,
    );
  }

  late final _RandU_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, imp1.CvCallback_0)>>('RandU_Async');
  late final _RandU_Async = _RandU_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>();

  void Rng_Close(
    imp1.RNGPtr rng,
  ) {
    return _Rng_Close(
      rng,
    );
  }

  late final _Rng_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>>('Rng_Close');
  late final _Rng_Close =
      _Rng_ClosePtr.asFunction<void Function(imp1.RNGPtr)>();

  ffi.Pointer<CvStatus> Rng_New(
    ffi.Pointer<RNG> rval,
  ) {
    return _Rng_New(
      rval,
    );
  }

  late final _Rng_NewPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>>(
      'Rng_New');
  late final _Rng_New = _Rng_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> Rng_NewWithState(
    int state,
    ffi.Pointer<RNG> rval,
  ) {
    return _Rng_NewWithState(
      state,
      rval,
    );
  }

  late final _Rng_NewWithStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Uint64, ffi.Pointer<RNG>)>>('Rng_NewWithState');
  late final _Rng_NewWithState = _Rng_NewWithStatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> Rng_NewWithState_Async(
    int state,
    imp1.CvCallback_1 callback,
  ) {
    return _Rng_NewWithState_Async(
      state,
      callback,
    );
  }

  late final _Rng_NewWithState_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Uint64, imp1.CvCallback_1)>>('Rng_NewWithState_Async');
  late final _Rng_NewWithState_Async = _Rng_NewWithState_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Rng_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _Rng_New_Async(
      callback,
    );
  }

  late final _Rng_New_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>('Rng_New_Async');
  late final _Rng_New_Async = _Rng_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Rotate(
    Mat src,
    Mat dst,
    int rotateCode,
  ) {
    return _Rotate(
      src,
      dst,
      rotateCode,
    );
  }

  late final _RotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>>('Rotate');
  late final _Rotate =
      _RotatePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int)>();

  ffi.Pointer<CvStatus> RotatedRect_BoundingRect(
    RotatedRect rect,
    ffi.Pointer<CvRect> rval,
  ) {
    return _RotatedRect_BoundingRect(
      rect,
      rval,
    );
  }

  late final _RotatedRect_BoundingRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RotatedRect, ffi.Pointer<CvRect>)>>('RotatedRect_BoundingRect');
  late final _RotatedRect_BoundingRect =
      _RotatedRect_BoundingRectPtr.asFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> RotatedRect_BoundingRect2f(
    RotatedRect rect,
    ffi.Pointer<CvRect2f> rval,
  ) {
    return _RotatedRect_BoundingRect2f(
      rect,
      rval,
    );
  }

  late final _RotatedRect_BoundingRect2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect,
              ffi.Pointer<CvRect2f>)>>('RotatedRect_BoundingRect2f');
  late final _RotatedRect_BoundingRect2f =
      _RotatedRect_BoundingRect2fPtr.asFunction<
          ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect2f>)>();

  ffi.Pointer<CvStatus> RotatedRect_Points(
    RotatedRect rect,
    ffi.Pointer<VecPoint2f> pts,
  ) {
    return _RotatedRect_Points(
      rect,
      pts,
    );
  }

  late final _RotatedRect_PointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RotatedRect, ffi.Pointer<VecPoint2f>)>>('RotatedRect_Points');
  late final _RotatedRect_Points = _RotatedRect_PointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvStatus> SVD_Compute(
    Mat src,
    ffi.Pointer<Mat> w,
    ffi.Pointer<Mat> u,
    ffi.Pointer<Mat> vt,
    int flags,
  ) {
    return _SVD_Compute(
      src,
      w,
      u,
      vt,
      flags,
    );
  }

  late final _SVD_ComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>,
              ffi.Pointer<Mat>, ffi.Pointer<Mat>, ffi.Int)>>('SVD_Compute');
  late final _SVD_Compute = _SVD_ComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Mat>, ffi.Pointer<Mat>, ffi.Pointer<Mat>, int)>();

  ffi.Pointer<CvStatus> SVD_Compute_Async(
    Mat src,
    int flags,
    imp1.CvCallback_3 callback,
  ) {
    return _SVD_Compute_Async(
      src,
      flags,
      callback,
    );
  }

  late final _SVD_Compute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_3)>>('SVD_Compute_Async');
  late final _SVD_Compute_Async = _SVD_Compute_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> SVD_backSubst(
    Mat w,
    Mat u,
    Mat vt,
    Mat rhs,
    ffi.Pointer<Mat> dst,
  ) {
    return _SVD_backSubst(
      w,
      u,
      vt,
      rhs,
      dst,
    );
  }

  late final _SVD_backSubstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Pointer<Mat>)>>('SVD_backSubst');
  late final _SVD_backSubst = _SVD_backSubstPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> SVD_backSubst_Async(
    Mat w,
    Mat u,
    Mat vt,
    Mat rhs,
    imp1.CvCallback_1 callback,
  ) {
    return _SVD_backSubst_Async(
      w,
      u,
      vt,
      rhs,
      callback,
    );
  }

  late final _SVD_backSubst_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_1)>>('SVD_backSubst_Async');
  late final _SVD_backSubst_Async = _SVD_backSubst_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SetNumThreads(
    int n,
  ) {
    return _SetNumThreads(
      n,
    );
  }

  late final _SetNumThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>(
          'SetNumThreads');
  late final _SetNumThreads =
      _SetNumThreadsPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  ffi.Pointer<CvStatus> SetRNGSeed(
    int seed,
  ) {
    return _SetRNGSeed(
      seed,
    );
  }

  late final _SetRNGSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>(
          'SetRNGSeed');
  late final _SetRNGSeed =
      _SetRNGSeedPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  ffi.Pointer<CvStatus> TheRNG(
    ffi.Pointer<RNG> rval,
  ) {
    return _TheRNG(
      rval,
    );
  }

  late final _TheRNGPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>>(
      'TheRNG');
  late final _TheRNG =
      _TheRNGPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> Zeros(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
  ) {
    return _Zeros(
      rows,
      cols,
      type,
      rval,
    );
  }

  late final _ZerosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Zeros');
  late final _Zeros = _ZerosPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> core_AbsDiff_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_AbsDiff_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_AbsDiff_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_AbsDiff_Async');
  late final _core_AbsDiff_Async = _core_AbsDiff_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_AddWeighted_Async(
    Mat src1,
    double alpha,
    Mat src2,
    double beta,
    double gamma,
    int dtype,
    imp1.CvCallback_1 callback,
  ) {
    return _core_AddWeighted_Async(
      src1,
      alpha,
      src2,
      beta,
      gamma,
      dtype,
      callback,
    );
  }

  late final _core_AddWeighted_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Double,
              Mat,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              imp1.CvCallback_1)>>('core_AddWeighted_Async');
  late final _core_AddWeighted_Async = _core_AddWeighted_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, Mat, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Add_Async(
    Mat src1,
    Mat src2,
    Mat mask,
    int dtype,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Add_Async(
      src1,
      src2,
      mask,
      dtype,
      callback,
    );
  }

  late final _core_Add_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, imp1.CvCallback_1)>>('core_Add_Async');
  late final _core_Add_Async = _core_Add_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BatchDistance_Async(
    Mat src1,
    Mat src2,
    int dtype,
    int normType,
    int K,
    Mat mask,
    int update,
    bool crosscheck,
    imp1.CvCallback_2 callback,
  ) {
    return _core_BatchDistance_Async(
      src1,
      src2,
      dtype,
      normType,
      K,
      mask,
      update,
      crosscheck,
      callback,
    );
  }

  late final _core_BatchDistance_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Int,
              ffi.Bool,
              imp1.CvCallback_2)>>('core_BatchDistance_Async');
  late final _core_BatchDistance_Async =
      _core_BatchDistance_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, int, int, int, Mat, int, bool, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_BitwiseAndWithMask_Async(
    Mat src1,
    Mat src2,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseAndWithMask_Async(
      src1,
      src2,
      mask,
      callback,
    );
  }

  late final _core_BitwiseAndWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_1)>>('core_BitwiseAndWithMask_Async');
  late final _core_BitwiseAndWithMask_Async =
      _core_BitwiseAndWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseAnd_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseAnd_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_BitwiseAnd_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_BitwiseAnd_Async');
  late final _core_BitwiseAnd_Async = _core_BitwiseAnd_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseNotWithMask_Async(
    Mat src1,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseNotWithMask_Async(
      src1,
      mask,
      callback,
    );
  }

  late final _core_BitwiseNotWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_BitwiseNotWithMask_Async');
  late final _core_BitwiseNotWithMask_Async =
      _core_BitwiseNotWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseNot_Async(
    Mat src1,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseNot_Async(
      src1,
      callback,
    );
  }

  late final _core_BitwiseNot_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_BitwiseNot_Async');
  late final _core_BitwiseNot_Async = _core_BitwiseNot_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseOrWithMask_Async(
    Mat src1,
    Mat src2,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseOrWithMask_Async(
      src1,
      src2,
      mask,
      callback,
    );
  }

  late final _core_BitwiseOrWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_1)>>('core_BitwiseOrWithMask_Async');
  late final _core_BitwiseOrWithMask_Async =
      _core_BitwiseOrWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseOr_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseOr_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_BitwiseOr_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_BitwiseOr_Async');
  late final _core_BitwiseOr_Async = _core_BitwiseOr_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseXorWithMask_Async(
    Mat src1,
    Mat src2,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseXorWithMask_Async(
      src1,
      src2,
      mask,
      callback,
    );
  }

  late final _core_BitwiseXorWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_1)>>('core_BitwiseXorWithMask_Async');
  late final _core_BitwiseXorWithMask_Async =
      _core_BitwiseXorWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BitwiseXor_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BitwiseXor_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_BitwiseXor_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_BitwiseXor_Async');
  late final _core_BitwiseXor_Async = _core_BitwiseXor_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_BorderInterpolate_Async(
    int p,
    int len,
    int borderType,
    imp1.CvCallback_1 callback,
  ) {
    return _core_BorderInterpolate_Async(
      p,
      len,
      borderType,
      callback,
    );
  }

  late final _core_BorderInterpolate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('core_BorderInterpolate_Async');
  late final _core_BorderInterpolate_Async =
      _core_BorderInterpolate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_CalcCovarMatrix_Async(
    Mat samples,
    Mat mean,
    int flags,
    int ctype,
    imp1.CvCallback_1 callback,
  ) {
    return _core_CalcCovarMatrix_Async(
      samples,
      mean,
      flags,
      ctype,
      callback,
    );
  }

  late final _core_CalcCovarMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('core_CalcCovarMatrix_Async');
  late final _core_CalcCovarMatrix_Async =
      _core_CalcCovarMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_CartToPolar_Async(
    Mat x,
    Mat y,
    bool angleInDegrees,
    imp1.CvCallback_2 callback,
  ) {
    return _core_CartToPolar_Async(
      x,
      y,
      angleInDegrees,
      callback,
    );
  }

  late final _core_CartToPolar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool,
              imp1.CvCallback_2)>>('core_CartToPolar_Async');
  late final _core_CartToPolar_Async = _core_CartToPolar_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, bool, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_CheckRange_Async(
    Mat self,
    bool quiet,
    double minVal,
    double maxVal,
    imp1.CvCallback_2 callback,
  ) {
    return _core_CheckRange_Async(
      self,
      quiet,
      minVal,
      maxVal,
      callback,
    );
  }

  late final _core_CheckRange_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Double, ffi.Double,
              imp1.CvCallback_2)>>('core_CheckRange_Async');
  late final _core_CheckRange_Async = _core_CheckRange_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, bool, double, double, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_Compare_Async(
    Mat src1,
    Mat src2,
    int ct,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Compare_Async(
      src1,
      src2,
      ct,
      callback,
    );
  }

  late final _core_Compare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_1)>>('core_Compare_Async');
  late final _core_Compare_Async = _core_Compare_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_CompleteSymm_Async(
    Mat self,
    bool lowerToUpper,
    imp1.CvCallback_0 callback,
  ) {
    return _core_CompleteSymm_Async(
      self,
      lowerToUpper,
      callback,
    );
  }

  late final _core_CompleteSymm_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Bool, imp1.CvCallback_0)>>('core_CompleteSymm_Async');
  late final _core_CompleteSymm_Async = _core_CompleteSymm_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_ConvertScaleAbs_Async(
    Mat src,
    double alpha,
    double beta,
    imp1.CvCallback_1 callback,
  ) {
    return _core_ConvertScaleAbs_Async(
      src,
      alpha,
      beta,
      callback,
    );
  }

  late final _core_ConvertScaleAbs_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Double,
              imp1.CvCallback_1)>>('core_ConvertScaleAbs_Async');
  late final _core_ConvertScaleAbs_Async =
      _core_ConvertScaleAbs_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_CopyMakeBorder_Async(
    Mat src,
    int top,
    int bottom,
    int left,
    int right,
    int borderType,
    Scalar value,
    imp1.CvCallback_1 callback,
  ) {
    return _core_CopyMakeBorder_Async(
      src,
      top,
      bottom,
      left,
      right,
      borderType,
      value,
      callback,
    );
  }

  late final _core_CopyMakeBorder_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              Scalar,
              imp1.CvCallback_1)>>('core_CopyMakeBorder_Async');
  late final _core_CopyMakeBorder_Async =
      _core_CopyMakeBorder_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, int, int, int, int, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_CountNonZero_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_CountNonZero_Async(
      src,
      callback,
    );
  }

  late final _core_CountNonZero_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_CountNonZero_Async');
  late final _core_CountNonZero_Async = _core_CountNonZero_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_DCT_Async(
    Mat src,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _core_DCT_Async(
      src,
      flags,
      callback,
    );
  }

  late final _core_DCT_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_DCT_Async');
  late final _core_DCT_Async = _core_DCT_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_DFT_Async(
    Mat self,
    int flags,
    int nonzeroRows,
    imp1.CvCallback_1 callback,
  ) {
    return _core_DFT_Async(
      self,
      flags,
      nonzeroRows,
      callback,
    );
  }

  late final _core_DFT_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('core_DFT_Async');
  late final _core_DFT_Async = _core_DFT_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Determinant_Async(
    Mat self,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Determinant_Async(
      self,
      callback,
    );
  }

  late final _core_Determinant_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Determinant_Async');
  late final _core_Determinant_Async = _core_Determinant_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Divide_Async(
    Mat src1,
    Mat src2,
    double scale,
    int dtype,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Divide_Async(
      src1,
      src2,
      scale,
      dtype,
      callback,
    );
  }

  late final _core_Divide_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('core_Divide_Async');
  late final _core_Divide_Async = _core_Divide_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_EigenNonSymmetric_Async(
    Mat src,
    imp1.CvCallback_2 callback,
  ) {
    return _core_EigenNonSymmetric_Async(
      src,
      callback,
    );
  }

  late final _core_EigenNonSymmetric_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_2)>>('core_EigenNonSymmetric_Async');
  late final _core_EigenNonSymmetric_Async = _core_EigenNonSymmetric_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_Eigen_Async(
    Mat src,
    imp1.CvCallback_3 callback,
  ) {
    return _core_Eigen_Async(
      src,
      callback,
    );
  }

  late final _core_Eigen_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_3)>>('core_Eigen_Async');
  late final _core_Eigen_Async = _core_Eigen_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> core_Exp_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Exp_Async(
      src,
      callback,
    );
  }

  late final _core_Exp_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Exp_Async');
  late final _core_Exp_Async = _core_Exp_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_ExtractChannel_Async(
    Mat src,
    int coi,
    imp1.CvCallback_1 callback,
  ) {
    return _core_ExtractChannel_Async(
      src,
      coi,
      callback,
    );
  }

  late final _core_ExtractChannel_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_ExtractChannel_Async');
  late final _core_ExtractChannel_Async =
      _core_ExtractChannel_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_FindNonZero_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_FindNonZero_Async(
      src,
      callback,
    );
  }

  late final _core_FindNonZero_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_FindNonZero_Async');
  late final _core_FindNonZero_Async = _core_FindNonZero_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Flip_Async(
    Mat src,
    int flipCode,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Flip_Async(
      src,
      flipCode,
      callback,
    );
  }

  late final _core_Flip_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_Flip_Async');
  late final _core_Flip_Async = _core_Flip_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Gemm_Async(
    Mat src1,
    Mat src2,
    double alpha,
    Mat src3,
    double beta,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Gemm_Async(
      src1,
      src2,
      alpha,
      src3,
      beta,
      flags,
      callback,
    );
  }

  late final _core_Gemm_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat, ffi.Double,
              ffi.Int, imp1.CvCallback_1)>>('core_Gemm_Async');
  late final _core_Gemm_Async = _core_Gemm_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, Mat, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_GetOptimalDFTSize_Async(
    int vecsize,
    imp1.CvCallback_1 callback,
  ) {
    return _core_GetOptimalDFTSize_Async(
      vecsize,
      callback,
    );
  }

  late final _core_GetOptimalDFTSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, imp1.CvCallback_1)>>('core_GetOptimalDFTSize_Async');
  late final _core_GetOptimalDFTSize_Async = _core_GetOptimalDFTSize_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Hconcat_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Hconcat_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_Hconcat_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Hconcat_Async');
  late final _core_Hconcat_Async = _core_Hconcat_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Idct_Async(
    Mat src,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Idct_Async(
      src,
      flags,
      callback,
    );
  }

  late final _core_Idct_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_Idct_Async');
  late final _core_Idct_Async = _core_Idct_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Idft_Async(
    Mat src,
    int flags,
    int nonzeroRows,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Idft_Async(
      src,
      flags,
      nonzeroRows,
      callback,
    );
  }

  late final _core_Idft_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('core_Idft_Async');
  late final _core_Idft_Async = _core_Idft_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_InRangeWithScalar_Async(
    Mat src,
    Scalar lowerb,
    Scalar upperb,
    imp1.CvCallback_1 callback,
  ) {
    return _core_InRangeWithScalar_Async(
      src,
      lowerb,
      upperb,
      callback,
    );
  }

  late final _core_InRangeWithScalar_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar,
              imp1.CvCallback_1)>>('core_InRangeWithScalar_Async');
  late final _core_InRangeWithScalar_Async =
      _core_InRangeWithScalar_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, Scalar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_InRange_Async(
    Mat src,
    Mat lowerb,
    Mat upperb,
    imp1.CvCallback_1 callback,
  ) {
    return _core_InRange_Async(
      src,
      lowerb,
      upperb,
      callback,
    );
  }

  late final _core_InRange_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_1)>>('core_InRange_Async');
  late final _core_InRange_Async = _core_InRange_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_InsertChannel_Async(
    Mat src,
    Mat dst,
    int coi,
    imp1.CvCallback_0 callback,
  ) {
    return _core_InsertChannel_Async(
      src,
      dst,
      coi,
      callback,
    );
  }

  late final _core_InsertChannel_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int,
              imp1.CvCallback_0)>>('core_InsertChannel_Async');
  late final _core_InsertChannel_Async =
      _core_InsertChannel_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_Invert_Async(
    Mat src,
    int flags,
    imp1.CvCallback_2 callback,
  ) {
    return _core_Invert_Async(
      src,
      flags,
      callback,
    );
  }

  late final _core_Invert_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_2)>>('core_Invert_Async');
  late final _core_Invert_Async = _core_Invert_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_KMeans_Async(
    Mat data,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    imp1.CvCallback_2 callback,
  ) {
    return _core_KMeans_Async(
      data,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      callback,
    );
  }

  late final _core_KMeans_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, TermCriteria,
              ffi.Int, ffi.Int, imp1.CvCallback_2)>>('core_KMeans_Async');
  late final _core_KMeans_Async = _core_KMeans_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, Mat, TermCriteria, int, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_KMeans_Points_Async(
    VecPoint2f pts,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    imp1.CvCallback_2 callback,
  ) {
    return _core_KMeans_Points_Async(
      pts,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      callback,
    );
  }

  late final _core_KMeans_Points_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f,
              ffi.Int,
              Mat,
              TermCriteria,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_2)>>('core_KMeans_Points_Async');
  late final _core_KMeans_Points_Async =
      _core_KMeans_Points_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, int, Mat, TermCriteria,
              int, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_LUT_Async(
    Mat src,
    Mat lut,
    imp1.CvCallback_1 callback,
  ) {
    return _core_LUT_Async(
      src,
      lut,
      callback,
    );
  }

  late final _core_LUT_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_LUT_Async');
  late final _core_LUT_Async = _core_LUT_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Log_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Log_Async(
      src,
      callback,
    );
  }

  late final _core_Log_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Log_Async');
  late final _core_Log_Async = _core_Log_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Magnitude_Async(
    Mat x,
    Mat y,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Magnitude_Async(
      x,
      y,
      callback,
    );
  }

  late final _core_Magnitude_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Magnitude_Async');
  late final _core_Magnitude_Async = _core_Magnitude_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Max_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Max_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_Max_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Max_Async');
  late final _core_Max_Async = _core_Max_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_MeanStdDevWithMask_Async(
    Mat src,
    Mat mask,
    imp1.CvCallback_2 callback,
  ) {
    return _core_MeanStdDevWithMask_Async(
      src,
      mask,
      callback,
    );
  }

  late final _core_MeanStdDevWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_2)>>('core_MeanStdDevWithMask_Async');
  late final _core_MeanStdDevWithMask_Async =
      _core_MeanStdDevWithMask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_MeanStdDev_Async(
    Mat src,
    imp1.CvCallback_2 callback,
  ) {
    return _core_MeanStdDev_Async(
      src,
      callback,
    );
  }

  late final _core_MeanStdDev_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_2)>>('core_MeanStdDev_Async');
  late final _core_MeanStdDev_Async = _core_MeanStdDev_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_MeanWithMask_Async(
    Mat self,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _core_MeanWithMask_Async(
      self,
      mask,
      callback,
    );
  }

  late final _core_MeanWithMask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_MeanWithMask_Async');
  late final _core_MeanWithMask_Async = _core_MeanWithMask_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Mean_Async(
    Mat self,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Mean_Async(
      self,
      callback,
    );
  }

  late final _core_Mean_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Mean_Async');
  late final _core_Mean_Async = _core_Mean_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Merge_Async(
    VecMat mats,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Merge_Async(
      mats,
      callback,
    );
  }

  late final _core_Merge_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, imp1.CvCallback_1)>>('core_Merge_Async');
  late final _core_Merge_Async = _core_Merge_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecMat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_MinMaxIdx_Async(
    Mat self,
    imp1.CvCallback_4 callback,
  ) {
    return _core_MinMaxIdx_Async(
      self,
      callback,
    );
  }

  late final _core_MinMaxIdx_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_4)>>('core_MinMaxIdx_Async');
  late final _core_MinMaxIdx_Async = _core_MinMaxIdx_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_4)>();

  ffi.Pointer<CvStatus> core_MinMaxIdx_Mask_Async(
    Mat self,
    Mat mask,
    imp1.CvCallback_4 callback,
  ) {
    return _core_MinMaxIdx_Mask_Async(
      self,
      mask,
      callback,
    );
  }

  late final _core_MinMaxIdx_Mask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_4)>>('core_MinMaxIdx_Mask_Async');
  late final _core_MinMaxIdx_Mask_Async =
      _core_MinMaxIdx_Mask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_4)>();

  ffi.Pointer<CvStatus> core_MinMaxLoc_Async(
    Mat self,
    imp1.CvCallback_4 callback,
  ) {
    return _core_MinMaxLoc_Async(
      self,
      callback,
    );
  }

  late final _core_MinMaxLoc_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_4)>>('core_MinMaxLoc_Async');
  late final _core_MinMaxLoc_Async = _core_MinMaxLoc_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_4)>();

  ffi.Pointer<CvStatus> core_MinMaxLoc_Mask_Async(
    Mat self,
    Mat mask,
    imp1.CvCallback_4 callback,
  ) {
    return _core_MinMaxLoc_Mask_Async(
      self,
      mask,
      callback,
    );
  }

  late final _core_MinMaxLoc_Mask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_4)>>('core_MinMaxLoc_Mask_Async');
  late final _core_MinMaxLoc_Mask_Async =
      _core_MinMaxLoc_Mask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_4)>();

  ffi.Pointer<CvStatus> core_Min_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Min_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_Min_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Min_Async');
  late final _core_Min_Async = _core_Min_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_MixChannels_Async(
    VecMat src,
    VecMat dst,
    VecI32 fromTo,
    imp1.CvCallback_0 callback,
  ) {
    return _core_MixChannels_Async(
      src,
      dst,
      fromTo,
      callback,
    );
  }

  late final _core_MixChannels_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecI32,
              imp1.CvCallback_0)>>('core_MixChannels_Async');
  late final _core_MixChannels_Async = _core_MixChannels_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, VecMat, VecI32, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_MulSpectrums_Async(
    Mat a,
    Mat b,
    int flags,
    bool conjB,
    imp1.CvCallback_1 callback,
  ) {
    return _core_MulSpectrums_Async(
      a,
      b,
      flags,
      conjB,
      callback,
    );
  }

  late final _core_MulSpectrums_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool,
              imp1.CvCallback_1)>>('core_MulSpectrums_Async');
  late final _core_MulSpectrums_Async = _core_MulSpectrums_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_MultiplyWithParams_Async(
    Mat src1,
    Mat src2,
    double scale,
    int dtype,
    imp1.CvCallback_1 callback,
  ) {
    return _core_MultiplyWithParams_Async(
      src1,
      src2,
      scale,
      dtype,
      callback,
    );
  }

  late final _core_MultiplyWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('core_MultiplyWithParams_Async');
  late final _core_MultiplyWithParams_Async =
      _core_MultiplyWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Multiply_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Multiply_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_Multiply_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Multiply_Async');
  late final _core_Multiply_Async = _core_Multiply_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_NormWithMats_Async(
    Mat src1,
    Mat src2,
    int normType,
    imp1.CvCallback_1 callback,
  ) {
    return _core_NormWithMats_Async(
      src1,
      src2,
      normType,
      callback,
    );
  }

  late final _core_NormWithMats_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int,
              imp1.CvCallback_1)>>('core_NormWithMats_Async');
  late final _core_NormWithMats_Async = _core_NormWithMats_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Norm_Async(
    Mat src1,
    int normType,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Norm_Async(
      src1,
      normType,
      callback,
    );
  }

  late final _core_Norm_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_Norm_Async');
  late final _core_Norm_Async = _core_Norm_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Norm_Mask_Async(
    Mat src1,
    int normType,
    Mat mask,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Norm_Mask_Async(
      src1,
      normType,
      mask,
      callback,
    );
  }

  late final _core_Norm_Mask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, Mat, imp1.CvCallback_1)>>('core_Norm_Mask_Async');
  late final _core_Norm_Mask_Async = _core_Norm_Mask_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Normalize_Async(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    int typ,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _core_Normalize_Async(
      src,
      dst,
      alpha,
      beta,
      typ,
      dtype,
      callback,
    );
  }

  late final _core_Normalize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double,
              ffi.Int, ffi.Int, imp1.CvCallback_0)>>('core_Normalize_Async');
  late final _core_Normalize_Async = _core_Normalize_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_Normalize_Mask_Async(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    int typ,
    int dtype,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _core_Normalize_Mask_Async(
      src,
      dst,
      alpha,
      beta,
      typ,
      dtype,
      mask,
      callback,
    );
  }

  late final _core_Normalize_Mask_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              Mat,
              imp1.CvCallback_0)>>('core_Normalize_Mask_Async');
  late final _core_Normalize_Mask_Async =
      _core_Normalize_Mask_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, double, int, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_PCABackProject_Async(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    imp1.CvCallback_1 callback,
  ) {
    return _core_PCABackProject_Async(
      src,
      mean,
      eigenvectors,
      callback,
    );
  }

  late final _core_PCABackProject_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_1)>>('core_PCABackProject_Async');
  late final _core_PCABackProject_Async =
      _core_PCABackProject_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_PCACompute_1_Async(
    Mat src,
    Mat mean,
    int maxComponents,
    imp1.CvCallback_1 callback,
  ) {
    return _core_PCACompute_1_Async(
      src,
      mean,
      maxComponents,
      callback,
    );
  }

  late final _core_PCACompute_1_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int,
              imp1.CvCallback_1)>>('core_PCACompute_1_Async');
  late final _core_PCACompute_1_Async = _core_PCACompute_1_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_PCACompute_2_Async(
    Mat src,
    Mat mean,
    double retainedVariance,
    imp1.CvCallback_2 callback,
  ) {
    return _core_PCACompute_2_Async(
      src,
      mean,
      retainedVariance,
      callback,
    );
  }

  late final _core_PCACompute_2_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double,
              imp1.CvCallback_2)>>('core_PCACompute_2_Async');
  late final _core_PCACompute_2_Async = _core_PCACompute_2_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_PCACompute_3_Async(
    Mat src,
    Mat mean,
    double retainedVariance,
    imp1.CvCallback_1 callback,
  ) {
    return _core_PCACompute_3_Async(
      src,
      mean,
      retainedVariance,
      callback,
    );
  }

  late final _core_PCACompute_3_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double,
              imp1.CvCallback_1)>>('core_PCACompute_3_Async');
  late final _core_PCACompute_3_Async = _core_PCACompute_3_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_PCACompute_Async(
    Mat src,
    Mat mean,
    int maxComponents,
    imp1.CvCallback_2 callback,
  ) {
    return _core_PCACompute_Async(
      src,
      mean,
      maxComponents,
      callback,
    );
  }

  late final _core_PCACompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_2)>>('core_PCACompute_Async');
  late final _core_PCACompute_Async = _core_PCACompute_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_PCAProject_Async(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    imp1.CvCallback_1 callback,
  ) {
    return _core_PCAProject_Async(
      src,
      mean,
      eigenvectors,
      callback,
    );
  }

  late final _core_PCAProject_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, imp1.CvCallback_1)>>('core_PCAProject_Async');
  late final _core_PCAProject_Async = _core_PCAProject_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_PatchNaNs_Async(
    Mat self,
    double val,
    imp1.CvCallback_0 callback,
  ) {
    return _core_PatchNaNs_Async(
      self,
      val,
      callback,
    );
  }

  late final _core_PatchNaNs_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, imp1.CvCallback_0)>>('core_PatchNaNs_Async');
  late final _core_PatchNaNs_Async = _core_PatchNaNs_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_PerspectiveTransform_Async(
    Mat src,
    Mat tm,
    imp1.CvCallback_1 callback,
  ) {
    return _core_PerspectiveTransform_Async(
      src,
      tm,
      callback,
    );
  }

  late final _core_PerspectiveTransform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_PerspectiveTransform_Async');
  late final _core_PerspectiveTransform_Async =
      _core_PerspectiveTransform_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Phase_Async(
    Mat x,
    Mat y,
    bool angleInDegrees,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Phase_Async(
      x,
      y,
      angleInDegrees,
      callback,
    );
  }

  late final _core_Phase_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Bool, imp1.CvCallback_1)>>('core_Phase_Async');
  late final _core_Phase_Async = _core_Phase_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_PolarToCart_Async(
    Mat magnitude,
    Mat degree,
    bool angleInDegrees,
    imp1.CvCallback_2 callback,
  ) {
    return _core_PolarToCart_Async(
      magnitude,
      degree,
      angleInDegrees,
      callback,
    );
  }

  late final _core_PolarToCart_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool,
              imp1.CvCallback_2)>>('core_PolarToCart_Async');
  late final _core_PolarToCart_Async = _core_PolarToCart_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, bool, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_Pow_Async(
    Mat src,
    double power,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Pow_Async(
      src,
      power,
      callback,
    );
  }

  late final _core_Pow_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, imp1.CvCallback_1)>>('core_Pow_Async');
  late final _core_Pow_Async = _core_Pow_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_ReduceArgMax_Async(
    Mat src,
    int axis,
    bool lastIndex,
    imp1.CvCallback_1 callback,
  ) {
    return _core_ReduceArgMax_Async(
      src,
      axis,
      lastIndex,
      callback,
    );
  }

  late final _core_ReduceArgMax_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Bool,
              imp1.CvCallback_1)>>('core_ReduceArgMax_Async');
  late final _core_ReduceArgMax_Async = _core_ReduceArgMax_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_ReduceArgMin_Async(
    Mat src,
    int axis,
    bool lastIndex,
    imp1.CvCallback_1 callback,
  ) {
    return _core_ReduceArgMin_Async(
      src,
      axis,
      lastIndex,
      callback,
    );
  }

  late final _core_ReduceArgMin_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Bool,
              imp1.CvCallback_1)>>('core_ReduceArgMin_Async');
  late final _core_ReduceArgMin_Async = _core_ReduceArgMin_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Reduce_Async(
    Mat src,
    int dim,
    int rType,
    int dType,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Reduce_Async(
      src,
      dim,
      rType,
      dType,
      callback,
    );
  }

  late final _core_Reduce_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('core_Reduce_Async');
  late final _core_Reduce_Async = _core_Reduce_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Repeat_Async(
    Mat src,
    int nY,
    int nX,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Repeat_Async(
      src,
      nY,
      nX,
      callback,
    );
  }

  late final _core_Repeat_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>>('core_Repeat_Async');
  late final _core_Repeat_Async = _core_Repeat_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Rotate_Async(
    Mat src,
    int rotateCode,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Rotate_Async(
      src,
      rotateCode,
      callback,
    );
  }

  late final _core_Rotate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_Rotate_Async');
  late final _core_Rotate_Async = _core_Rotate_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_ScaleAdd_Async(
    Mat src1,
    double alpha,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_ScaleAdd_Async(
      src1,
      alpha,
      src2,
      callback,
    );
  }

  late final _core_ScaleAdd_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Double, Mat, imp1.CvCallback_1)>>('core_ScaleAdd_Async');
  late final _core_ScaleAdd_Async = _core_ScaleAdd_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_SetIdentity_Async(
    Mat src,
    Scalar scalar,
    imp1.CvCallback_0 callback,
  ) {
    return _core_SetIdentity_Async(
      src,
      scalar,
      callback,
    );
  }

  late final _core_SetIdentity_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Scalar, imp1.CvCallback_0)>>('core_SetIdentity_Async');
  late final _core_SetIdentity_Async = _core_SetIdentity_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> core_SolveCubic_Async(
    Mat coeffs,
    imp1.CvCallback_2 callback,
  ) {
    return _core_SolveCubic_Async(
      coeffs,
      callback,
    );
  }

  late final _core_SolveCubic_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_2)>>('core_SolveCubic_Async');
  late final _core_SolveCubic_Async = _core_SolveCubic_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_SolvePoly_Async(
    Mat coeffs,
    int maxIters,
    imp1.CvCallback_2 callback,
  ) {
    return _core_SolvePoly_Async(
      coeffs,
      maxIters,
      callback,
    );
  }

  late final _core_SolvePoly_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_2)>>('core_SolvePoly_Async');
  late final _core_SolvePoly_Async = _core_SolvePoly_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_Solve_Async(
    Mat src1,
    Mat src2,
    int flags,
    imp1.CvCallback_2 callback,
  ) {
    return _core_Solve_Async(
      src1,
      src2,
      flags,
      callback,
    );
  }

  late final _core_Solve_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, imp1.CvCallback_2)>>('core_Solve_Async');
  late final _core_Solve_Async = _core_Solve_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> core_SortIdx_Async(
    Mat src,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _core_SortIdx_Async(
      src,
      flags,
      callback,
    );
  }

  late final _core_SortIdx_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_SortIdx_Async');
  late final _core_SortIdx_Async = _core_SortIdx_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Sort_Async(
    Mat src,
    int flags,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Sort_Async(
      src,
      flags,
      callback,
    );
  }

  late final _core_Sort_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('core_Sort_Async');
  late final _core_Sort_Async = _core_Sort_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Split_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Split_Async(
      src,
      callback,
    );
  }

  late final _core_Split_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Split_Async');
  late final _core_Split_Async = _core_Split_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Sqrt_Async(
    Mat self,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Sqrt_Async(
      self,
      callback,
    );
  }

  late final _core_Sqrt_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Sqrt_Async');
  late final _core_Sqrt_Async = _core_Sqrt_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Subtract_Async(
    Mat src1,
    Mat src2,
    Mat mask,
    int dtype,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Subtract_Async(
      src1,
      src2,
      mask,
      dtype,
      callback,
    );
  }

  late final _core_Subtract_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int,
              imp1.CvCallback_1)>>('core_Subtract_Async');
  late final _core_Subtract_Async = _core_Subtract_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Sum_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Sum_Async(
      src,
      callback,
    );
  }

  late final _core_Sum_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Sum_Async');
  late final _core_Sum_Async = _core_Sum_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_T_Async(
    Mat x,
    imp1.CvCallback_1 callback,
  ) {
    return _core_T_Async(
      x,
      callback,
    );
  }

  late final _core_T_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_T_Async');
  late final _core_T_Async = _core_T_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Trace_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Trace_Async(
      src,
      callback,
    );
  }

  late final _core_Trace_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Trace_Async');
  late final _core_Trace_Async = _core_Trace_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Transform_Async(
    Mat src,
    Mat tm,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Transform_Async(
      src,
      tm,
      callback,
    );
  }

  late final _core_Transform_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Transform_Async');
  late final _core_Transform_Async = _core_Transform_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Transpose_Async(
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Transpose_Async(
      src,
      callback,
    );
  }

  late final _core_Transpose_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('core_Transpose_Async');
  late final _core_Transpose_Async = _core_Transpose_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_Vconcat_Async(
    Mat src1,
    Mat src2,
    imp1.CvCallback_1 callback,
  ) {
    return _core_Vconcat_Async(
      src1,
      src2,
      callback,
    );
  }

  late final _core_Vconcat_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('core_Vconcat_Async');
  late final _core_Vconcat_Async = _core_Vconcat_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_colRange_Async(
    Mat self,
    int start,
    int end,
    imp1.CvCallback_1 callback,
  ) {
    return _core_colRange_Async(
      self,
      start,
      end,
      callback,
    );
  }

  late final _core_colRange_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('core_colRange_Async');
  late final _core_colRange_Async = _core_colRange_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> core_rowRange_Async(
    Mat self,
    int start,
    int end,
    imp1.CvCallback_1 callback,
  ) {
    return _core_rowRange_Async(
      self,
      start,
      end,
      callback,
    );
  }

  late final _core_rowRange_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('core_rowRange_Async');
  late final _core_rowRange_Async = _core_rowRange_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> getBuildInfo(
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _getBuildInfo(
      rval,
    );
  }

  late final _getBuildInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getBuildInfo');
  late final _getBuildInfo = _getBuildInfoPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> getBuildInfo_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _getBuildInfo_Async(
      callback,
    );
  }

  late final _getBuildInfo_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'getBuildInfo_Async');
  late final _getBuildInfo_Async = _getBuildInfo_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> getLogLevel(
    ffi.Pointer<ffi.Int> logLevel,
  ) {
    return _getLogLevel(
      logLevel,
    );
  }

  late final _getLogLevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>>('getLogLevel');
  late final _getLogLevel = _getLogLevelPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> openCVVersion(
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _openCVVersion(
      rval,
    );
  }

  late final _openCVVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('openCVVersion');
  late final _openCVVersion = _openCVVersionPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> openCVVersion_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _openCVVersion_Async(
      callback,
    );
  }

  late final _openCVVersion_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'openCVVersion_Async');
  late final _openCVVersion_Async = _openCVVersion_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  void registerErrorCallback(
    ErrorCallback callback,
  ) {
    return _registerErrorCallback(
      callback,
    );
  }

  late final _registerErrorCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ErrorCallback)>>(
          'registerErrorCallback');
  late final _registerErrorCallback =
      _registerErrorCallbackPtr.asFunction<void Function(ErrorCallback)>();

  ffi.Pointer<CvStatus> setLogLevel(
    int logLevel,
  ) {
    return _setLogLevel(
      logLevel,
    );
  }

  late final _setLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>(
          'setLogLevel');
  late final _setLogLevel =
      _setLogLevelPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeCore _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>
      get CvStatus_Close => _library._CvStatus_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>>
      get Mat_Close => _library._Mat_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get Mat_CloseVoid => _library._Mat_CloseVoidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>>
      get Rng_Close => _library._Rng_ClosePtr;
}

typedef CvPoint = imp1.CvPoint;
typedef CvRect = imp1.CvRect;
typedef CvRect2f = imp1.CvRect2f;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;
typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(
    int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    int line,
    ffi.Pointer<ffi.Void> userdata);
typedef Mat = imp1.Mat;
typedef MatStep = imp1.MatStep;
typedef RNG = imp1.RNG;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec2b = imp1.Vec2b;
typedef Vec2d = imp1.Vec2d;
typedef Vec2f = imp1.Vec2f;
typedef Vec2i = imp1.Vec2i;
typedef Vec2s = imp1.Vec2s;
typedef Vec2w = imp1.Vec2w;
typedef Vec3b = imp1.Vec3b;
typedef Vec3d = imp1.Vec3d;
typedef Vec3f = imp1.Vec3f;
typedef Vec3i = imp1.Vec3i;
typedef Vec3s = imp1.Vec3s;
typedef Vec3w = imp1.Vec3w;
typedef Vec4b = imp1.Vec4b;
typedef Vec4d = imp1.Vec4d;
typedef Vec4f = imp1.Vec4f;
typedef Vec4i = imp1.Vec4i;
typedef Vec4s = imp1.Vec4s;
typedef Vec4w = imp1.Vec4w;
typedef Vec6d = imp1.Vec6d;
typedef Vec6f = imp1.Vec6f;
typedef Vec6i = imp1.Vec6i;
typedef Vec8i = imp1.Vec8i;
typedef VecChar = imp1.VecChar;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecPoint3f = imp1.VecPoint3f;
typedef VecPoint3i = imp1.VecPoint3i;
typedef VecUChar = imp1.VecUChar;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
