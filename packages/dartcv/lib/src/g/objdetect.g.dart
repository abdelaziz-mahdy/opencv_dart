// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Objdetect
///
class CvNativeObjdetect {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeObjdetect(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeObjdetect.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void CascadeClassifier_Close(
    CascadeClassifierPtr self,
  ) {
    return _CascadeClassifier_Close(
      self,
    );
  }

  late final _CascadeClassifier_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CascadeClassifierPtr)>>(
          'CascadeClassifier_Close');
  late final _CascadeClassifier_Close = _CascadeClassifier_ClosePtr.asFunction<
      void Function(CascadeClassifierPtr)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> rval,
  ) {
    return _CascadeClassifier_DetectMultiScale(
      self,
      img,
      rval,
    );
  }

  late final _CascadeClassifier_DetectMultiScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat,
              ffi.Pointer<VecRect>)>>('CascadeClassifier_DetectMultiScale');
  late final _CascadeClassifier_DetectMultiScale =
      _CascadeClassifier_DetectMultiScalePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, Mat, ffi.Pointer<VecRect>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale2(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> objects,
    ffi.Pointer<VecI32> numDetections,
    double scaleFactor,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
  ) {
    return _CascadeClassifier_DetectMultiScale2(
      self,
      img,
      objects,
      numDetections,
      scaleFactor,
      minNeighbors,
      flags,
      minSize,
      maxSize,
    );
  }

  late final _CascadeClassifier_DetectMultiScale2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecI32>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize)>>('CascadeClassifier_DetectMultiScale2');
  late final _CascadeClassifier_DetectMultiScale2 =
      _CascadeClassifier_DetectMultiScale2Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecI32>,
              double,
              int,
              int,
              CvSize,
              CvSize)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale2_Async(
    CascadeClassifier self,
    Mat img,
    double scaleFactor,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    imp1.CvCallback_2 callback,
  ) {
    return _CascadeClassifier_DetectMultiScale2_Async(
      self,
      img,
      scaleFactor,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      callback,
    );
  }

  late final _CascadeClassifier_DetectMultiScale2_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize,
              imp1.CvCallback_2)>>('CascadeClassifier_DetectMultiScale2_Async');
  late final _CascadeClassifier_DetectMultiScale2_Async =
      _CascadeClassifier_DetectMultiScale2_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, double, int,
              int, CvSize, CvSize, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale3(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> objects,
    ffi.Pointer<VecI32> rejectLevels,
    ffi.Pointer<VecF64> levelWeights,
    double scaleFactor,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    bool outputRejectLevels,
  ) {
    return _CascadeClassifier_DetectMultiScale3(
      self,
      img,
      objects,
      rejectLevels,
      levelWeights,
      scaleFactor,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      outputRejectLevels,
    );
  }

  late final _CascadeClassifier_DetectMultiScale3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecI32>,
              ffi.Pointer<VecF64>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize,
              ffi.Bool)>>('CascadeClassifier_DetectMultiScale3');
  late final _CascadeClassifier_DetectMultiScale3 =
      _CascadeClassifier_DetectMultiScale3Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecI32>,
              ffi.Pointer<VecF64>,
              double,
              int,
              int,
              CvSize,
              CvSize,
              bool)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale3_Async(
    CascadeClassifier self,
    Mat img,
    double scaleFactor,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    bool outputRejectLevels,
    imp1.CvCallback_3 callback,
  ) {
    return _CascadeClassifier_DetectMultiScale3_Async(
      self,
      img,
      scaleFactor,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      outputRejectLevels,
      callback,
    );
  }

  late final _CascadeClassifier_DetectMultiScale3_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize,
              ffi.Bool,
              imp1.CvCallback_3)>>('CascadeClassifier_DetectMultiScale3_Async');
  late final _CascadeClassifier_DetectMultiScale3_Async =
      _CascadeClassifier_DetectMultiScale3_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, double, int,
              int, CvSize, CvSize, bool, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScaleWithParams(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> objects,
    double scale,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
  ) {
    return _CascadeClassifier_DetectMultiScaleWithParams(
      self,
      img,
      objects,
      scale,
      minNeighbors,
      flags,
      minSize,
      maxSize,
    );
  }

  late final _CascadeClassifier_DetectMultiScaleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize)>>('CascadeClassifier_DetectMultiScaleWithParams');
  late final _CascadeClassifier_DetectMultiScaleWithParams =
      _CascadeClassifier_DetectMultiScaleWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat,
              ffi.Pointer<VecRect>, double, int, int, CvSize, CvSize)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScaleWithParams_Async(
    CascadeClassifier self,
    Mat img,
    double scale,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_DetectMultiScaleWithParams_Async(
      self,
      img,
      scale,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      callback,
    );
  }

  late final _CascadeClassifier_DetectMultiScaleWithParams_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Double,
                  ffi.Int, ffi.Int, CvSize, CvSize, imp1.CvCallback_1)>>(
      'CascadeClassifier_DetectMultiScaleWithParams_Async');
  late final _CascadeClassifier_DetectMultiScaleWithParams_Async =
      _CascadeClassifier_DetectMultiScaleWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, double, int,
              int, CvSize, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale_Async(
    CascadeClassifier self,
    Mat img,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_DetectMultiScale_Async(
      self,
      img,
      callback,
    );
  }

  late final _CascadeClassifier_DetectMultiScale_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat,
              imp1.CvCallback_1)>>('CascadeClassifier_DetectMultiScale_Async');
  late final _CascadeClassifier_DetectMultiScale_Async =
      _CascadeClassifier_DetectMultiScale_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_Empty(
    CascadeClassifier self,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _CascadeClassifier_Empty(
      self,
      rval,
    );
  }

  late final _CascadeClassifier_EmptyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier,
              ffi.Pointer<ffi.Bool>)>>('CascadeClassifier_Empty');
  late final _CascadeClassifier_Empty = _CascadeClassifier_EmptyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          CascadeClassifier, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_Empty_Async(
    CascadeClassifier self,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_Empty_Async(
      self,
      callback,
    );
  }

  late final _CascadeClassifier_Empty_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier,
              imp1.CvCallback_1)>>('CascadeClassifier_Empty_Async');
  late final _CascadeClassifier_Empty_Async =
      _CascadeClassifier_Empty_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_Load(
    CascadeClassifier self,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _CascadeClassifier_Load(
      self,
      name,
      rval,
    );
  }

  late final _CascadeClassifier_LoadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('CascadeClassifier_Load');
  late final _CascadeClassifier_Load = _CascadeClassifier_LoadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_Load_Async(
    CascadeClassifier self,
    ffi.Pointer<ffi.Char> name,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_Load_Async(
      self,
      name,
      callback,
    );
  }

  late final _CascadeClassifier_Load_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('CascadeClassifier_Load_Async');
  late final _CascadeClassifier_Load_Async =
      _CascadeClassifier_Load_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_New(
    ffi.Pointer<CascadeClassifier> rval,
  ) {
    return _CascadeClassifier_New(
      rval,
    );
  }

  late final _CascadeClassifier_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<CascadeClassifier>)>>('CascadeClassifier_New');
  late final _CascadeClassifier_New = _CascadeClassifier_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<CascadeClassifier>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_NewFromFile(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<CascadeClassifier> rval,
  ) {
    return _CascadeClassifier_NewFromFile(
      filename,
      rval,
    );
  }

  late final _CascadeClassifier_NewFromFilePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>>(
      'CascadeClassifier_NewFromFile');
  late final _CascadeClassifier_NewFromFile =
      _CascadeClassifier_NewFromFilePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_NewFromFile_Async(
    ffi.Pointer<ffi.Char> filename,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_NewFromFile_Async(
      filename,
      callback,
    );
  }

  late final _CascadeClassifier_NewFromFile_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('CascadeClassifier_NewFromFile_Async');
  late final _CascadeClassifier_NewFromFile_Async =
      _CascadeClassifier_NewFromFile_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_New_Async(
      callback,
    );
  }

  late final _CascadeClassifier_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'CascadeClassifier_New_Async');
  late final _CascadeClassifier_New_Async = _CascadeClassifier_New_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_getFeatureType(
    CascadeClassifier self,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _CascadeClassifier_getFeatureType(
      self,
      rval,
    );
  }

  late final _CascadeClassifier_getFeatureTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier,
              ffi.Pointer<ffi.Int>)>>('CascadeClassifier_getFeatureType');
  late final _CascadeClassifier_getFeatureType =
      _CascadeClassifier_getFeatureTypePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_getFeatureType_Async(
    CascadeClassifier self,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_getFeatureType_Async(
      self,
      callback,
    );
  }

  late final _CascadeClassifier_getFeatureType_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier,
              imp1.CvCallback_1)>>('CascadeClassifier_getFeatureType_Async');
  late final _CascadeClassifier_getFeatureType_Async =
      _CascadeClassifier_getFeatureType_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_getOriginalWindowSize(
    CascadeClassifier self,
    ffi.Pointer<CvSize> rval,
  ) {
    return _CascadeClassifier_getOriginalWindowSize(
      self,
      rval,
    );
  }

  late final _CascadeClassifier_getOriginalWindowSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier,
              ffi.Pointer<CvSize>)>>('CascadeClassifier_getOriginalWindowSize');
  late final _CascadeClassifier_getOriginalWindowSize =
      _CascadeClassifier_getOriginalWindowSizePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, ffi.Pointer<CvSize>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_getOriginalWindowSize_Async(
    CascadeClassifier self,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_getOriginalWindowSize_Async(
      self,
      callback,
    );
  }

  late final _CascadeClassifier_getOriginalWindowSize_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  CascadeClassifier, imp1.CvCallback_1)>>(
      'CascadeClassifier_getOriginalWindowSize_Async');
  late final _CascadeClassifier_getOriginalWindowSize_Async =
      _CascadeClassifier_getOriginalWindowSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CascadeClassifier_isOldFormatCascade(
    CascadeClassifier self,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _CascadeClassifier_isOldFormatCascade(
      self,
      rval,
    );
  }

  late final _CascadeClassifier_isOldFormatCascadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier,
              ffi.Pointer<ffi.Bool>)>>('CascadeClassifier_isOldFormatCascade');
  late final _CascadeClassifier_isOldFormatCascade =
      _CascadeClassifier_isOldFormatCascadePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> CascadeClassifier_isOldFormatCascade_Async(
    CascadeClassifier self,
    imp1.CvCallback_1 callback,
  ) {
    return _CascadeClassifier_isOldFormatCascade_Async(
      self,
      callback,
    );
  }

  late final _CascadeClassifier_isOldFormatCascade_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  CascadeClassifier, imp1.CvCallback_1)>>(
      'CascadeClassifier_isOldFormatCascade_Async');
  late final _CascadeClassifier_isOldFormatCascade_Async =
      _CascadeClassifier_isOldFormatCascade_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, imp1.CvCallback_1)>();

  void FaceDetectorYN_Close(
    FaceDetectorYNPtr self,
  ) {
    return _FaceDetectorYN_Close(
      self,
    );
  }

  late final _FaceDetectorYN_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceDetectorYNPtr)>>(
          'FaceDetectorYN_Close');
  late final _FaceDetectorYN_Close =
      _FaceDetectorYN_ClosePtr.asFunction<void Function(FaceDetectorYNPtr)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_Detect(
    FaceDetectorYN self,
    Mat img,
    ffi.Pointer<Mat> faces,
  ) {
    return _FaceDetectorYN_Detect(
      self,
      img,
      faces,
    );
  }

  late final _FaceDetectorYN_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, Mat, ffi.Pointer<Mat>)>>('FaceDetectorYN_Detect');
  late final _FaceDetectorYN_Detect = _FaceDetectorYN_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(FaceDetectorYN, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_Detect_Async(
    FaceDetectorYN self,
    Mat img,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_Detect_Async(
      self,
      img,
      callback,
    );
  }

  late final _FaceDetectorYN_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, Mat,
              imp1.CvCallback_1)>>('FaceDetectorYN_Detect_Async');
  late final _FaceDetectorYN_Detect_Async =
      _FaceDetectorYN_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetInputSize(
    FaceDetectorYN self,
    ffi.Pointer<CvSize> input_size,
  ) {
    return _FaceDetectorYN_GetInputSize(
      self,
      input_size,
    );
  }

  late final _FaceDetectorYN_GetInputSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              ffi.Pointer<CvSize>)>>('FaceDetectorYN_GetInputSize');
  late final _FaceDetectorYN_GetInputSize =
      _FaceDetectorYN_GetInputSizePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Pointer<CvSize>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetInputSize_Async(
    FaceDetectorYN self,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_GetInputSize_Async(
      self,
      callback,
    );
  }

  late final _FaceDetectorYN_GetInputSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              imp1.CvCallback_1)>>('FaceDetectorYN_GetInputSize_Async');
  late final _FaceDetectorYN_GetInputSize_Async =
      _FaceDetectorYN_GetInputSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetNMSThreshold(
    FaceDetectorYN self,
    ffi.Pointer<ffi.Float> nms_threshold,
  ) {
    return _FaceDetectorYN_GetNMSThreshold(
      self,
      nms_threshold,
    );
  }

  late final _FaceDetectorYN_GetNMSThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              ffi.Pointer<ffi.Float>)>>('FaceDetectorYN_GetNMSThreshold');
  late final _FaceDetectorYN_GetNMSThreshold =
      _FaceDetectorYN_GetNMSThresholdPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetNMSThreshold_Async(
    FaceDetectorYN self,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_GetNMSThreshold_Async(
      self,
      callback,
    );
  }

  late final _FaceDetectorYN_GetNMSThreshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              imp1.CvCallback_1)>>('FaceDetectorYN_GetNMSThreshold_Async');
  late final _FaceDetectorYN_GetNMSThreshold_Async =
      _FaceDetectorYN_GetNMSThreshold_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetScoreThreshold(
    FaceDetectorYN self,
    ffi.Pointer<ffi.Float> score_threshold,
  ) {
    return _FaceDetectorYN_GetScoreThreshold(
      self,
      score_threshold,
    );
  }

  late final _FaceDetectorYN_GetScoreThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              ffi.Pointer<ffi.Float>)>>('FaceDetectorYN_GetScoreThreshold');
  late final _FaceDetectorYN_GetScoreThreshold =
      _FaceDetectorYN_GetScoreThresholdPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetScoreThreshold_Async(
    FaceDetectorYN self,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_GetScoreThreshold_Async(
      self,
      callback,
    );
  }

  late final _FaceDetectorYN_GetScoreThreshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              imp1.CvCallback_1)>>('FaceDetectorYN_GetScoreThreshold_Async');
  late final _FaceDetectorYN_GetScoreThreshold_Async =
      _FaceDetectorYN_GetScoreThreshold_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetTopK(
    FaceDetectorYN self,
    ffi.Pointer<ffi.Int> top_k,
  ) {
    return _FaceDetectorYN_GetTopK(
      self,
      top_k,
    );
  }

  late final _FaceDetectorYN_GetTopKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Pointer<ffi.Int>)>>('FaceDetectorYN_GetTopK');
  late final _FaceDetectorYN_GetTopK = _FaceDetectorYN_GetTopKPtr.asFunction<
      ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_GetTopK_Async(
    FaceDetectorYN self,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_GetTopK_Async(
      self,
      callback,
    );
  }

  late final _FaceDetectorYN_GetTopK_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN,
              imp1.CvCallback_1)>>('FaceDetectorYN_GetTopK_Async');
  late final _FaceDetectorYN_GetTopK_Async =
      _FaceDetectorYN_GetTopK_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_New(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    CvSize input_size,
    double score_threshold,
    double nms_threshold,
    int top_k,
    int backend_id,
    int target_id,
    ffi.Pointer<FaceDetectorYN> rval,
  ) {
    return _FaceDetectorYN_New(
      model,
      config,
      input_size,
      score_threshold,
      nms_threshold,
      top_k,
      backend_id,
      target_id,
      rval,
    );
  }

  late final _FaceDetectorYN_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              CvSize,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<FaceDetectorYN>)>>('FaceDetectorYN_New');
  late final _FaceDetectorYN_New = _FaceDetectorYN_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          CvSize,
          double,
          double,
          int,
          int,
          int,
          ffi.Pointer<FaceDetectorYN>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_NewFromBuffer(
    ffi.Pointer<ffi.Char> framework,
    VecUChar buffer,
    VecUChar buffer_config,
    CvSize input_size,
    double score_threshold,
    double nms_threshold,
    int top_k,
    int backend_id,
    int target_id,
    ffi.Pointer<FaceDetectorYN> rval,
  ) {
    return _FaceDetectorYN_NewFromBuffer(
      framework,
      buffer,
      buffer_config,
      input_size,
      score_threshold,
      nms_threshold,
      top_k,
      backend_id,
      target_id,
      rval,
    );
  }

  late final _FaceDetectorYN_NewFromBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              VecUChar,
              VecUChar,
              CvSize,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<FaceDetectorYN>)>>('FaceDetectorYN_NewFromBuffer');
  late final _FaceDetectorYN_NewFromBuffer =
      _FaceDetectorYN_NewFromBufferPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              VecUChar,
              VecUChar,
              CvSize,
              double,
              double,
              int,
              int,
              int,
              ffi.Pointer<FaceDetectorYN>)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_NewFromBuffer_Async(
    ffi.Pointer<ffi.Char> framework,
    VecUChar buffer,
    VecUChar buffer_config,
    CvSize input_size,
    double score_threshold,
    double nms_threshold,
    int top_k,
    int backend_id,
    int target_id,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_NewFromBuffer_Async(
      framework,
      buffer,
      buffer_config,
      input_size,
      score_threshold,
      nms_threshold,
      top_k,
      backend_id,
      target_id,
      callback,
    );
  }

  late final _FaceDetectorYN_NewFromBuffer_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              VecUChar,
              VecUChar,
              CvSize,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_1)>>('FaceDetectorYN_NewFromBuffer_Async');
  late final _FaceDetectorYN_NewFromBuffer_Async =
      _FaceDetectorYN_NewFromBuffer_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              VecUChar,
              VecUChar,
              CvSize,
              double,
              double,
              int,
              int,
              int,
              imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_New_Async(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    CvSize input_size,
    double score_threshold,
    double nms_threshold,
    int top_k,
    int backend_id,
    int target_id,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceDetectorYN_New_Async(
      model,
      config,
      input_size,
      score_threshold,
      nms_threshold,
      top_k,
      backend_id,
      target_id,
      callback,
    );
  }

  late final _FaceDetectorYN_New_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              CvSize,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_1)>>('FaceDetectorYN_New_Async');
  late final _FaceDetectorYN_New_Async =
      _FaceDetectorYN_New_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              CvSize,
              double,
              double,
              int,
              int,
              int,
              imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetInputSize(
    FaceDetectorYN self,
    CvSize input_size,
  ) {
    return _FaceDetectorYN_SetInputSize(
      self,
      input_size,
    );
  }

  late final _FaceDetectorYN_SetInputSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, CvSize)>>('FaceDetectorYN_SetInputSize');
  late final _FaceDetectorYN_SetInputSize = _FaceDetectorYN_SetInputSizePtr
      .asFunction<ffi.Pointer<CvStatus> Function(FaceDetectorYN, CvSize)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetInputSize_Async(
    FaceDetectorYN self,
    CvSize input_size,
    imp1.CvCallback_0 callback,
  ) {
    return _FaceDetectorYN_SetInputSize_Async(
      self,
      input_size,
      callback,
    );
  }

  late final _FaceDetectorYN_SetInputSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, CvSize,
              imp1.CvCallback_0)>>('FaceDetectorYN_SetInputSize_Async');
  late final _FaceDetectorYN_SetInputSize_Async =
      _FaceDetectorYN_SetInputSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetNMSThreshold(
    FaceDetectorYN self,
    double nms_threshold,
  ) {
    return _FaceDetectorYN_SetNMSThreshold(
      self,
      nms_threshold,
    );
  }

  late final _FaceDetectorYN_SetNMSThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Float)>>('FaceDetectorYN_SetNMSThreshold');
  late final _FaceDetectorYN_SetNMSThreshold =
      _FaceDetectorYN_SetNMSThresholdPtr.asFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, double)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetNMSThreshold_Async(
    FaceDetectorYN self,
    double nms_threshold,
    imp1.CvCallback_0 callback,
  ) {
    return _FaceDetectorYN_SetNMSThreshold_Async(
      self,
      nms_threshold,
      callback,
    );
  }

  late final _FaceDetectorYN_SetNMSThreshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Float,
              imp1.CvCallback_0)>>('FaceDetectorYN_SetNMSThreshold_Async');
  late final _FaceDetectorYN_SetNMSThreshold_Async =
      _FaceDetectorYN_SetNMSThreshold_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetScoreThreshold(
    FaceDetectorYN self,
    double score_threshold,
  ) {
    return _FaceDetectorYN_SetScoreThreshold(
      self,
      score_threshold,
    );
  }

  late final _FaceDetectorYN_SetScoreThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Float)>>('FaceDetectorYN_SetScoreThreshold');
  late final _FaceDetectorYN_SetScoreThreshold =
      _FaceDetectorYN_SetScoreThresholdPtr.asFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, double)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetScoreThreshold_Async(
    FaceDetectorYN self,
    double score_threshold,
    imp1.CvCallback_0 callback,
  ) {
    return _FaceDetectorYN_SetScoreThreshold_Async(
      self,
      score_threshold,
      callback,
    );
  }

  late final _FaceDetectorYN_SetScoreThreshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Float,
              imp1.CvCallback_0)>>('FaceDetectorYN_SetScoreThreshold_Async');
  late final _FaceDetectorYN_SetScoreThreshold_Async =
      _FaceDetectorYN_SetScoreThreshold_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetTopK(
    FaceDetectorYN self,
    int top_k,
  ) {
    return _FaceDetectorYN_SetTopK(
      self,
      top_k,
    );
  }

  late final _FaceDetectorYN_SetTopKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, ffi.Int)>>('FaceDetectorYN_SetTopK');
  late final _FaceDetectorYN_SetTopK = _FaceDetectorYN_SetTopKPtr.asFunction<
      ffi.Pointer<CvStatus> Function(FaceDetectorYN, int)>();

  ffi.Pointer<CvStatus> FaceDetectorYN_SetTopK_Async(
    FaceDetectorYN self,
    int top_k,
    imp1.CvCallback_0 callback,
  ) {
    return _FaceDetectorYN_SetTopK_Async(
      self,
      top_k,
      callback,
    );
  }

  late final _FaceDetectorYN_SetTopK_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Int,
              imp1.CvCallback_0)>>('FaceDetectorYN_SetTopK_Async');
  late final _FaceDetectorYN_SetTopK_Async =
      _FaceDetectorYN_SetTopK_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_AlignCrop(
    FaceRecognizerSF self,
    Mat src_img,
    Mat face_box,
    ffi.Pointer<Mat> aligned_img,
  ) {
    return _FaceRecognizerSF_AlignCrop(
      self,
      src_img,
      face_box,
      aligned_img,
    );
  }

  late final _FaceRecognizerSF_AlignCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat,
              ffi.Pointer<Mat>)>>('FaceRecognizerSF_AlignCrop');
  late final _FaceRecognizerSF_AlignCrop =
      _FaceRecognizerSF_AlignCropPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceRecognizerSF, Mat, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_AlignCrop_Async(
    FaceRecognizerSF self,
    Mat src_img,
    Mat face_box,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceRecognizerSF_AlignCrop_Async(
      self,
      src_img,
      face_box,
      callback,
    );
  }

  late final _FaceRecognizerSF_AlignCrop_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat,
              imp1.CvCallback_1)>>('FaceRecognizerSF_AlignCrop_Async');
  late final _FaceRecognizerSF_AlignCrop_Async =
      _FaceRecognizerSF_AlignCrop_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceRecognizerSF, Mat, Mat, imp1.CvCallback_1)>();

  void FaceRecognizerSF_Close(
    FaceRecognizerSFPtr self,
  ) {
    return _FaceRecognizerSF_Close(
      self,
    );
  }

  late final _FaceRecognizerSF_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceRecognizerSFPtr)>>(
          'FaceRecognizerSF_Close');
  late final _FaceRecognizerSF_Close = _FaceRecognizerSF_ClosePtr.asFunction<
      void Function(FaceRecognizerSFPtr)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_Feature(
    FaceRecognizerSF self,
    Mat aligned_img,
    bool clone,
    ffi.Pointer<Mat> face_feature,
  ) {
    return _FaceRecognizerSF_Feature(
      self,
      aligned_img,
      clone,
      face_feature,
    );
  }

  late final _FaceRecognizerSF_FeaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, ffi.Bool,
              ffi.Pointer<Mat>)>>('FaceRecognizerSF_Feature');
  late final _FaceRecognizerSF_Feature =
      _FaceRecognizerSF_FeaturePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceRecognizerSF, Mat, bool, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_Feature_Async(
    FaceRecognizerSF self,
    Mat aligned_img,
    bool clone,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceRecognizerSF_Feature_Async(
      self,
      aligned_img,
      clone,
      callback,
    );
  }

  late final _FaceRecognizerSF_Feature_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, ffi.Bool,
              imp1.CvCallback_1)>>('FaceRecognizerSF_Feature_Async');
  late final _FaceRecognizerSF_Feature_Async =
      _FaceRecognizerSF_Feature_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceRecognizerSF, Mat, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_Match(
    FaceRecognizerSF self,
    Mat face_feature1,
    Mat face_feature2,
    int dis_type,
    ffi.Pointer<ffi.Double> distance,
  ) {
    return _FaceRecognizerSF_Match(
      self,
      face_feature1,
      face_feature2,
      dis_type,
      distance,
    );
  }

  late final _FaceRecognizerSF_MatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('FaceRecognizerSF_Match');
  late final _FaceRecognizerSF_Match = _FaceRecognizerSF_MatchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          FaceRecognizerSF, Mat, Mat, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_Match_Async(
    FaceRecognizerSF self,
    Mat face_feature1,
    Mat face_feature2,
    int dis_type,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceRecognizerSF_Match_Async(
      self,
      face_feature1,
      face_feature2,
      dis_type,
      callback,
    );
  }

  late final _FaceRecognizerSF_Match_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat, ffi.Int,
              imp1.CvCallback_1)>>('FaceRecognizerSF_Match_Async');
  late final _FaceRecognizerSF_Match_Async =
      _FaceRecognizerSF_Match_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FaceRecognizerSF, Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_New(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    int backend_id,
    int target_id,
    ffi.Pointer<FaceRecognizerSF> rval,
  ) {
    return _FaceRecognizerSF_New(
      model,
      config,
      backend_id,
      target_id,
      rval,
    );
  }

  late final _FaceRecognizerSF_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<FaceRecognizerSF>)>>('FaceRecognizerSF_New');
  late final _FaceRecognizerSF_New = _FaceRecognizerSF_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<FaceRecognizerSF>)>();

  ffi.Pointer<CvStatus> FaceRecognizerSF_New_Async(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    int backend_id,
    int target_id,
    imp1.CvCallback_1 callback,
  ) {
    return _FaceRecognizerSF_New_Async(
      model,
      config,
      backend_id,
      target_id,
      callback,
    );
  }

  late final _FaceRecognizerSF_New_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_1)>>('FaceRecognizerSF_New_Async');
  late final _FaceRecognizerSF_New_Async =
      _FaceRecognizerSF_New_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GroupRectangles(
    ffi.Pointer<VecRect> rects,
    int groupThreshold,
    double eps,
  ) {
    return _GroupRectangles(
      rects,
      groupThreshold,
      eps,
    );
  }

  late final _GroupRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<VecRect>, ffi.Int, ffi.Double)>>('GroupRectangles');
  late final _GroupRectangles = _GroupRectanglesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<VecRect>, int, double)>();

  ffi.Pointer<CvStatus> GroupRectangles_Async(
    ffi.Pointer<VecRect> rects,
    int groupThreshold,
    double eps,
    imp1.CvCallback_0 callback,
  ) {
    return _GroupRectangles_Async(
      rects,
      groupThreshold,
      eps,
      callback,
    );
  }

  late final _GroupRectangles_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<VecRect>, ffi.Int,
              ffi.Double, imp1.CvCallback_0)>>('GroupRectangles_Async');
  late final _GroupRectangles_Async = _GroupRectangles_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<VecRect>, int, double, imp1.CvCallback_0)>();

  void HOGDescriptor_Close(
    HOGDescriptorPtr self,
  ) {
    return _HOGDescriptor_Close(
      self,
    );
  }

  late final _HOGDescriptor_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HOGDescriptorPtr)>>(
          'HOGDescriptor_Close');
  late final _HOGDescriptor_Close =
      _HOGDescriptor_ClosePtr.asFunction<void Function(HOGDescriptorPtr)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Compute(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecF32> descriptors,
    CvSize winStride,
    CvSize padding,
    ffi.Pointer<VecPoint> locations,
  ) {
    return _HOGDescriptor_Compute(
      self,
      img,
      descriptors,
      winStride,
      padding,
      locations,
    );
  }

  late final _HOGDescriptor_ComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              Mat,
              ffi.Pointer<VecF32>,
              CvSize,
              CvSize,
              ffi.Pointer<VecPoint>)>>('HOGDescriptor_Compute');
  late final _HOGDescriptor_Compute = _HOGDescriptor_ComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecF32>,
          CvSize, CvSize, ffi.Pointer<VecPoint>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Compute_Async(
    HOGDescriptor self,
    Mat img,
    CvSize winStride,
    CvSize padding,
    imp1.CvCallback_2 callback,
  ) {
    return _HOGDescriptor_Compute_Async(
      self,
      img,
      winStride,
      padding,
      callback,
    );
  }

  late final _HOGDescriptor_Compute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, CvSize, CvSize,
              imp1.CvCallback_2)>>('HOGDescriptor_Compute_Async');
  late final _HOGDescriptor_Compute_Async =
      _HOGDescriptor_Compute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, Mat, CvSize, CvSize, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Detect(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecPoint> foundLocations,
    ffi.Pointer<VecF64> weights,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    ffi.Pointer<VecPoint> searchLocations,
  ) {
    return _HOGDescriptor_Detect(
      self,
      img,
      foundLocations,
      weights,
      hitThresh,
      winStride,
      padding,
      searchLocations,
    );
  }

  late final _HOGDescriptor_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<VecF64>,
              ffi.Double,
              CvSize,
              CvSize,
              ffi.Pointer<VecPoint>)>>('HOGDescriptor_Detect');
  late final _HOGDescriptor_Detect = _HOGDescriptor_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          HOGDescriptor,
          Mat,
          ffi.Pointer<VecPoint>,
          ffi.Pointer<VecF64>,
          double,
          CvSize,
          CvSize,
          ffi.Pointer<VecPoint>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Detect2(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecPoint> foundLocations,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    ffi.Pointer<VecPoint> searchLocations,
  ) {
    return _HOGDescriptor_Detect2(
      self,
      img,
      foundLocations,
      hitThresh,
      winStride,
      padding,
      searchLocations,
    );
  }

  late final _HOGDescriptor_Detect2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Double,
              CvSize,
              CvSize,
              ffi.Pointer<VecPoint>)>>('HOGDescriptor_Detect2');
  late final _HOGDescriptor_Detect2 = _HOGDescriptor_Detect2Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>,
          double, CvSize, CvSize, ffi.Pointer<VecPoint>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Detect2_Async(
    HOGDescriptor self,
    Mat img,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    imp1.CvCallback_2 callback,
  ) {
    return _HOGDescriptor_Detect2_Async(
      self,
      img,
      hitThresh,
      winStride,
      padding,
      callback,
    );
  }

  late final _HOGDescriptor_Detect2_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Double, CvSize,
              CvSize, imp1.CvCallback_2)>>('HOGDescriptor_Detect2_Async');
  late final _HOGDescriptor_Detect2_Async =
      _HOGDescriptor_Detect2_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, Mat, double, CvSize, CvSize, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScale(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecRect> rval,
  ) {
    return _HOGDescriptor_DetectMultiScale(
      self,
      img,
      rval,
    );
  }

  late final _HOGDescriptor_DetectMultiScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat,
              ffi.Pointer<VecRect>)>>('HOGDescriptor_DetectMultiScale');
  late final _HOGDescriptor_DetectMultiScale =
      _HOGDescriptor_DetectMultiScalePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, Mat, ffi.Pointer<VecRect>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScaleWithParams(
    HOGDescriptor self,
    Mat img,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    double scale,
    double finalThreshold,
    bool useMeanshiftGrouping,
    ffi.Pointer<VecRect> rval,
  ) {
    return _HOGDescriptor_DetectMultiScaleWithParams(
      self,
      img,
      hitThresh,
      winStride,
      padding,
      scale,
      finalThreshold,
      useMeanshiftGrouping,
      rval,
    );
  }

  late final _HOGDescriptor_DetectMultiScaleWithParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  HOGDescriptor,
                  Mat,
                  ffi.Double,
                  CvSize,
                  CvSize,
                  ffi.Double,
                  ffi.Double,
                  ffi.Bool,
                  ffi.Pointer<VecRect>)>>(
      'HOGDescriptor_DetectMultiScaleWithParams');
  late final _HOGDescriptor_DetectMultiScaleWithParams =
      _HOGDescriptor_DetectMultiScaleWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, double, CvSize,
              CvSize, double, double, bool, ffi.Pointer<VecRect>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScaleWithParams_Async(
    HOGDescriptor self,
    Mat img,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    double scale,
    double finalThreshold,
    bool useMeanshiftGrouping,
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_DetectMultiScaleWithParams_Async(
      self,
      img,
      hitThresh,
      winStride,
      padding,
      scale,
      finalThreshold,
      useMeanshiftGrouping,
      callback,
    );
  }

  late final _HOGDescriptor_DetectMultiScaleWithParams_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  HOGDescriptor,
                  Mat,
                  ffi.Double,
                  CvSize,
                  CvSize,
                  ffi.Double,
                  ffi.Double,
                  ffi.Bool,
                  imp1.CvCallback_1)>>(
      'HOGDescriptor_DetectMultiScaleWithParams_Async');
  late final _HOGDescriptor_DetectMultiScaleWithParams_Async =
      _HOGDescriptor_DetectMultiScaleWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, double, CvSize,
              CvSize, double, double, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScale_Async(
    HOGDescriptor self,
    Mat img,
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_DetectMultiScale_Async(
      self,
      img,
      callback,
    );
  }

  late final _HOGDescriptor_DetectMultiScale_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat,
              imp1.CvCallback_1)>>('HOGDescriptor_DetectMultiScale_Async');
  late final _HOGDescriptor_DetectMultiScale_Async =
      _HOGDescriptor_DetectMultiScale_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Detect_Async(
    HOGDescriptor self,
    Mat img,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    imp1.CvCallback_3 callback,
  ) {
    return _HOGDescriptor_Detect_Async(
      self,
      img,
      hitThresh,
      winStride,
      padding,
      callback,
    );
  }

  late final _HOGDescriptor_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Double, CvSize,
              CvSize, imp1.CvCallback_3)>>('HOGDescriptor_Detect_Async');
  late final _HOGDescriptor_Detect_Async =
      _HOGDescriptor_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, Mat, double, CvSize, CvSize, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Load(
    HOGDescriptor self,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _HOGDescriptor_Load(
      self,
      name,
      rval,
    );
  }

  late final _HOGDescriptor_LoadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>)>>('HOGDescriptor_Load');
  late final _HOGDescriptor_Load = _HOGDescriptor_LoadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_Load_Async(
    HOGDescriptor self,
    ffi.Pointer<ffi.Char> name,
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_Load_Async(
      self,
      name,
      callback,
    );
  }

  late final _HOGDescriptor_Load_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('HOGDescriptor_Load_Async');
  late final _HOGDescriptor_Load_Async =
      _HOGDescriptor_Load_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_New(
    ffi.Pointer<HOGDescriptor> rval,
  ) {
    return _HOGDescriptor_New(
      rval,
    );
  }

  late final _HOGDescriptor_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<HOGDescriptor>)>>('HOGDescriptor_New');
  late final _HOGDescriptor_New = _HOGDescriptor_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<HOGDescriptor>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_NewFromFile(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<HOGDescriptor> rval,
  ) {
    return _HOGDescriptor_NewFromFile(
      filename,
      rval,
    );
  }

  late final _HOGDescriptor_NewFromFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<HOGDescriptor>)>>('HOGDescriptor_NewFromFile');
  late final _HOGDescriptor_NewFromFile =
      _HOGDescriptor_NewFromFilePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<HOGDescriptor>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_NewFromFile_Async(
    ffi.Pointer<ffi.Char> filename,
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_NewFromFile_Async(
      filename,
      callback,
    );
  }

  late final _HOGDescriptor_NewFromFile_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('HOGDescriptor_NewFromFile_Async');
  late final _HOGDescriptor_NewFromFile_Async =
      _HOGDescriptor_NewFromFile_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_New_Async(
      callback,
    );
  }

  late final _HOGDescriptor_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'HOGDescriptor_New_Async');
  late final _HOGDescriptor_New_Async = _HOGDescriptor_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_SetSVMDetector(
    HOGDescriptor self,
    VecF32 det,
  ) {
    return _HOGDescriptor_SetSVMDetector(
      self,
      det,
    );
  }

  late final _HOGDescriptor_SetSVMDetectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, VecF32)>>('HOGDescriptor_SetSVMDetector');
  late final _HOGDescriptor_SetSVMDetector = _HOGDescriptor_SetSVMDetectorPtr
      .asFunction<ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32)>();

  ffi.Pointer<CvStatus> HOGDescriptor_SetSVMDetector_Async(
    HOGDescriptor self,
    VecF32 det,
    imp1.CvCallback_0 callback,
  ) {
    return _HOGDescriptor_SetSVMDetector_Async(
      self,
      det,
      callback,
    );
  }

  late final _HOGDescriptor_SetSVMDetector_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32,
              imp1.CvCallback_0)>>('HOGDescriptor_SetSVMDetector_Async');
  late final _HOGDescriptor_SetSVMDetector_Async =
      _HOGDescriptor_SetSVMDetector_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, VecF32, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> HOGDescriptor_computeGradient(
    HOGDescriptor self,
    Mat img,
    Mat grad,
    Mat angleOfs,
    CvSize paddingTL,
    CvSize paddingBR,
  ) {
    return _HOGDescriptor_computeGradient(
      self,
      img,
      grad,
      angleOfs,
      paddingTL,
      paddingBR,
    );
  }

  late final _HOGDescriptor_computeGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, Mat, Mat, CvSize,
              CvSize)>>('HOGDescriptor_computeGradient');
  late final _HOGDescriptor_computeGradient =
      _HOGDescriptor_computeGradientPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, Mat, Mat, Mat, CvSize, CvSize)>();

  ffi.Pointer<CvStatus> HOGDescriptor_computeGradient_Async(
    HOGDescriptor self,
    Mat img,
    Mat grad,
    Mat angleOfs,
    CvSize paddingTL,
    CvSize paddingBR,
    imp1.CvCallback_0 callback,
  ) {
    return _HOGDescriptor_computeGradient_Async(
      self,
      img,
      grad,
      angleOfs,
      paddingTL,
      paddingBR,
      callback,
    );
  }

  late final _HOGDescriptor_computeGradient_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              Mat,
              Mat,
              Mat,
              CvSize,
              CvSize,
              imp1.CvCallback_0)>>('HOGDescriptor_computeGradient_Async');
  late final _HOGDescriptor_computeGradient_Async =
      _HOGDescriptor_computeGradient_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, Mat, Mat, CvSize,
              CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> HOGDescriptor_getDaimlerPeopleDetector(
    ffi.Pointer<VecF32> rval,
  ) {
    return _HOGDescriptor_getDaimlerPeopleDetector(
      rval,
    );
  }

  late final _HOGDescriptor_getDaimlerPeopleDetectorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>>(
      'HOGDescriptor_getDaimlerPeopleDetector');
  late final _HOGDescriptor_getDaimlerPeopleDetector =
      _HOGDescriptor_getDaimlerPeopleDetectorPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_getDaimlerPeopleDetector_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_getDaimlerPeopleDetector_Async(
      callback,
    );
  }

  late final _HOGDescriptor_getDaimlerPeopleDetector_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'HOGDescriptor_getDaimlerPeopleDetector_Async');
  late final _HOGDescriptor_getDaimlerPeopleDetector_Async =
      _HOGDescriptor_getDaimlerPeopleDetector_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_getDescriptorSize(
    HOGDescriptor self,
    ffi.Pointer<ffi.Size> rval,
  ) {
    return _HOGDescriptor_getDescriptorSize(
      self,
      rval,
    );
  }

  late final _HOGDescriptor_getDescriptorSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor,
              ffi.Pointer<ffi.Size>)>>('HOGDescriptor_getDescriptorSize');
  late final _HOGDescriptor_getDescriptorSize =
      _HOGDescriptor_getDescriptorSizePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_getDescriptorSize_Async(
    HOGDescriptor self,
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_getDescriptorSize_Async(
      self,
      callback,
    );
  }

  late final _HOGDescriptor_getDescriptorSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor,
              imp1.CvCallback_1)>>('HOGDescriptor_getDescriptorSize_Async');
  late final _HOGDescriptor_getDescriptorSize_Async =
      _HOGDescriptor_getDescriptorSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_getWinSigma(
    HOGDescriptor self,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _HOGDescriptor_getWinSigma(
      self,
      rval,
    );
  }

  late final _HOGDescriptor_getWinSigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor,
              ffi.Pointer<ffi.Double>)>>('HOGDescriptor_getWinSigma');
  late final _HOGDescriptor_getWinSigma =
      _HOGDescriptor_getWinSigmaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> HOGDescriptor_getWinSigma_Async(
    HOGDescriptor self,
    imp1.CvCallback_1 callback,
  ) {
    return _HOGDescriptor_getWinSigma_Async(
      self,
      callback,
    );
  }

  late final _HOGDescriptor_getWinSigma_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor,
              imp1.CvCallback_1)>>('HOGDescriptor_getWinSigma_Async');
  late final _HOGDescriptor_getWinSigma_Async =
      _HOGDescriptor_getWinSigma_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> HOGDescriptor_groupRectangles(
    HOGDescriptor self,
    ffi.Pointer<VecRect> rectList,
    ffi.Pointer<VecF64> weights,
    int groupThreshold,
    double eps,
  ) {
    return _HOGDescriptor_groupRectangles(
      self,
      rectList,
      weights,
      groupThreshold,
      eps,
    );
  }

  late final _HOGDescriptor_groupRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecF64>,
              ffi.Int,
              ffi.Double)>>('HOGDescriptor_groupRectangles');
  late final _HOGDescriptor_groupRectangles =
      _HOGDescriptor_groupRectanglesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<VecRect>,
              ffi.Pointer<VecF64>, int, double)>();

  ffi.Pointer<CvStatus> HOGDescriptor_groupRectangles_Async(
    HOGDescriptor self,
    ffi.Pointer<VecRect> rectList,
    ffi.Pointer<VecF64> weights,
    int groupThreshold,
    double eps,
    imp1.CvCallback_0 callback,
  ) {
    return _HOGDescriptor_groupRectangles_Async(
      self,
      rectList,
      weights,
      groupThreshold,
      eps,
      callback,
    );
  }

  late final _HOGDescriptor_groupRectangles_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecF64>,
              ffi.Int,
              ffi.Double,
              imp1.CvCallback_0)>>('HOGDescriptor_groupRectangles_Async');
  late final _HOGDescriptor_groupRectangles_Async =
      _HOGDescriptor_groupRectangles_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<VecRect>,
              ffi.Pointer<VecF64>, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> HOG_GetDefaultPeopleDetector(
    ffi.Pointer<VecF32> rval,
  ) {
    return _HOG_GetDefaultPeopleDetector(
      rval,
    );
  }

  late final _HOG_GetDefaultPeopleDetectorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>>(
      'HOG_GetDefaultPeopleDetector');
  late final _HOG_GetDefaultPeopleDetector = _HOG_GetDefaultPeopleDetectorPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>();

  ffi.Pointer<CvStatus> HOG_GetDefaultPeopleDetector_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _HOG_GetDefaultPeopleDetector_Async(
      callback,
    );
  }

  late final _HOG_GetDefaultPeopleDetector_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'HOG_GetDefaultPeopleDetector_Async');
  late final _HOG_GetDefaultPeopleDetector_Async =
      _HOG_GetDefaultPeopleDetector_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  void QRCodeDetector_Close(
    QRCodeDetectorPtr self,
  ) {
    return _QRCodeDetector_Close(
      self,
    );
  }

  late final _QRCodeDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QRCodeDetectorPtr)>>(
          'QRCodeDetector_Close');
  late final _QRCodeDetector_Close =
      _QRCodeDetector_ClosePtr.asFunction<void Function(QRCodeDetectorPtr)>();

  ffi.Pointer<CvStatus> QRCodeDetector_Decode(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    Mat straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _QRCodeDetector_Decode(
      self,
      input,
      points,
      straight_qrcode,
      rval,
    );
  }

  late final _QRCodeDetector_DecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecPoint>,
              Mat,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('QRCodeDetector_Decode');
  late final _QRCodeDetector_Decode = _QRCodeDetector_DecodePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
          Mat, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_Decode_Async(
    QRCodeDetector self,
    Mat input,
    imp1.CvCallback_3 callback,
  ) {
    return _QRCodeDetector_Decode_Async(
      self,
      input,
      callback,
    );
  }

  late final _QRCodeDetector_Decode_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat,
              imp1.CvCallback_3)>>('QRCodeDetector_Decode_Async');
  late final _QRCodeDetector_Decode_Async =
      _QRCodeDetector_Decode_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> QRCodeDetector_Detect(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _QRCodeDetector_Detect(
      self,
      input,
      points,
      rval,
    );
  }

  late final _QRCodeDetector_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<ffi.Bool>)>>('QRCodeDetector_Detect');
  late final _QRCodeDetector_Detect = _QRCodeDetector_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecode(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<Mat> straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _QRCodeDetector_DetectAndDecode(
      self,
      input,
      points,
      straight_qrcode,
      rval,
    );
  }

  late final _QRCodeDetector_DetectAndDecodePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  QRCodeDetector,
                  Mat,
                  ffi.Pointer<VecPoint>,
                  ffi.Pointer<Mat>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'QRCodeDetector_DetectAndDecode');
  late final _QRCodeDetector_DetectAndDecode =
      _QRCodeDetector_DetectAndDecodePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<Mat>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecodeMulti(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecVecChar> decoded,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<VecMat> straight_code,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _QRCodeDetector_DetectAndDecodeMulti(
      self,
      input,
      decoded,
      points,
      straight_code,
      rval,
    );
  }

  late final _QRCodeDetector_DetectAndDecodeMultiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecVecChar>,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<VecMat>,
              ffi.Pointer<ffi.Bool>)>>('QRCodeDetector_DetectAndDecodeMulti');
  late final _QRCodeDetector_DetectAndDecodeMulti =
      _QRCodeDetector_DetectAndDecodeMultiPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecVecChar>,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<VecMat>,
              ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecodeMulti_Async(
    QRCodeDetector self,
    Mat input,
    imp1.CvCallback_4 callback,
  ) {
    return _QRCodeDetector_DetectAndDecodeMulti_Async(
      self,
      input,
      callback,
    );
  }

  late final _QRCodeDetector_DetectAndDecodeMulti_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat,
              imp1.CvCallback_4)>>('QRCodeDetector_DetectAndDecodeMulti_Async');
  late final _QRCodeDetector_DetectAndDecodeMulti_Async =
      _QRCodeDetector_DetectAndDecodeMulti_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, imp1.CvCallback_4)>();

  ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecode_Async(
    QRCodeDetector self,
    Mat input,
    imp1.CvCallback_3 callback,
  ) {
    return _QRCodeDetector_DetectAndDecode_Async(
      self,
      input,
      callback,
    );
  }

  late final _QRCodeDetector_DetectAndDecode_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat,
              imp1.CvCallback_3)>>('QRCodeDetector_DetectAndDecode_Async');
  late final _QRCodeDetector_DetectAndDecode_Async =
      _QRCodeDetector_DetectAndDecode_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> QRCodeDetector_DetectMulti(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _QRCodeDetector_DetectMulti(
      self,
      input,
      points,
      rval,
    );
  }

  late final _QRCodeDetector_DetectMultiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<ffi.Bool>)>>('QRCodeDetector_DetectMulti');
  late final _QRCodeDetector_DetectMulti =
      _QRCodeDetector_DetectMultiPtr.asFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat,
              ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_DetectMulti_Async(
    QRCodeDetector self,
    Mat input,
    imp1.CvCallback_2 callback,
  ) {
    return _QRCodeDetector_DetectMulti_Async(
      self,
      input,
      callback,
    );
  }

  late final _QRCodeDetector_DetectMulti_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat,
              imp1.CvCallback_2)>>('QRCodeDetector_DetectMulti_Async');
  late final _QRCodeDetector_DetectMulti_Async =
      _QRCodeDetector_DetectMulti_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> QRCodeDetector_Detect_Async(
    QRCodeDetector self,
    Mat input,
    imp1.CvCallback_2 callback,
  ) {
    return _QRCodeDetector_Detect_Async(
      self,
      input,
      callback,
    );
  }

  late final _QRCodeDetector_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat,
              imp1.CvCallback_2)>>('QRCodeDetector_Detect_Async');
  late final _QRCodeDetector_Detect_Async =
      _QRCodeDetector_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> QRCodeDetector_New(
    ffi.Pointer<QRCodeDetector> rval,
  ) {
    return _QRCodeDetector_New(
      rval,
    );
  }

  late final _QRCodeDetector_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<QRCodeDetector>)>>('QRCodeDetector_New');
  late final _QRCodeDetector_New = _QRCodeDetector_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<QRCodeDetector>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _QRCodeDetector_New_Async(
      callback,
    );
  }

  late final _QRCodeDetector_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'QRCodeDetector_New_Async');
  late final _QRCodeDetector_New_Async = _QRCodeDetector_New_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QRCodeDetector_decodeCurved(
    QRCodeDetector self,
    Mat img,
    VecPoint points,
    ffi.Pointer<Mat> straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _QRCodeDetector_decodeCurved(
      self,
      img,
      points,
      straight_qrcode,
      rval,
    );
  }

  late final _QRCodeDetector_decodeCurvedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint,
                  ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'QRCodeDetector_decodeCurved');
  late final _QRCodeDetector_decodeCurved =
      _QRCodeDetector_decodeCurvedPtr.asFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint,
              ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_decodeCurved_Async(
    QRCodeDetector self,
    Mat img,
    VecPoint points,
    imp1.CvCallback_2 callback,
  ) {
    return _QRCodeDetector_decodeCurved_Async(
      self,
      img,
      points,
      callback,
    );
  }

  late final _QRCodeDetector_decodeCurved_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint,
              imp1.CvCallback_2)>>('QRCodeDetector_decodeCurved_Async');
  late final _QRCodeDetector_decodeCurved_Async =
      _QRCodeDetector_decodeCurved_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, VecPoint, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> QRCodeDetector_detectAndDecodeCurved(
    QRCodeDetector self,
    Mat img,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<Mat> straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _QRCodeDetector_detectAndDecodeCurved(
      self,
      img,
      points,
      straight_qrcode,
      rval,
    );
  }

  late final _QRCodeDetector_detectAndDecodeCurvedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  QRCodeDetector,
                  Mat,
                  ffi.Pointer<VecPoint>,
                  ffi.Pointer<Mat>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'QRCodeDetector_detectAndDecodeCurved');
  late final _QRCodeDetector_detectAndDecodeCurved =
      _QRCodeDetector_detectAndDecodeCurvedPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<Mat>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> QRCodeDetector_detectAndDecodeCurved_Async(
    QRCodeDetector self,
    Mat img,
    imp1.CvCallback_3 callback,
  ) {
    return _QRCodeDetector_detectAndDecodeCurved_Async(
      self,
      img,
      callback,
    );
  }

  late final _QRCodeDetector_detectAndDecodeCurved_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  QRCodeDetector, Mat, imp1.CvCallback_3)>>(
      'QRCodeDetector_detectAndDecodeCurved_Async');
  late final _QRCodeDetector_detectAndDecodeCurved_Async =
      _QRCodeDetector_detectAndDecodeCurved_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, Mat, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> QRCodeDetector_setEpsX(
    QRCodeDetector self,
    double epsX,
  ) {
    return _QRCodeDetector_setEpsX(
      self,
      epsX,
    );
  }

  late final _QRCodeDetector_setEpsXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, ffi.Double)>>('QRCodeDetector_setEpsX');
  late final _QRCodeDetector_setEpsX = _QRCodeDetector_setEpsXPtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, double)>();

  ffi.Pointer<CvStatus> QRCodeDetector_setEpsX_Async(
    QRCodeDetector self,
    double epsX,
    imp1.CvCallback_0 callback,
  ) {
    return _QRCodeDetector_setEpsX_Async(
      self,
      epsX,
      callback,
    );
  }

  late final _QRCodeDetector_setEpsX_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Double,
              imp1.CvCallback_0)>>('QRCodeDetector_setEpsX_Async');
  late final _QRCodeDetector_setEpsX_Async =
      _QRCodeDetector_setEpsX_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> QRCodeDetector_setEpsY(
    QRCodeDetector self,
    double epsY,
  ) {
    return _QRCodeDetector_setEpsY(
      self,
      epsY,
    );
  }

  late final _QRCodeDetector_setEpsYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, ffi.Double)>>('QRCodeDetector_setEpsY');
  late final _QRCodeDetector_setEpsY = _QRCodeDetector_setEpsYPtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, double)>();

  ffi.Pointer<CvStatus> QRCodeDetector_setEpsY_Async(
    QRCodeDetector self,
    double epsY,
    imp1.CvCallback_0 callback,
  ) {
    return _QRCodeDetector_setEpsY_Async(
      self,
      epsY,
      callback,
    );
  }

  late final _QRCodeDetector_setEpsY_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Double,
              imp1.CvCallback_0)>>('QRCodeDetector_setEpsY_Async');
  late final _QRCodeDetector_setEpsY_Async =
      _QRCodeDetector_setEpsY_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> QRCodeDetector_setUseAlignmentMarkers(
    QRCodeDetector self,
    bool useAlignmentMarkers,
  ) {
    return _QRCodeDetector_setUseAlignmentMarkers(
      self,
      useAlignmentMarkers,
    );
  }

  late final _QRCodeDetector_setUseAlignmentMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector,
              ffi.Bool)>>('QRCodeDetector_setUseAlignmentMarkers');
  late final _QRCodeDetector_setUseAlignmentMarkers =
      _QRCodeDetector_setUseAlignmentMarkersPtr.asFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, bool)>();

  ffi.Pointer<CvStatus> QRCodeDetector_setUseAlignmentMarkers_Async(
    QRCodeDetector self,
    bool useAlignmentMarkers,
    imp1.CvCallback_0 callback,
  ) {
    return _QRCodeDetector_setUseAlignmentMarkers_Async(
      self,
      useAlignmentMarkers,
      callback,
    );
  }

  late final _QRCodeDetector_setUseAlignmentMarkers_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  QRCodeDetector, ffi.Bool, imp1.CvCallback_0)>>(
      'QRCodeDetector_setUseAlignmentMarkers_Async');
  late final _QRCodeDetector_setUseAlignmentMarkers_Async =
      _QRCodeDetector_setUseAlignmentMarkers_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector, bool, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeObjdetect _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CascadeClassifierPtr)>>
      get CascadeClassifier_Close => _library._CascadeClassifier_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceDetectorYNPtr)>>
      get FaceDetectorYN_Close => _library._FaceDetectorYN_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceRecognizerSFPtr)>>
      get FaceRecognizerSF_Close => _library._FaceRecognizerSF_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HOGDescriptorPtr)>>
      get HOGDescriptor_Close => _library._HOGDescriptor_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QRCodeDetectorPtr)>>
      get QRCodeDetector_Close => _library._QRCodeDetector_ClosePtr;
}

final class CascadeClassifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CascadeClassifierPtr = ffi.Pointer<CascadeClassifier>;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class FaceDetectorYN extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceDetectorYNPtr = ffi.Pointer<FaceDetectorYN>;

final class FaceRecognizerSF extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceRecognizerSFPtr = ffi.Pointer<FaceRecognizerSF>;

final class HOGDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef HOGDescriptorPtr = ffi.Pointer<HOGDescriptor>;
typedef Mat = imp1.Mat;

final class QRCodeDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QRCodeDetectorPtr = ffi.Pointer<QRCodeDetector>;
typedef VecF32 = imp1.VecF32;
typedef VecF64 = imp1.VecF64;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecRect = imp1.VecRect;
typedef VecUChar = imp1.VecUChar;
typedef VecVecChar = imp1.VecVecChar;
