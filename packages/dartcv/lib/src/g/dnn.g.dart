// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Dnn
///
class CvNativeDnn {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeDnn(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeDnn.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void AsyncArray_Close(
    AsyncArrayPtr a,
  ) {
    return _AsyncArray_Close(
      a,
    );
  }

  late final _AsyncArray_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AsyncArrayPtr)>>(
          'AsyncArray_Close');
  late final _AsyncArray_Close =
      _AsyncArray_ClosePtr.asFunction<void Function(AsyncArrayPtr)>();

  ffi.Pointer<CvStatus> AsyncArray_Get(
    AsyncArray async_out,
    Mat out,
  ) {
    return _AsyncArray_Get(
      async_out,
      out,
    );
  }

  late final _AsyncArray_GetPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(AsyncArray, Mat)>>(
      'AsyncArray_Get');
  late final _AsyncArray_Get = _AsyncArray_GetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(AsyncArray, Mat)>();

  ffi.Pointer<CvStatus> AsyncArray_New(
    ffi.Pointer<AsyncArray> rval,
  ) {
    return _AsyncArray_New(
      rval,
    );
  }

  late final _AsyncArray_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<AsyncArray>)>>('AsyncArray_New');
  late final _AsyncArray_New = _AsyncArray_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<AsyncArray>)>();

  void Layer_Close(
    LayerPtr layer,
  ) {
    return _Layer_Close(
      layer,
    );
  }

  late final _Layer_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LayerPtr)>>('Layer_Close');
  late final _Layer_Close =
      _Layer_ClosePtr.asFunction<void Function(LayerPtr)>();

  void Layer_Close_Async(
    LayerPtr layer,
    imp1.CvCallback_0 callback,
  ) {
    return _Layer_Close_Async(
      layer,
      callback,
    );
  }

  late final _Layer_Close_AsyncPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LayerPtr, imp1.CvCallback_0)>>(
      'Layer_Close_Async');
  late final _Layer_Close_Async = _Layer_Close_AsyncPtr.asFunction<
      void Function(LayerPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Layer_GetName(
    Layer layer,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _Layer_GetName(
      layer,
      rval,
    );
  }

  late final _Layer_GetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Layer_GetName');
  late final _Layer_GetName = _Layer_GetNamePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> Layer_GetName_Async(
    Layer layer,
    imp1.CvCallback_1 callback,
  ) {
    return _Layer_GetName_Async(
      layer,
      callback,
    );
  }

  late final _Layer_GetName_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Layer, imp1.CvCallback_1)>>('Layer_GetName_Async');
  late final _Layer_GetName_Async = _Layer_GetName_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Layer, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Layer_GetType(
    Layer layer,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _Layer_GetType(
      layer,
      rval,
    );
  }

  late final _Layer_GetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Layer_GetType');
  late final _Layer_GetType = _Layer_GetTypePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> Layer_GetType_Async(
    Layer layer,
    imp1.CvCallback_1 callback,
  ) {
    return _Layer_GetType_Async(
      layer,
      callback,
    );
  }

  late final _Layer_GetType_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Layer, imp1.CvCallback_1)>>('Layer_GetType_Async');
  late final _Layer_GetType_Async = _Layer_GetType_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Layer, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Layer_InputNameToIndex(
    Layer layer,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Layer_InputNameToIndex(
      layer,
      name,
      rval,
    );
  }

  late final _Layer_InputNameToIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('Layer_InputNameToIndex');
  late final _Layer_InputNameToIndex = _Layer_InputNameToIndexPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Layer_InputNameToIndex_Async(
    Layer layer,
    ffi.Pointer<ffi.Char> name,
    imp1.CvCallback_1 callback,
  ) {
    return _Layer_InputNameToIndex_Async(
      layer,
      name,
      callback,
    );
  }

  late final _Layer_InputNameToIndex_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Layer_InputNameToIndex_Async');
  late final _Layer_InputNameToIndex_Async =
      _Layer_InputNameToIndex_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Layer, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Layer_OutputNameToIndex(
    Layer layer,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Layer_OutputNameToIndex(
      layer,
      name,
      rval,
    );
  }

  late final _Layer_OutputNameToIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('Layer_OutputNameToIndex');
  late final _Layer_OutputNameToIndex = _Layer_OutputNameToIndexPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Layer_OutputNameToIndex_Async(
    Layer layer,
    ffi.Pointer<ffi.Char> name,
    imp1.CvCallback_1 callback,
  ) {
    return _Layer_OutputNameToIndex_Async(
      layer,
      name,
      callback,
    );
  }

  late final _Layer_OutputNameToIndex_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Layer_OutputNameToIndex_Async');
  late final _Layer_OutputNameToIndex_Async =
      _Layer_OutputNameToIndex_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Layer, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> NMSBoxes(
    VecRect bboxes,
    VecF32 scores,
    double score_threshold,
    double nms_threshold,
    ffi.Pointer<VecI32> indices,
  ) {
    return _NMSBoxes(
      bboxes,
      scores,
      score_threshold,
      nms_threshold,
      indices,
    );
  }

  late final _NMSBoxesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecRect, VecF32, ffi.Float, ffi.Float,
              ffi.Pointer<VecI32>)>>('NMSBoxes');
  late final _NMSBoxes = _NMSBoxesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecRect, VecF32, double, double, ffi.Pointer<VecI32>)>();

  ffi.Pointer<CvStatus> NMSBoxesWithParams(
    VecRect bboxes,
    VecF32 scores,
    double score_threshold,
    double nms_threshold,
    ffi.Pointer<VecI32> indices,
    double eta,
    int top_k,
  ) {
    return _NMSBoxesWithParams(
      bboxes,
      scores,
      score_threshold,
      nms_threshold,
      indices,
      eta,
      top_k,
    );
  }

  late final _NMSBoxesWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecRect, VecF32, ffi.Float, ffi.Float,
              ffi.Pointer<VecI32>, ffi.Float, ffi.Int)>>('NMSBoxesWithParams');
  late final _NMSBoxesWithParams = _NMSBoxesWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecRect, VecF32, double, double, ffi.Pointer<VecI32>, double, int)>();

  ffi.Pointer<CvStatus> NMSBoxesWithParams_Async(
    VecRect bboxes,
    VecF32 scores,
    double score_threshold,
    double nms_threshold,
    double eta,
    int top_k,
    imp1.CvCallback_1 callback,
  ) {
    return _NMSBoxesWithParams_Async(
      bboxes,
      scores,
      score_threshold,
      nms_threshold,
      eta,
      top_k,
      callback,
    );
  }

  late final _NMSBoxesWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecRect,
              VecF32,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              imp1.CvCallback_1)>>('NMSBoxesWithParams_Async');
  late final _NMSBoxesWithParams_Async =
      _NMSBoxesWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecRect, VecF32, double, double,
              double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> NMSBoxes_Async(
    VecRect bboxes,
    VecF32 scores,
    double score_threshold,
    double nms_threshold,
    imp1.CvCallback_1 callback,
  ) {
    return _NMSBoxes_Async(
      bboxes,
      scores,
      score_threshold,
      nms_threshold,
      callback,
    );
  }

  late final _NMSBoxes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecRect, VecF32, ffi.Float, ffi.Float,
              imp1.CvCallback_1)>>('NMSBoxes_Async');
  late final _NMSBoxes_Async = _NMSBoxes_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecRect, VecF32, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_BlobFromImage(
    Mat image,
    Mat blob,
    double scalefactor,
    CvSize size,
    Scalar mean,
    bool swapRB,
    bool crop,
    int ddepth,
  ) {
    return _Net_BlobFromImage(
      image,
      blob,
      scalefactor,
      size,
      mean,
      swapRB,
      crop,
      ddepth,
    );
  }

  late final _Net_BlobFromImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, CvSize, Scalar,
              ffi.Bool, ffi.Bool, ffi.Int)>>('Net_BlobFromImage');
  late final _Net_BlobFromImage = _Net_BlobFromImagePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, CvSize, Scalar, bool, bool, int)>();

  ffi.Pointer<CvStatus> Net_BlobFromImage_Async(
    Mat image,
    double scalefactor,
    CvSize size,
    Scalar mean,
    bool swapRB,
    bool crop,
    int ddepth,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_BlobFromImage_Async(
      image,
      scalefactor,
      size,
      mean,
      swapRB,
      crop,
      ddepth,
      callback,
    );
  }

  late final _Net_BlobFromImage_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Double,
              CvSize,
              Scalar,
              ffi.Bool,
              ffi.Bool,
              ffi.Int,
              imp1.CvCallback_1)>>('Net_BlobFromImage_Async');
  late final _Net_BlobFromImage_Async = _Net_BlobFromImage_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, double, CvSize, Scalar, bool, bool, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_BlobFromImages(
    VecMat images,
    Mat blob,
    double scalefactor,
    CvSize size,
    Scalar mean,
    bool swapRB,
    bool crop,
    int ddepth,
  ) {
    return _Net_BlobFromImages(
      images,
      blob,
      scalefactor,
      size,
      mean,
      swapRB,
      crop,
      ddepth,
    );
  }

  late final _Net_BlobFromImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Double, CvSize,
              Scalar, ffi.Bool, ffi.Bool, ffi.Int)>>('Net_BlobFromImages');
  late final _Net_BlobFromImages = _Net_BlobFromImagesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecMat, Mat, double, CvSize, Scalar, bool, bool, int)>();

  ffi.Pointer<CvStatus> Net_BlobFromImages_Async(
    VecMat images,
    double scalefactor,
    CvSize size,
    Scalar mean,
    bool swapRB,
    bool crop,
    int ddepth,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_BlobFromImages_Async(
      images,
      scalefactor,
      size,
      mean,
      swapRB,
      crop,
      ddepth,
      callback,
    );
  }

  late final _Net_BlobFromImages_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat,
              ffi.Double,
              CvSize,
              Scalar,
              ffi.Bool,
              ffi.Bool,
              ffi.Int,
              imp1.CvCallback_1)>>('Net_BlobFromImages_Async');
  late final _Net_BlobFromImages_Async =
      _Net_BlobFromImages_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecMat, double, CvSize, Scalar, bool,
              bool, int, imp1.CvCallback_1)>();

  void Net_Close(
    NetPtr net,
  ) {
    return _Net_Close(
      net,
    );
  }

  late final _Net_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NetPtr)>>('Net_Close');
  late final _Net_Close = _Net_ClosePtr.asFunction<void Function(NetPtr)>();

  void Net_Close_Async(
    NetPtr net,
    imp1.CvCallback_0 callback,
  ) {
    return _Net_Close_Async(
      net,
      callback,
    );
  }

  late final _Net_Close_AsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NetPtr, imp1.CvCallback_0)>>(
          'Net_Close_Async');
  late final _Net_Close_Async = _Net_Close_AsyncPtr.asFunction<
      void Function(NetPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Net_Create(
    ffi.Pointer<Net> rval,
  ) {
    return _Net_Create(
      rval,
    );
  }

  late final _Net_CreatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Net>)>>(
      'Net_Create');
  late final _Net_Create = _Net_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _Net_Create_Async(
      callback,
    );
  }

  late final _Net_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'Net_Create_Async');
  late final _Net_Create_Async = _Net_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_Dump(
    Net net,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _Net_Dump(
      net,
      rval,
    );
  }

  late final _Net_DumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Net_Dump');
  late final _Net_Dump = _Net_DumpPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Net, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> Net_Dump_Async(
    Net net,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_Dump_Async(
      net,
      callback,
    );
  }

  late final _Net_Dump_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_1)>>('Net_Dump_Async');
  late final _Net_Dump_Async = _Net_Dump_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_Empty(
    Net net,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _Net_Empty(
      net,
      rval,
    );
  }

  late final _Net_EmptyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<ffi.Bool>)>>('Net_Empty');
  late final _Net_Empty = _Net_EmptyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> Net_Empty_Async(
    Net net,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_Empty_Async(
      net,
      callback,
    );
  }

  late final _Net_Empty_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_1)>>('Net_Empty_Async');
  late final _Net_Empty_Async = _Net_Empty_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_Forward(
    Net net,
    ffi.Pointer<ffi.Char> outputName,
    ffi.Pointer<Mat> rval,
  ) {
    return _Net_Forward(
      net,
      outputName,
      rval,
    );
  }

  late final _Net_ForwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<ffi.Char>, ffi.Pointer<Mat>)>>('Net_Forward');
  late final _Net_Forward = _Net_ForwardPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Net, ffi.Pointer<ffi.Char>, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Net_ForwardLayers(
    Net net,
    ffi.Pointer<VecMat> outputBlobs,
    VecVecChar outBlobNames,
  ) {
    return _Net_ForwardLayers(
      net,
      outputBlobs,
      outBlobNames,
    );
  }

  late final _Net_ForwardLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<VecMat>, VecVecChar)>>('Net_ForwardLayers');
  late final _Net_ForwardLayers = _Net_ForwardLayersPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecMat>, VecVecChar)>();

  ffi.Pointer<CvStatus> Net_ForwardLayers_Async(
    Net net,
    VecVecChar outBlobNames,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ForwardLayers_Async(
      net,
      outBlobNames,
      callback,
    );
  }

  late final _Net_ForwardLayers_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, VecVecChar, imp1.CvCallback_1)>>('Net_ForwardLayers_Async');
  late final _Net_ForwardLayers_Async = _Net_ForwardLayers_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, VecVecChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_Forward_Async(
    Net net,
    ffi.Pointer<ffi.Char> outputName,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_Forward_Async(
      net,
      outputName,
      callback,
    );
  }

  late final _Net_Forward_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Net_Forward_Async');
  late final _Net_Forward_Async = _Net_Forward_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Net, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_FromNet(
    Net net,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_FromNet(
      net,
      rval,
    );
  }

  late final _Net_FromNetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<Net>)>>('Net_FromNet');
  late final _Net_FromNet = _Net_FromNetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_FromNet_Async(
    Net net,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_FromNet_Async(
      net,
      callback,
    );
  }

  late final _Net_FromNet_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_1)>>('Net_FromNet_Async');
  late final _Net_FromNet_Async = _Net_FromNet_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_GetBlobChannel(
    Mat blob,
    int imgidx,
    int chnidx,
    ffi.Pointer<Mat> rval,
  ) {
    return _Net_GetBlobChannel(
      blob,
      imgidx,
      chnidx,
      rval,
    );
  }

  late final _Net_GetBlobChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>>('Net_GetBlobChannel');
  late final _Net_GetBlobChannel = _Net_GetBlobChannelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> Net_GetBlobChannel_Async(
    Mat blob,
    int imgidx,
    int chnidx,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_GetBlobChannel_Async(
      blob,
      imgidx,
      chnidx,
      callback,
    );
  }

  late final _Net_GetBlobChannel_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('Net_GetBlobChannel_Async');
  late final _Net_GetBlobChannel_Async =
      _Net_GetBlobChannel_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_GetBlobSize(
    Mat blob,
    ffi.Pointer<Scalar> rval,
  ) {
    return _Net_GetBlobSize(
      blob,
      rval,
    );
  }

  late final _Net_GetBlobSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>)>>('Net_GetBlobSize');
  late final _Net_GetBlobSize = _Net_GetBlobSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> Net_GetBlobSize_Async(
    Mat blob,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_GetBlobSize_Async(
      blob,
      callback,
    );
  }

  late final _Net_GetBlobSize_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('Net_GetBlobSize_Async');
  late final _Net_GetBlobSize_Async = _Net_GetBlobSize_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_GetInputDetails(
    Net net,
    ffi.Pointer<VecF32> scales,
    ffi.Pointer<VecI32> zeropoints,
  ) {
    return _Net_GetInputDetails(
      net,
      scales,
      zeropoints,
    );
  }

  late final _Net_GetInputDetailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecF32>,
              ffi.Pointer<VecI32>)>>('Net_GetInputDetails');
  late final _Net_GetInputDetails = _Net_GetInputDetailsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Net, ffi.Pointer<VecF32>, ffi.Pointer<VecI32>)>();

  ffi.Pointer<CvStatus> Net_GetInputDetails_Async(
    Net net,
    imp1.CvCallback_2 callback,
  ) {
    return _Net_GetInputDetails_Async(
      net,
      callback,
    );
  }

  late final _Net_GetInputDetails_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_2)>>('Net_GetInputDetails_Async');
  late final _Net_GetInputDetails_Async = _Net_GetInputDetails_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> Net_GetLayer(
    Net net,
    int layerid,
    ffi.Pointer<Layer> rval,
  ) {
    return _Net_GetLayer(
      net,
      layerid,
      rval,
    );
  }

  late final _Net_GetLayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Int, ffi.Pointer<Layer>)>>('Net_GetLayer');
  late final _Net_GetLayer = _Net_GetLayerPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, int, ffi.Pointer<Layer>)>();

  ffi.Pointer<CvStatus> Net_GetLayerNames(
    Net net,
    ffi.Pointer<VecVecChar> rval,
  ) {
    return _Net_GetLayerNames(
      net,
      rval,
    );
  }

  late final _Net_GetLayerNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<VecVecChar>)>>('Net_GetLayerNames');
  late final _Net_GetLayerNames = _Net_GetLayerNamesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<CvStatus> Net_GetLayerNames_Async(
    Net net,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_GetLayerNames_Async(
      net,
      callback,
    );
  }

  late final _Net_GetLayerNames_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_1)>>('Net_GetLayerNames_Async');
  late final _Net_GetLayerNames_Async = _Net_GetLayerNames_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_GetLayer_Async(
    Net net,
    int layerid,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_GetLayer_Async(
      net,
      layerid,
      callback,
    );
  }

  late final _Net_GetLayer_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Int, imp1.CvCallback_1)>>('Net_GetLayer_Async');
  late final _Net_GetLayer_Async = _Net_GetLayer_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_GetPerfProfile(
    Net net,
    ffi.Pointer<ffi.Int64> rval,
  ) {
    return _Net_GetPerfProfile(
      net,
      rval,
    );
  }

  late final _Net_GetPerfProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<ffi.Int64>)>>('Net_GetPerfProfile');
  late final _Net_GetPerfProfile = _Net_GetPerfProfilePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Int64>)>();

  ffi.Pointer<CvStatus> Net_GetPerfProfile_Async(
    Net net,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_GetPerfProfile_Async(
      net,
      callback,
    );
  }

  late final _Net_GetPerfProfile_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_1)>>('Net_GetPerfProfile_Async');
  late final _Net_GetPerfProfile_Async = _Net_GetPerfProfile_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_GetUnconnectedOutLayers(
    Net net,
    ffi.Pointer<VecI32> rval,
  ) {
    return _Net_GetUnconnectedOutLayers(
      net,
      rval,
    );
  }

  late final _Net_GetUnconnectedOutLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, ffi.Pointer<VecI32>)>>('Net_GetUnconnectedOutLayers');
  late final _Net_GetUnconnectedOutLayers = _Net_GetUnconnectedOutLayersPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecI32>)>();

  ffi.Pointer<CvStatus> Net_GetUnconnectedOutLayers_Async(
    Net net,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_GetUnconnectedOutLayers_Async(
      net,
      callback,
    );
  }

  late final _Net_GetUnconnectedOutLayers_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, imp1.CvCallback_1)>>('Net_GetUnconnectedOutLayers_Async');
  late final _Net_GetUnconnectedOutLayers_Async =
      _Net_GetUnconnectedOutLayers_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ImagesFromBlob(
    Mat blob,
    ffi.Pointer<VecMat> rval,
  ) {
    return _Net_ImagesFromBlob(
      blob,
      rval,
    );
  }

  late final _Net_ImagesFromBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<VecMat>)>>('Net_ImagesFromBlob');
  late final _Net_ImagesFromBlob = _Net_ImagesFromBlobPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>)>();

  ffi.Pointer<CvStatus> Net_ImagesFromBlob_Async(
    Mat blob,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ImagesFromBlob_Async(
      blob,
      callback,
    );
  }

  late final _Net_ImagesFromBlob_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('Net_ImagesFromBlob_Async');
  late final _Net_ImagesFromBlob_Async = _Net_ImagesFromBlob_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNet(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    ffi.Pointer<ffi.Char> framework,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNet(
      model,
      config,
      framework,
      rval,
    );
  }

  late final _Net_ReadNetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<Net>)>>('Net_ReadNet');
  late final _Net_ReadNet = _Net_ReadNetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetBytes(
    ffi.Pointer<ffi.Char> framework,
    VecUChar model,
    VecUChar config,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetBytes(
      framework,
      model,
      config,
      rval,
    );
  }

  late final _Net_ReadNetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, VecUChar,
              VecUChar, ffi.Pointer<Net>)>>('Net_ReadNetBytes');
  late final _Net_ReadNetBytes = _Net_ReadNetBytesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, VecUChar, VecUChar, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetBytes_Async(
    ffi.Pointer<ffi.Char> framework,
    VecUChar model,
    VecUChar config,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetBytes_Async(
      framework,
      model,
      config,
      callback,
    );
  }

  late final _Net_ReadNetBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, VecUChar,
              VecUChar, imp1.CvCallback_1)>>('Net_ReadNetBytes_Async');
  late final _Net_ReadNetBytes_Async = _Net_ReadNetBytes_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, VecUChar, VecUChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromCaffe(
    ffi.Pointer<ffi.Char> prototxt,
    ffi.Pointer<ffi.Char> caffeModel,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromCaffe(
      prototxt,
      caffeModel,
      rval,
    );
  }

  late final _Net_ReadNetFromCaffePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<Net>)>>('Net_ReadNetFromCaffe');
  late final _Net_ReadNetFromCaffe = _Net_ReadNetFromCaffePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromCaffeBytes(
    VecUChar prototxt,
    VecUChar caffeModel,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromCaffeBytes(
      prototxt,
      caffeModel,
      rval,
    );
  }

  late final _Net_ReadNetFromCaffeBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecUChar, VecUChar,
              ffi.Pointer<Net>)>>('Net_ReadNetFromCaffeBytes');
  late final _Net_ReadNetFromCaffeBytes =
      _Net_ReadNetFromCaffeBytesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, VecUChar, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromCaffeBytes_Async(
    VecUChar prototxt,
    VecUChar caffeModel,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromCaffeBytes_Async(
      prototxt,
      caffeModel,
      callback,
    );
  }

  late final _Net_ReadNetFromCaffeBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecUChar, VecUChar,
              imp1.CvCallback_1)>>('Net_ReadNetFromCaffeBytes_Async');
  late final _Net_ReadNetFromCaffeBytes_Async =
      _Net_ReadNetFromCaffeBytes_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, VecUChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromCaffe_Async(
    ffi.Pointer<ffi.Char> prototxt,
    ffi.Pointer<ffi.Char> caffeModel,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromCaffe_Async(
      prototxt,
      caffeModel,
      callback,
    );
  }

  late final _Net_ReadNetFromCaffe_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Net_ReadNetFromCaffe_Async');
  late final _Net_ReadNetFromCaffe_Async =
      _Net_ReadNetFromCaffe_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromONNX(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromONNX(
      model,
      rval,
    );
  }

  late final _Net_ReadNetFromONNXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>>('Net_ReadNetFromONNX');
  late final _Net_ReadNetFromONNX = _Net_ReadNetFromONNXPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromONNXBytes(
    VecUChar model,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromONNXBytes(
      model,
      rval,
    );
  }

  late final _Net_ReadNetFromONNXBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, ffi.Pointer<Net>)>>('Net_ReadNetFromONNXBytes');
  late final _Net_ReadNetFromONNXBytes = _Net_ReadNetFromONNXBytesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromONNXBytes_Async(
    VecUChar model,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromONNXBytes_Async(
      model,
      callback,
    );
  }

  late final _Net_ReadNetFromONNXBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, imp1.CvCallback_1)>>('Net_ReadNetFromONNXBytes_Async');
  late final _Net_ReadNetFromONNXBytes_Async =
      _Net_ReadNetFromONNXBytes_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecUChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromONNX_Async(
    ffi.Pointer<ffi.Char> model,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromONNX_Async(
      model,
      callback,
    );
  }

  late final _Net_ReadNetFromONNX_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Net_ReadNetFromONNX_Async');
  late final _Net_ReadNetFromONNX_Async =
      _Net_ReadNetFromONNX_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTFLite(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromTFLite(
      model,
      rval,
    );
  }

  late final _Net_ReadNetFromTFLitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<Net>)>>('Net_ReadNetFromTFLite');
  late final _Net_ReadNetFromTFLite = _Net_ReadNetFromTFLitePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTFLiteBytes(
    VecUChar bufferModel,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromTFLiteBytes(
      bufferModel,
      rval,
    );
  }

  late final _Net_ReadNetFromTFLiteBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, ffi.Pointer<Net>)>>('Net_ReadNetFromTFLiteBytes');
  late final _Net_ReadNetFromTFLiteBytes = _Net_ReadNetFromTFLiteBytesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTFLiteBytes_Async(
    VecUChar bufferModel,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromTFLiteBytes_Async(
      bufferModel,
      callback,
    );
  }

  late final _Net_ReadNetFromTFLiteBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecUChar,
              imp1.CvCallback_1)>>('Net_ReadNetFromTFLiteBytes_Async');
  late final _Net_ReadNetFromTFLiteBytes_Async =
      _Net_ReadNetFromTFLiteBytes_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VecUChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTFLite_Async(
    ffi.Pointer<ffi.Char> model,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromTFLite_Async(
      model,
      callback,
    );
  }

  late final _Net_ReadNetFromTFLite_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Net_ReadNetFromTFLite_Async');
  late final _Net_ReadNetFromTFLite_Async =
      _Net_ReadNetFromTFLite_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTensorflow(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromTensorflow(
      model,
      config,
      rval,
    );
  }

  late final _Net_ReadNetFromTensorflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<Net>)>>('Net_ReadNetFromTensorflow');
  late final _Net_ReadNetFromTensorflow =
      _Net_ReadNetFromTensorflowPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTensorflowBytes(
    VecUChar model,
    VecUChar config,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromTensorflowBytes(
      model,
      config,
      rval,
    );
  }

  late final _Net_ReadNetFromTensorflowBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecUChar, VecUChar,
              ffi.Pointer<Net>)>>('Net_ReadNetFromTensorflowBytes');
  late final _Net_ReadNetFromTensorflowBytes =
      _Net_ReadNetFromTensorflowBytesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, VecUChar, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTensorflowBytes_Async(
    VecUChar model,
    VecUChar config,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromTensorflowBytes_Async(
      model,
      config,
      callback,
    );
  }

  late final _Net_ReadNetFromTensorflowBytes_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecUChar, VecUChar,
              imp1.CvCallback_1)>>('Net_ReadNetFromTensorflowBytes_Async');
  late final _Net_ReadNetFromTensorflowBytes_Async =
      _Net_ReadNetFromTensorflowBytes_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, VecUChar, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTensorflow_Async(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromTensorflow_Async(
      model,
      config,
      callback,
    );
  }

  late final _Net_ReadNetFromTensorflow_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Net_ReadNetFromTensorflow_Async');
  late final _Net_ReadNetFromTensorflow_Async =
      _Net_ReadNetFromTensorflow_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTorch(
    ffi.Pointer<ffi.Char> model,
    bool isBinary,
    bool evaluate,
    ffi.Pointer<Net> rval,
  ) {
    return _Net_ReadNetFromTorch(
      model,
      isBinary,
      evaluate,
      rval,
    );
  }

  late final _Net_ReadNetFromTorchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Bool,
              ffi.Bool, ffi.Pointer<Net>)>>('Net_ReadNetFromTorch');
  late final _Net_ReadNetFromTorch = _Net_ReadNetFromTorchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, bool, bool, ffi.Pointer<Net>)>();

  ffi.Pointer<CvStatus> Net_ReadNetFromTorch_Async(
    ffi.Pointer<ffi.Char> model,
    bool isBinary,
    bool evaluate,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNetFromTorch_Async(
      model,
      isBinary,
      evaluate,
      callback,
    );
  }

  late final _Net_ReadNetFromTorch_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Bool,
              ffi.Bool, imp1.CvCallback_1)>>('Net_ReadNetFromTorch_Async');
  late final _Net_ReadNetFromTorch_Async =
      _Net_ReadNetFromTorch_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, bool, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_ReadNet_Async(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    ffi.Pointer<ffi.Char> framework,
    imp1.CvCallback_1 callback,
  ) {
    return _Net_ReadNet_Async(
      model,
      config,
      framework,
      callback,
    );
  }

  late final _Net_ReadNet_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('Net_ReadNet_Async');
  late final _Net_ReadNet_Async = _Net_ReadNet_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> Net_SetInput(
    Net net,
    Mat blob,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _Net_SetInput(
      net,
      blob,
      name,
    );
  }

  late final _Net_SetInputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Net, Mat, ffi.Pointer<ffi.Char>)>>('Net_SetInput');
  late final _Net_SetInput = _Net_SetInputPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, Mat, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> Net_SetInput_Async(
    Net net,
    Mat blob,
    ffi.Pointer<ffi.Char> name,
    imp1.CvCallback_0 callback,
  ) {
    return _Net_SetInput_Async(
      net,
      blob,
      name,
      callback,
    );
  }

  late final _Net_SetInput_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Net, Mat, ffi.Pointer<ffi.Char>,
              imp1.CvCallback_0)>>('Net_SetInput_Async');
  late final _Net_SetInput_Async = _Net_SetInput_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Net, Mat, ffi.Pointer<ffi.Char>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Net_SetPreferableBackend(
    Net net,
    int backend,
  ) {
    return _Net_SetPreferableBackend(
      net,
      backend,
    );
  }

  late final _Net_SetPreferableBackendPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Net, ffi.Int)>>(
          'Net_SetPreferableBackend');
  late final _Net_SetPreferableBackend = _Net_SetPreferableBackendPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Net, int)>();

  ffi.Pointer<CvStatus> Net_SetPreferableBackend_Async(
    Net net,
    int backend,
    imp1.CvCallback_0 callback,
  ) {
    return _Net_SetPreferableBackend_Async(
      net,
      backend,
      callback,
    );
  }

  late final _Net_SetPreferableBackend_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Net, ffi.Int,
              imp1.CvCallback_0)>>('Net_SetPreferableBackend_Async');
  late final _Net_SetPreferableBackend_Async =
      _Net_SetPreferableBackend_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Net, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Net_SetPreferableTarget(
    Net net,
    int target,
  ) {
    return _Net_SetPreferableTarget(
      net,
      target,
    );
  }

  late final _Net_SetPreferableTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Net, ffi.Int)>>(
          'Net_SetPreferableTarget');
  late final _Net_SetPreferableTarget = _Net_SetPreferableTargetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Net, int)>();

  ffi.Pointer<CvStatus> Net_SetPreferableTarget_Async(
    Net net,
    int target,
    imp1.CvCallback_0 callback,
  ) {
    return _Net_SetPreferableTarget_Async(
      net,
      target,
      callback,
    );
  }

  late final _Net_SetPreferableTarget_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Net, ffi.Int,
              imp1.CvCallback_0)>>('Net_SetPreferableTarget_Async');
  late final _Net_SetPreferableTarget_Async =
      _Net_SetPreferableTarget_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Net, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> Net_forwardAsync(
    Net net,
    ffi.Pointer<ffi.Char> outputName,
    ffi.Pointer<AsyncArray> rval,
  ) {
    return _Net_forwardAsync(
      net,
      outputName,
      rval,
    );
  }

  late final _Net_forwardAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Char>,
              ffi.Pointer<AsyncArray>)>>('Net_forwardAsync');
  late final _Net_forwardAsync = _Net_forwardAsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Net, ffi.Pointer<ffi.Char>, ffi.Pointer<AsyncArray>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeDnn _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AsyncArrayPtr)>>
      get AsyncArray_Close => _library._AsyncArray_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(LayerPtr)>>
      get Layer_Close => _library._Layer_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(LayerPtr, imp1.CvCallback_0)>>
      get Layer_Close_Async => _library._Layer_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(NetPtr)>> get Net_Close =>
      _library._Net_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(NetPtr, imp1.CvCallback_0)>>
      get Net_Close_Async => _library._Net_Close_AsyncPtr;
}

final class AsyncArray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AsyncArrayPtr = ffi.Pointer<AsyncArray>;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class Layer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef LayerPtr = ffi.Pointer<Layer>;
typedef Mat = imp1.Mat;

final class Net extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef NetPtr = ffi.Pointer<Net>;
typedef Scalar = imp1.Scalar;
typedef VecF32 = imp1.VecF32;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecRect = imp1.VecRect;
typedef VecUChar = imp1.VecUChar;
typedef VecVecChar = imp1.VecVecChar;
