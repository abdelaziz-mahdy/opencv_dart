// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Highgui
///
class CvNativeHighgui {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeHighgui(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeHighgui.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> Trackbar_Create(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int max,
  ) {
    return _Trackbar_Create(
      winname,
      trackname,
      max,
    );
  }

  late final _Trackbar_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Trackbar_Create');
  late final _Trackbar_Create = _Trackbar_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> Trackbar_CreateWithValue(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Int> value,
    int max,
  ) {
    return _Trackbar_CreateWithValue(
      winname,
      trackname,
      value,
      max,
    );
  }

  late final _Trackbar_CreateWithValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('Trackbar_CreateWithValue');
  late final _Trackbar_CreateWithValue =
      _Trackbar_CreateWithValuePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<CvStatus> Trackbar_GetPos(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Trackbar_GetPos(
      winname,
      trackname,
      rval,
    );
  }

  late final _Trackbar_GetPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('Trackbar_GetPos');
  late final _Trackbar_GetPos = _Trackbar_GetPosPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> Trackbar_SetMax(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int pos,
  ) {
    return _Trackbar_SetMax(
      winname,
      trackname,
      pos,
    );
  }

  late final _Trackbar_SetMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Trackbar_SetMax');
  late final _Trackbar_SetMax = _Trackbar_SetMaxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> Trackbar_SetMin(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int pos,
  ) {
    return _Trackbar_SetMin(
      winname,
      trackname,
      pos,
    );
  }

  late final _Trackbar_SetMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Trackbar_SetMin');
  late final _Trackbar_SetMin = _Trackbar_SetMinPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> Trackbar_SetPos(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int pos,
  ) {
    return _Trackbar_SetPos(
      winname,
      trackname,
      pos,
    );
  }

  late final _Trackbar_SetPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Trackbar_SetPos');
  late final _Trackbar_SetPos = _Trackbar_SetPosPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void Window_Close(
    ffi.Pointer<ffi.Char> winname,
  ) {
    return _Window_Close(
      winname,
    );
  }

  late final _Window_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'Window_Close');
  late final _Window_Close =
      _Window_ClosePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> Window_GetProperty(
    ffi.Pointer<ffi.Char> winname,
    int flag,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _Window_GetProperty(
      winname,
      flag,
      rval,
    );
  }

  late final _Window_GetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('Window_GetProperty');
  late final _Window_GetProperty = _Window_GetPropertyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> Window_IMShow(
    ffi.Pointer<ffi.Char> winname,
    Mat mat,
  ) {
    return _Window_IMShow(
      winname,
      mat,
    );
  }

  late final _Window_IMShowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, Mat)>>('Window_IMShow');
  late final _Window_IMShow = _Window_IMShowPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat)>();

  ffi.Pointer<CvStatus> Window_Move(
    ffi.Pointer<ffi.Char> winname,
    int x,
    int y,
  ) {
    return _Window_Move(
      winname,
      x,
      y,
    );
  }

  late final _Window_MovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('Window_Move');
  late final _Window_Move = _Window_MovePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<CvStatus> Window_New(
    ffi.Pointer<ffi.Char> winname,
    int flags,
  ) {
    return _Window_New(
      winname,
      flags,
    );
  }

  late final _Window_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Window_New');
  late final _Window_New = _Window_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> Window_Resize(
    ffi.Pointer<ffi.Char> winname,
    int width,
    int height,
  ) {
    return _Window_Resize(
      winname,
      width,
      height,
    );
  }

  late final _Window_ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('Window_Resize');
  late final _Window_Resize = _Window_ResizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<CvStatus> Window_SelectROI(
    ffi.Pointer<ffi.Char> winname,
    Mat img,
    ffi.Pointer<CvRect> rval,
  ) {
    return _Window_SelectROI(
      winname,
      img,
      rval,
    );
  }

  late final _Window_SelectROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat,
              ffi.Pointer<CvRect>)>>('Window_SelectROI');
  late final _Window_SelectROI = _Window_SelectROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> Window_SelectROIs(
    ffi.Pointer<ffi.Char> winname,
    Mat img,
    ffi.Pointer<VecRect> rval,
  ) {
    return _Window_SelectROIs(
      winname,
      img,
      rval,
    );
  }

  late final _Window_SelectROIsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat,
              ffi.Pointer<VecRect>)>>('Window_SelectROIs');
  late final _Window_SelectROIs = _Window_SelectROIsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecRect>)>();

  ffi.Pointer<CvStatus> Window_SetProperty(
    ffi.Pointer<ffi.Char> winname,
    int flag,
    double value,
  ) {
    return _Window_SetProperty(
      winname,
      flag,
      value,
    );
  }

  late final _Window_SetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Double)>>('Window_SetProperty');
  late final _Window_SetProperty = _Window_SetPropertyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, double)>();

  ffi.Pointer<CvStatus> Window_SetTitle(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _Window_SetTitle(
      winname,
      title,
    );
  }

  late final _Window_SetTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Window_SetTitle');
  late final _Window_SetTitle = _Window_SetTitlePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> Window_WaitKey(
    int delay,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _Window_WaitKey(
      delay,
      rval,
    );
  }

  late final _Window_WaitKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Pointer<ffi.Int>)>>('Window_WaitKey');
  late final _Window_WaitKey = _Window_WaitKeyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> destroyAllWindows() {
    return _destroyAllWindows();
  }

  late final _destroyAllWindowsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function()>>(
          'destroyAllWindows');
  late final _destroyAllWindows =
      _destroyAllWindowsPtr.asFunction<ffi.Pointer<CvStatus> Function()>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeHighgui _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      get Window_Close => _library._Window_ClosePtr;
}

typedef CvRect = imp1.CvRect;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef VecRect = imp1.VecRect;
