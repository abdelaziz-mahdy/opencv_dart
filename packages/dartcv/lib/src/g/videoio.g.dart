// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - VideoIO
///
class CvNativeVideoIO {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeVideoIO(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeVideoIO.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void VideoCapture_Close(
    VideoCapturePtr self,
  ) {
    return _VideoCapture_Close(
      self,
    );
  }

  late final _VideoCapture_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VideoCapturePtr)>>(
          'VideoCapture_Close');
  late final _VideoCapture_Close =
      _VideoCapture_ClosePtr.asFunction<void Function(VideoCapturePtr)>();

  ffi.Pointer<CvStatus> VideoCapture_Get(
    VideoCapture self,
    int prop,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _VideoCapture_Get(
      self,
      prop,
      rval,
    );
  }

  late final _VideoCapture_GetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('VideoCapture_Get');
  late final _VideoCapture_Get = _VideoCapture_GetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoCapture, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> VideoCapture_Get_Async(
    VideoCapture self,
    int prop,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_Get_Async(
      self,
      prop,
      callback,
    );
  }

  late final _VideoCapture_Get_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int,
              imp1.CvCallback_1)>>('VideoCapture_Get_Async');
  late final _VideoCapture_Get_Async = _VideoCapture_Get_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_Grab(
    VideoCapture self,
    int skip,
  ) {
    return _VideoCapture_Grab(
      self,
      skip,
    );
  }

  late final _VideoCapture_GrabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, ffi.Int)>>('VideoCapture_Grab');
  late final _VideoCapture_Grab = _VideoCapture_GrabPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture, int)>();

  ffi.Pointer<CvStatus> VideoCapture_Grab_Async(
    VideoCapture self,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_Grab_Async(
      self,
      callback,
    );
  }

  late final _VideoCapture_Grab_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, imp1.CvCallback_1)>>('VideoCapture_Grab_Async');
  late final _VideoCapture_Grab_Async = _VideoCapture_Grab_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_IsOpened(
    VideoCapture self,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _VideoCapture_IsOpened(
      self,
      rval,
    );
  }

  late final _VideoCapture_IsOpenedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, ffi.Pointer<ffi.Int>)>>('VideoCapture_IsOpened');
  late final _VideoCapture_IsOpened = _VideoCapture_IsOpenedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> VideoCapture_IsOpened_Async(
    VideoCapture self,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_IsOpened_Async(
      self,
      callback,
    );
  }

  late final _VideoCapture_IsOpened_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, imp1.CvCallback_1)>>('VideoCapture_IsOpened_Async');
  late final _VideoCapture_IsOpened_Async =
      _VideoCapture_IsOpened_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_New(
    ffi.Pointer<VideoCapture> rval,
  ) {
    return _VideoCapture_New(
      rval,
    );
  }

  late final _VideoCapture_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<VideoCapture>)>>('VideoCapture_New');
  late final _VideoCapture_New = _VideoCapture_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoCapture>)>();

  ffi.Pointer<CvStatus> VideoCapture_NewFromFile(
    ffi.Pointer<ffi.Char> filename,
    int apiPreference,
    ffi.Pointer<VideoCapture> rval,
  ) {
    return _VideoCapture_NewFromFile(
      filename,
      apiPreference,
      rval,
    );
  }

  late final _VideoCapture_NewFromFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<VideoCapture>)>>('VideoCapture_NewFromFile');
  late final _VideoCapture_NewFromFile =
      _VideoCapture_NewFromFilePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<VideoCapture>)>();

  ffi.Pointer<CvStatus> VideoCapture_NewFromFile_Async(
    ffi.Pointer<ffi.Char> filename,
    int apiPreference,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_NewFromFile_Async(
      filename,
      apiPreference,
      callback,
    );
  }

  late final _VideoCapture_NewFromFile_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              imp1.CvCallback_1)>>('VideoCapture_NewFromFile_Async');
  late final _VideoCapture_NewFromFile_Async =
      _VideoCapture_NewFromFile_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_NewFromIndex(
    int index,
    int apiPreference,
    ffi.Pointer<VideoCapture> rval,
  ) {
    return _VideoCapture_NewFromIndex(
      index,
      apiPreference,
      rval,
    );
  }

  late final _VideoCapture_NewFromIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int,
              ffi.Pointer<VideoCapture>)>>('VideoCapture_NewFromIndex');
  late final _VideoCapture_NewFromIndex =
      _VideoCapture_NewFromIndexPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, int, ffi.Pointer<VideoCapture>)>();

  ffi.Pointer<CvStatus> VideoCapture_NewFromIndex_Async(
    int index,
    int apiPreference,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_NewFromIndex_Async(
      index,
      apiPreference,
      callback,
    );
  }

  late final _VideoCapture_NewFromIndex_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('VideoCapture_NewFromIndex_Async');
  late final _VideoCapture_NewFromIndex_Async =
      _VideoCapture_NewFromIndex_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_New_Async(
      callback,
    );
  }

  late final _VideoCapture_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'VideoCapture_New_Async');
  late final _VideoCapture_New_Async = _VideoCapture_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_Open(
    VideoCapture self,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _VideoCapture_Open(
      self,
      uri,
      rval,
    );
  }

  late final _VideoCapture_OpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>)>>('VideoCapture_Open');
  late final _VideoCapture_Open = _VideoCapture_OpenPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoCapture, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> VideoCapture_OpenDevice(
    VideoCapture self,
    int device,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _VideoCapture_OpenDevice(
      self,
      device,
      rval,
    );
  }

  late final _VideoCapture_OpenDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int,
              ffi.Pointer<ffi.Bool>)>>('VideoCapture_OpenDevice');
  late final _VideoCapture_OpenDevice = _VideoCapture_OpenDevicePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoCapture, int, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> VideoCapture_OpenDeviceWithAPI(
    VideoCapture self,
    int device,
    int apiPreference,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _VideoCapture_OpenDeviceWithAPI(
      self,
      device,
      apiPreference,
      rval,
    );
  }

  late final _VideoCapture_OpenDeviceWithAPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Bool>)>>('VideoCapture_OpenDeviceWithAPI');
  late final _VideoCapture_OpenDeviceWithAPI =
      _VideoCapture_OpenDeviceWithAPIPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, int, int, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> VideoCapture_OpenDeviceWithAPI_Async(
    VideoCapture self,
    int device,
    int apiPreference,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_OpenDeviceWithAPI_Async(
      self,
      device,
      apiPreference,
      callback,
    );
  }

  late final _VideoCapture_OpenDeviceWithAPI_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('VideoCapture_OpenDeviceWithAPI_Async');
  late final _VideoCapture_OpenDeviceWithAPI_Async =
      _VideoCapture_OpenDeviceWithAPI_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_OpenDevice_Async(
    VideoCapture self,
    int device,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_OpenDevice_Async(
      self,
      device,
      callback,
    );
  }

  late final _VideoCapture_OpenDevice_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int,
              imp1.CvCallback_1)>>('VideoCapture_OpenDevice_Async');
  late final _VideoCapture_OpenDevice_Async =
      _VideoCapture_OpenDevice_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_OpenWithAPI(
    VideoCapture self,
    ffi.Pointer<ffi.Char> uri,
    int apiPreference,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _VideoCapture_OpenWithAPI(
      self,
      uri,
      apiPreference,
      rval,
    );
  }

  late final _VideoCapture_OpenWithAPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Bool>)>>('VideoCapture_OpenWithAPI');
  late final _VideoCapture_OpenWithAPI =
      _VideoCapture_OpenWithAPIPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> VideoCapture_OpenWithAPI_Async(
    VideoCapture self,
    ffi.Pointer<ffi.Char> uri,
    int apiPreference,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_OpenWithAPI_Async(
      self,
      uri,
      apiPreference,
      callback,
    );
  }

  late final _VideoCapture_OpenWithAPI_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>,
              ffi.Int, imp1.CvCallback_1)>>('VideoCapture_OpenWithAPI_Async');
  late final _VideoCapture_OpenWithAPI_Async =
      _VideoCapture_OpenWithAPI_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, ffi.Pointer<ffi.Char>, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_Open_Async(
    VideoCapture self,
    ffi.Pointer<ffi.Char> uri,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_Open_Async(
      self,
      uri,
      callback,
    );
  }

  late final _VideoCapture_Open_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('VideoCapture_Open_Async');
  late final _VideoCapture_Open_Async = _VideoCapture_Open_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoCapture, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_Read(
    VideoCapture self,
    Mat buf,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _VideoCapture_Read(
      self,
      buf,
      rval,
    );
  }

  late final _VideoCapture_ReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, Mat, ffi.Pointer<ffi.Int>)>>('VideoCapture_Read');
  late final _VideoCapture_Read = _VideoCapture_ReadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoCapture, Mat, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> VideoCapture_Read_Async(
    VideoCapture self,
    imp1.CvCallback_2 callback,
  ) {
    return _VideoCapture_Read_Async(
      self,
      callback,
    );
  }

  late final _VideoCapture_Read_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, imp1.CvCallback_2)>>('VideoCapture_Read_Async');
  late final _VideoCapture_Read_Async = _VideoCapture_Read_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> VideoCapture_Release(
    VideoCapture self,
  ) {
    return _VideoCapture_Release(
      self,
    );
  }

  late final _VideoCapture_ReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VideoCapture)>>(
          'VideoCapture_Release');
  late final _VideoCapture_Release = _VideoCapture_ReleasePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture)>();

  ffi.Pointer<CvStatus> VideoCapture_Release_Async(
    VideoCapture self,
    imp1.CvCallback_0 callback,
  ) {
    return _VideoCapture_Release_Async(
      self,
      callback,
    );
  }

  late final _VideoCapture_Release_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, imp1.CvCallback_0)>>('VideoCapture_Release_Async');
  late final _VideoCapture_Release_Async =
      _VideoCapture_Release_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> VideoCapture_Set(
    VideoCapture self,
    int prop,
    double param,
  ) {
    return _VideoCapture_Set(
      self,
      prop,
      param,
    );
  }

  late final _VideoCapture_SetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, ffi.Int, ffi.Double)>>('VideoCapture_Set');
  late final _VideoCapture_Set = _VideoCapture_SetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoCapture, int, double)>();

  ffi.Pointer<CvStatus> VideoCapture_Set_Async(
    VideoCapture self,
    int prop,
    double param,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoCapture_Set_Async(
      self,
      prop,
      param,
      callback,
    );
  }

  late final _VideoCapture_Set_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, ffi.Double,
              imp1.CvCallback_1)>>('VideoCapture_Set_Async');
  late final _VideoCapture_Set_Async = _VideoCapture_Set_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoCapture, int, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoCapture_getBackendName(
    VideoCapture self,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _VideoCapture_getBackendName(
      self,
      rval,
    );
  }

  late final _VideoCapture_getBackendNamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  VideoCapture, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'VideoCapture_getBackendName');
  late final _VideoCapture_getBackendName =
      _VideoCapture_getBackendNamePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VideoCapture, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void VideoWriter_Close(
    VideoWriterPtr self,
  ) {
    return _VideoWriter_Close(
      self,
    );
  }

  late final _VideoWriter_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VideoWriterPtr)>>(
          'VideoWriter_Close');
  late final _VideoWriter_Close =
      _VideoWriter_ClosePtr.asFunction<void Function(VideoWriterPtr)>();

  ffi.Pointer<CvStatus> VideoWriter_Fourcc(
    int c1,
    int c2,
    int c3,
    int c4,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _VideoWriter_Fourcc(
      c1,
      c2,
      c3,
      c4,
      rval,
    );
  }

  late final _VideoWriter_FourccPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Char, ffi.Char, ffi.Char, ffi.Char,
              ffi.Pointer<ffi.Int>)>>('VideoWriter_Fourcc');
  late final _VideoWriter_Fourcc = _VideoWriter_FourccPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> VideoWriter_Fourcc_Async(
    int c1,
    int c2,
    int c3,
    int c4,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoWriter_Fourcc_Async(
      c1,
      c2,
      c3,
      c4,
      callback,
    );
  }

  late final _VideoWriter_Fourcc_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Char, ffi.Char, ffi.Char, ffi.Char,
              imp1.CvCallback_1)>>('VideoWriter_Fourcc_Async');
  late final _VideoWriter_Fourcc_Async =
      _VideoWriter_Fourcc_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoWriter_IsOpened(
    VideoWriter self,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _VideoWriter_IsOpened(
      self,
      rval,
    );
  }

  late final _VideoWriter_IsOpenedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter, ffi.Pointer<ffi.Int>)>>('VideoWriter_IsOpened');
  late final _VideoWriter_IsOpened = _VideoWriter_IsOpenedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> VideoWriter_IsOpened_Async(
    VideoWriter self,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoWriter_IsOpened_Async(
      self,
      callback,
    );
  }

  late final _VideoWriter_IsOpened_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter, imp1.CvCallback_1)>>('VideoWriter_IsOpened_Async');
  late final _VideoWriter_IsOpened_Async =
      _VideoWriter_IsOpened_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VideoWriter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoWriter_New(
    ffi.Pointer<VideoWriter> rval,
  ) {
    return _VideoWriter_New(
      rval,
    );
  }

  late final _VideoWriter_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<VideoWriter>)>>('VideoWriter_New');
  late final _VideoWriter_New = _VideoWriter_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoWriter>)>();

  ffi.Pointer<CvStatus> VideoWriter_NewFromFile(
    ffi.Pointer<ffi.Char> name,
    int fourcc,
    double fps,
    int width,
    int height,
    bool isColor,
    ffi.Pointer<VideoWriter> rval,
  ) {
    return _VideoWriter_NewFromFile(
      name,
      fourcc,
      fps,
      width,
      height,
      isColor,
      rval,
    );
  }

  late final _VideoWriter_NewFromFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Pointer<VideoWriter>)>>('VideoWriter_NewFromFile');
  late final _VideoWriter_NewFromFile = _VideoWriter_NewFromFilePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, double, int,
          int, bool, ffi.Pointer<VideoWriter>)>();

  ffi.Pointer<CvStatus> VideoWriter_NewFromFile_1(
    ffi.Pointer<ffi.Char> name,
    int apiPreference,
    int fourcc,
    double fps,
    int width,
    int height,
    bool isColor,
    ffi.Pointer<VideoWriter> rval,
  ) {
    return _VideoWriter_NewFromFile_1(
      name,
      apiPreference,
      fourcc,
      fps,
      width,
      height,
      isColor,
      rval,
    );
  }

  late final _VideoWriter_NewFromFile_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Pointer<VideoWriter>)>>('VideoWriter_NewFromFile_1');
  late final _VideoWriter_NewFromFile_1 =
      _VideoWriter_NewFromFile_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, int,
              double, int, int, bool, ffi.Pointer<VideoWriter>)>();

  ffi.Pointer<CvStatus> VideoWriter_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _VideoWriter_New_Async(
      callback,
    );
  }

  late final _VideoWriter_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'VideoWriter_New_Async');
  late final _VideoWriter_New_Async = _VideoWriter_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoWriter_Open(
    VideoWriter self,
    ffi.Pointer<ffi.Char> name,
    int fourcc,
    double fps,
    int width,
    int height,
    bool isColor,
  ) {
    return _VideoWriter_Open(
      self,
      name,
      fourcc,
      fps,
      width,
      height,
      isColor,
    );
  }

  late final _VideoWriter_OpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('VideoWriter_Open');
  late final _VideoWriter_Open = _VideoWriter_OpenPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VideoWriter, ffi.Pointer<ffi.Char>, int, double, int, int, bool)>();

  ffi.Pointer<CvStatus> VideoWriter_Open_1(
    VideoWriter self,
    ffi.Pointer<ffi.Char> name,
    int apiPreference,
    int fourcc,
    double fps,
    int width,
    int height,
    bool isColor,
  ) {
    return _VideoWriter_Open_1(
      self,
      name,
      apiPreference,
      fourcc,
      fps,
      width,
      height,
      isColor,
    );
  }

  late final _VideoWriter_Open_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('VideoWriter_Open_1');
  late final _VideoWriter_Open_1 = _VideoWriter_Open_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Char>, int,
          int, double, int, int, bool)>();

  ffi.Pointer<CvStatus> VideoWriter_Open_Async(
    VideoWriter self,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> codec,
    double fps,
    int width,
    int height,
    bool isColor,
    imp1.CvCallback_1 callback,
  ) {
    return _VideoWriter_Open_Async(
      self,
      name,
      codec,
      fps,
      width,
      height,
      isColor,
      callback,
    );
  }

  late final _VideoWriter_Open_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              imp1.CvCallback_1)>>('VideoWriter_Open_Async');
  late final _VideoWriter_Open_Async = _VideoWriter_Open_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, double, int, int, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> VideoWriter_Release(
    VideoWriter self,
  ) {
    return _VideoWriter_Release(
      self,
    );
  }

  late final _VideoWriter_ReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VideoWriter)>>(
          'VideoWriter_Release');
  late final _VideoWriter_Release = _VideoWriter_ReleasePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoWriter)>();

  ffi.Pointer<CvStatus> VideoWriter_Release_Async(
    VideoWriter self,
    imp1.CvCallback_0 callback,
  ) {
    return _VideoWriter_Release_Async(
      self,
      callback,
    );
  }

  late final _VideoWriter_Release_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter, imp1.CvCallback_0)>>('VideoWriter_Release_Async');
  late final _VideoWriter_Release_Async =
      _VideoWriter_Release_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(VideoWriter, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> VideoWriter_Write(
    VideoWriter self,
    Mat img,
  ) {
    return _VideoWriter_Write(
      self,
      img,
    );
  }

  late final _VideoWriter_WritePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VideoWriter, Mat)>>(
      'VideoWriter_Write');
  late final _VideoWriter_Write = _VideoWriter_WritePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoWriter, Mat)>();

  ffi.Pointer<CvStatus> VideoWriter_Write_Async(
    VideoWriter self,
    Mat img,
    imp1.CvCallback_0 callback,
  ) {
    return _VideoWriter_Write_Async(
      self,
      img,
      callback,
    );
  }

  late final _VideoWriter_Write_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter, Mat, imp1.CvCallback_0)>>('VideoWriter_Write_Async');
  late final _VideoWriter_Write_Async = _VideoWriter_Write_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VideoWriter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> VideoWriter_getBackendName(
    VideoWriter self,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _VideoWriter_getBackendName(
      self,
      rval,
    );
  }

  late final _VideoWriter_getBackendNamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  VideoWriter, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'VideoWriter_getBackendName');
  late final _VideoWriter_getBackendName =
      _VideoWriter_getBackendNamePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VideoWriter, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeVideoIO _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoCapturePtr)>>
      get VideoCapture_Close => _library._VideoCapture_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoWriterPtr)>>
      get VideoWriter_Close => _library._VideoWriter_ClosePtr;
}

typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;

final class VideoCapture extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoCapturePtr = ffi.Pointer<VideoCapture>;

final class VideoWriter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoWriterPtr = ffi.Pointer<VideoWriter>;
