// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - features2d
///
class CvNativeFeatures2d {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeFeatures2d(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeFeatures2d.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void AKAZE_Close(
    AKAZEPtr a,
  ) {
    return _AKAZE_Close(
      a,
    );
  }

  late final _AKAZE_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AKAZEPtr)>>('AKAZE_Close');
  late final _AKAZE_Close =
      _AKAZE_ClosePtr.asFunction<void Function(AKAZEPtr)>();

  ffi.Pointer<CvStatus> AKAZE_Close_Async(
    AKAZEPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _AKAZE_Close_Async(
      self,
      callback,
    );
  }

  late final _AKAZE_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              AKAZEPtr, imp1.CvCallback_0)>>('AKAZE_Close_Async');
  late final _AKAZE_Close_Async = _AKAZE_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(AKAZEPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> AKAZE_Create(
    ffi.Pointer<AKAZE> rval,
  ) {
    return _AKAZE_Create(
      rval,
    );
  }

  late final _AKAZE_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>>('AKAZE_Create');
  late final _AKAZE_Create = _AKAZE_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>();

  ffi.Pointer<CvStatus> AKAZE_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _AKAZE_Create_Async(
      callback,
    );
  }

  late final _AKAZE_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'AKAZE_Create_Async');
  late final _AKAZE_Create_Async = _AKAZE_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> AKAZE_Detect(
    AKAZE a,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _AKAZE_Detect(
      a,
      src,
      rval,
    );
  }

  late final _AKAZE_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              AKAZE, Mat, ffi.Pointer<VecKeyPoint>)>>('AKAZE_Detect');
  late final _AKAZE_Detect = _AKAZE_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(AKAZE, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> AKAZE_DetectAndCompute(
    AKAZE a,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _AKAZE_DetectAndCompute(
      a,
      src,
      mask,
      desc,
      rval,
    );
  }

  late final _AKAZE_DetectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AKAZE, Mat, Mat, Mat,
              ffi.Pointer<VecKeyPoint>)>>('AKAZE_DetectAndCompute');
  late final _AKAZE_DetectAndCompute = _AKAZE_DetectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> AKAZE_DetectAndCompute_Async(
    AKAZE self,
    Mat src,
    Mat mask,
    imp1.CvCallback_2 callback,
  ) {
    return _AKAZE_DetectAndCompute_Async(
      self,
      src,
      mask,
      callback,
    );
  }

  late final _AKAZE_DetectAndCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AKAZE, Mat, Mat,
              imp1.CvCallback_2)>>('AKAZE_DetectAndCompute_Async');
  late final _AKAZE_DetectAndCompute_Async =
      _AKAZE_DetectAndCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(AKAZE, Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> AKAZE_Detect_Async(
    AKAZE self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _AKAZE_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _AKAZE_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              AKAZE, Mat, imp1.CvCallback_1)>>('AKAZE_Detect_Async');
  late final _AKAZE_Detect_Async = _AKAZE_Detect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(AKAZE, Mat, imp1.CvCallback_1)>();

  void AgastFeatureDetector_Close(
    AgastFeatureDetectorPtr a,
  ) {
    return _AgastFeatureDetector_Close(
      a,
    );
  }

  late final _AgastFeatureDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetectorPtr)>>(
          'AgastFeatureDetector_Close');
  late final _AgastFeatureDetector_Close = _AgastFeatureDetector_ClosePtr
      .asFunction<void Function(AgastFeatureDetectorPtr)>();

  ffi.Pointer<CvStatus> AgastFeatureDetector_Close_Async(
    AgastFeatureDetectorPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _AgastFeatureDetector_Close_Async(
      self,
      callback,
    );
  }

  late final _AgastFeatureDetector_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AgastFeatureDetectorPtr,
              imp1.CvCallback_0)>>('AgastFeatureDetector_Close_Async');
  late final _AgastFeatureDetector_Close_Async =
      _AgastFeatureDetector_Close_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              AgastFeatureDetectorPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> AgastFeatureDetector_Create(
    ffi.Pointer<AgastFeatureDetector> rval,
  ) {
    return _AgastFeatureDetector_Create(
      rval,
    );
  }

  late final _AgastFeatureDetector_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<AgastFeatureDetector>)>>(
      'AgastFeatureDetector_Create');
  late final _AgastFeatureDetector_Create =
      _AgastFeatureDetector_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<AgastFeatureDetector>)>();

  ffi.Pointer<CvStatus> AgastFeatureDetector_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _AgastFeatureDetector_Create_Async(
      callback,
    );
  }

  late final _AgastFeatureDetector_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'AgastFeatureDetector_Create_Async');
  late final _AgastFeatureDetector_Create_Async =
      _AgastFeatureDetector_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> AgastFeatureDetector_Detect(
    AgastFeatureDetector a,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _AgastFeatureDetector_Detect(
      a,
      src,
      rval,
    );
  }

  late final _AgastFeatureDetector_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AgastFeatureDetector, Mat,
              ffi.Pointer<VecKeyPoint>)>>('AgastFeatureDetector_Detect');
  late final _AgastFeatureDetector_Detect =
      _AgastFeatureDetector_DetectPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              AgastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> AgastFeatureDetector_Detect_Async(
    AgastFeatureDetector self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _AgastFeatureDetector_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _AgastFeatureDetector_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AgastFeatureDetector, Mat,
              imp1.CvCallback_1)>>('AgastFeatureDetector_Detect_Async');
  late final _AgastFeatureDetector_Detect_Async =
      _AgastFeatureDetector_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              AgastFeatureDetector, Mat, imp1.CvCallback_1)>();

  void BFMatcher_Close(
    BFMatcherPtr b,
  ) {
    return _BFMatcher_Close(
      b,
    );
  }

  late final _BFMatcher_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BFMatcherPtr)>>(
          'BFMatcher_Close');
  late final _BFMatcher_Close =
      _BFMatcher_ClosePtr.asFunction<void Function(BFMatcherPtr)>();

  ffi.Pointer<CvStatus> BFMatcher_Close_Async(
    BFMatcherPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _BFMatcher_Close_Async(
      self,
      callback,
    );
  }

  late final _BFMatcher_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BFMatcherPtr, imp1.CvCallback_0)>>('BFMatcher_Close_Async');
  late final _BFMatcher_Close_Async = _BFMatcher_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BFMatcherPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> BFMatcher_Create(
    ffi.Pointer<BFMatcher> rval,
  ) {
    return _BFMatcher_Create(
      rval,
    );
  }

  late final _BFMatcher_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<BFMatcher>)>>('BFMatcher_Create');
  late final _BFMatcher_Create = _BFMatcher_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<BFMatcher>)>();

  ffi.Pointer<CvStatus> BFMatcher_CreateWithParams(
    int normType,
    bool crossCheck,
    ffi.Pointer<BFMatcher> rval,
  ) {
    return _BFMatcher_CreateWithParams(
      normType,
      crossCheck,
      rval,
    );
  }

  late final _BFMatcher_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool,
              ffi.Pointer<BFMatcher>)>>('BFMatcher_CreateWithParams');
  late final _BFMatcher_CreateWithParams =
      _BFMatcher_CreateWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, bool, ffi.Pointer<BFMatcher>)>();

  ffi.Pointer<CvStatus> BFMatcher_CreateWithParams_Async(
    int normType,
    bool crossCheck,
    imp1.CvCallback_1 callback,
  ) {
    return _BFMatcher_CreateWithParams_Async(
      normType,
      crossCheck,
      callback,
    );
  }

  late final _BFMatcher_CreateWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool,
              imp1.CvCallback_1)>>('BFMatcher_CreateWithParams_Async');
  late final _BFMatcher_CreateWithParams_Async =
      _BFMatcher_CreateWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BFMatcher_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _BFMatcher_Create_Async(
      callback,
    );
  }

  late final _BFMatcher_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'BFMatcher_Create_Async');
  late final _BFMatcher_Create_Async = _BFMatcher_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BFMatcher_KnnMatch(
    BFMatcher b,
    Mat query,
    Mat train,
    int k,
    ffi.Pointer<VecVecDMatch> rval,
  ) {
    return _BFMatcher_KnnMatch(
      b,
      query,
      train,
      k,
      rval,
    );
  }

  late final _BFMatcher_KnnMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, ffi.Int,
              ffi.Pointer<VecVecDMatch>)>>('BFMatcher_KnnMatch');
  late final _BFMatcher_KnnMatch = _BFMatcher_KnnMatchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          BFMatcher, Mat, Mat, int, ffi.Pointer<VecVecDMatch>)>();

  ffi.Pointer<CvStatus> BFMatcher_KnnMatch_Async(
    BFMatcher self,
    Mat query,
    Mat train,
    int k,
    imp1.CvCallback_1 callback,
  ) {
    return _BFMatcher_KnnMatch_Async(
      self,
      query,
      train,
      k,
      callback,
    );
  }

  late final _BFMatcher_KnnMatch_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, ffi.Int,
              imp1.CvCallback_1)>>('BFMatcher_KnnMatch_Async');
  late final _BFMatcher_KnnMatch_Async =
      _BFMatcher_KnnMatch_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              BFMatcher, Mat, Mat, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BFMatcher_Match(
    BFMatcher b,
    Mat query,
    Mat train,
    ffi.Pointer<VecDMatch> rval,
  ) {
    return _BFMatcher_Match(
      b,
      query,
      train,
      rval,
    );
  }

  late final _BFMatcher_MatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>)>>('BFMatcher_Match');
  late final _BFMatcher_Match = _BFMatcher_MatchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>)>();

  ffi.Pointer<CvStatus> BFMatcher_Match_Async(
    BFMatcher self,
    Mat query,
    Mat train,
    imp1.CvCallback_1 callback,
  ) {
    return _BFMatcher_Match_Async(
      self,
      query,
      train,
      callback,
    );
  }

  late final _BFMatcher_Match_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat,
              imp1.CvCallback_1)>>('BFMatcher_Match_Async');
  late final _BFMatcher_Match_Async = _BFMatcher_Match_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, imp1.CvCallback_1)>();

  void BRISK_Close(
    BRISKPtr b,
  ) {
    return _BRISK_Close(
      b,
    );
  }

  late final _BRISK_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BRISKPtr)>>('BRISK_Close');
  late final _BRISK_Close =
      _BRISK_ClosePtr.asFunction<void Function(BRISKPtr)>();

  ffi.Pointer<CvStatus> BRISK_Close_Async(
    BRISKPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _BRISK_Close_Async(
      self,
      callback,
    );
  }

  late final _BRISK_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BRISKPtr, imp1.CvCallback_0)>>('BRISK_Close_Async');
  late final _BRISK_Close_Async = _BRISK_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BRISKPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> BRISK_Create(
    ffi.Pointer<BRISK> rval,
  ) {
    return _BRISK_Create(
      rval,
    );
  }

  late final _BRISK_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>>('BRISK_Create');
  late final _BRISK_Create = _BRISK_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>();

  ffi.Pointer<CvStatus> BRISK_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _BRISK_Create_Async(
      callback,
    );
  }

  late final _BRISK_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'BRISK_Create_Async');
  late final _BRISK_Create_Async = _BRISK_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BRISK_Detect(
    BRISK b,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _BRISK_Detect(
      b,
      src,
      rval,
    );
  }

  late final _BRISK_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BRISK, Mat, ffi.Pointer<VecKeyPoint>)>>('BRISK_Detect');
  late final _BRISK_Detect = _BRISK_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BRISK, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> BRISK_DetectAndCompute(
    BRISK b,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _BRISK_DetectAndCompute(
      b,
      src,
      mask,
      desc,
      rval,
    );
  }

  late final _BRISK_DetectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BRISK, Mat, Mat, Mat,
              ffi.Pointer<VecKeyPoint>)>>('BRISK_DetectAndCompute');
  late final _BRISK_DetectAndCompute = _BRISK_DetectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> BRISK_DetectAndCompute_Async(
    BRISK self,
    Mat src,
    Mat mask,
    imp1.CvCallback_2 callback,
  ) {
    return _BRISK_DetectAndCompute_Async(
      self,
      src,
      mask,
      callback,
    );
  }

  late final _BRISK_DetectAndCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BRISK, Mat, Mat,
              imp1.CvCallback_2)>>('BRISK_DetectAndCompute_Async');
  late final _BRISK_DetectAndCompute_Async =
      _BRISK_DetectAndCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(BRISK, Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> BRISK_Detect_Async(
    BRISK self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _BRISK_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _BRISK_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BRISK, Mat, imp1.CvCallback_1)>>('BRISK_Detect_Async');
  late final _BRISK_Detect_Async = _BRISK_Detect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BRISK, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> DrawKeyPoints(
    Mat src,
    VecKeyPoint kp,
    Mat dst,
    Scalar color,
    int flags,
  ) {
    return _DrawKeyPoints(
      src,
      kp,
      dst,
      color,
      flags,
    );
  }

  late final _DrawKeyPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecKeyPoint, Mat, Scalar, ffi.Int)>>('DrawKeyPoints');
  late final _DrawKeyPoints = _DrawKeyPointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, Scalar, int)>();

  ffi.Pointer<CvStatus> DrawKeyPoints_Async(
    Mat src,
    VecKeyPoint kp,
    Mat dst,
    Scalar color,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _DrawKeyPoints_Async(
      src,
      kp,
      dst,
      color,
      flags,
      callback,
    );
  }

  late final _DrawKeyPoints_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, Scalar, ffi.Int,
              imp1.CvCallback_0)>>('DrawKeyPoints_Async');
  late final _DrawKeyPoints_Async = _DrawKeyPoints_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecKeyPoint, Mat, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> DrawMatches(
    Mat img1,
    VecKeyPoint kp1,
    Mat img2,
    VecKeyPoint kp2,
    VecDMatch matches1to2,
    Mat outImg,
    Scalar matchesColor,
    Scalar pointColor,
    VecChar matchesMask,
    int flags,
  ) {
    return _DrawMatches(
      img1,
      kp1,
      img2,
      kp2,
      matches1to2,
      outImg,
      matchesColor,
      pointColor,
      matchesMask,
      flags,
    );
  }

  late final _DrawMatchesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              VecKeyPoint,
              Mat,
              VecKeyPoint,
              VecDMatch,
              Mat,
              Scalar,
              Scalar,
              VecChar,
              ffi.Int)>>('DrawMatches');
  late final _DrawMatches = _DrawMatchesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint,
          VecDMatch, Mat, Scalar, Scalar, VecChar, int)>();

  ffi.Pointer<CvStatus> DrawMatches_Async(
    Mat img1,
    VecKeyPoint kp1,
    Mat img2,
    VecKeyPoint kp2,
    VecDMatch matches1to2,
    Mat outImg,
    Scalar matchesColor,
    Scalar pointColor,
    VecChar matchesMask,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _DrawMatches_Async(
      img1,
      kp1,
      img2,
      kp2,
      matches1to2,
      outImg,
      matchesColor,
      pointColor,
      matchesMask,
      flags,
      callback,
    );
  }

  late final _DrawMatches_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              VecKeyPoint,
              Mat,
              VecKeyPoint,
              VecDMatch,
              Mat,
              Scalar,
              Scalar,
              VecChar,
              ffi.Int,
              imp1.CvCallback_0)>>('DrawMatches_Async');
  late final _DrawMatches_Async = _DrawMatches_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint,
          VecDMatch, Mat, Scalar, Scalar, VecChar, int, imp1.CvCallback_0)>();

  void FastFeatureDetector_Close(
    FastFeatureDetectorPtr f,
  ) {
    return _FastFeatureDetector_Close(
      f,
    );
  }

  late final _FastFeatureDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FastFeatureDetectorPtr)>>(
          'FastFeatureDetector_Close');
  late final _FastFeatureDetector_Close = _FastFeatureDetector_ClosePtr
      .asFunction<void Function(FastFeatureDetectorPtr)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_Close_Async(
    FastFeatureDetectorPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _FastFeatureDetector_Close_Async(
      self,
      callback,
    );
  }

  late final _FastFeatureDetector_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FastFeatureDetectorPtr,
              imp1.CvCallback_0)>>('FastFeatureDetector_Close_Async');
  late final _FastFeatureDetector_Close_Async =
      _FastFeatureDetector_Close_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FastFeatureDetectorPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_Create(
    ffi.Pointer<FastFeatureDetector> rval,
  ) {
    return _FastFeatureDetector_Create(
      rval,
    );
  }

  late final _FastFeatureDetector_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<FastFeatureDetector>)>>('FastFeatureDetector_Create');
  late final _FastFeatureDetector_Create =
      _FastFeatureDetector_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<FastFeatureDetector>)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_CreateWithParams(
    int threshold,
    bool nonmaxSuppression,
    int type,
    ffi.Pointer<FastFeatureDetector> rval,
  ) {
    return _FastFeatureDetector_CreateWithParams(
      threshold,
      nonmaxSuppression,
      type,
      rval,
    );
  }

  late final _FastFeatureDetector_CreateWithParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, ffi.Int,
                  ffi.Pointer<FastFeatureDetector>)>>(
      'FastFeatureDetector_CreateWithParams');
  late final _FastFeatureDetector_CreateWithParams =
      _FastFeatureDetector_CreateWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, bool, int, ffi.Pointer<FastFeatureDetector>)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_CreateWithParams_Async(
    int threshold,
    bool nonmaxSuppression,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _FastFeatureDetector_CreateWithParams_Async(
      threshold,
      nonmaxSuppression,
      type,
      callback,
    );
  }

  late final _FastFeatureDetector_CreateWithParams_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Int, ffi.Bool, ffi.Int, imp1.CvCallback_1)>>(
      'FastFeatureDetector_CreateWithParams_Async');
  late final _FastFeatureDetector_CreateWithParams_Async =
      _FastFeatureDetector_CreateWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, bool, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _FastFeatureDetector_Create_Async(
      callback,
    );
  }

  late final _FastFeatureDetector_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'FastFeatureDetector_Create_Async');
  late final _FastFeatureDetector_Create_Async =
      _FastFeatureDetector_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_Detect(
    FastFeatureDetector f,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _FastFeatureDetector_Detect(
      f,
      src,
      rval,
    );
  }

  late final _FastFeatureDetector_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FastFeatureDetector, Mat,
              ffi.Pointer<VecKeyPoint>)>>('FastFeatureDetector_Detect');
  late final _FastFeatureDetector_Detect =
      _FastFeatureDetector_DetectPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> FastFeatureDetector_Detect_Async(
    FastFeatureDetector self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _FastFeatureDetector_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _FastFeatureDetector_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FastFeatureDetector, Mat,
              imp1.CvCallback_1)>>('FastFeatureDetector_Detect_Async');
  late final _FastFeatureDetector_Detect_Async =
      _FastFeatureDetector_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FastFeatureDetector, Mat, imp1.CvCallback_1)>();

  void FlannBasedMatcher_Close(
    FlannBasedMatcherPtr f,
  ) {
    return _FlannBasedMatcher_Close(
      f,
    );
  }

  late final _FlannBasedMatcher_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcherPtr)>>(
          'FlannBasedMatcher_Close');
  late final _FlannBasedMatcher_Close = _FlannBasedMatcher_ClosePtr.asFunction<
      void Function(FlannBasedMatcherPtr)>();

  ffi.Pointer<CvStatus> FlannBasedMatcher_Close_Async(
    FlannBasedMatcherPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _FlannBasedMatcher_Close_Async(
      self,
      callback,
    );
  }

  late final _FlannBasedMatcher_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FlannBasedMatcherPtr,
              imp1.CvCallback_0)>>('FlannBasedMatcher_Close_Async');
  late final _FlannBasedMatcher_Close_Async =
      _FlannBasedMatcher_Close_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FlannBasedMatcherPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> FlannBasedMatcher_Create(
    ffi.Pointer<FlannBasedMatcher> rval,
  ) {
    return _FlannBasedMatcher_Create(
      rval,
    );
  }

  late final _FlannBasedMatcher_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<FlannBasedMatcher>)>>('FlannBasedMatcher_Create');
  late final _FlannBasedMatcher_Create =
      _FlannBasedMatcher_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<FlannBasedMatcher>)>();

  ffi.Pointer<CvStatus> FlannBasedMatcher_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _FlannBasedMatcher_Create_Async(
      callback,
    );
  }

  late final _FlannBasedMatcher_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'FlannBasedMatcher_Create_Async');
  late final _FlannBasedMatcher_Create_Async =
      _FlannBasedMatcher_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> FlannBasedMatcher_KnnMatch(
    FlannBasedMatcher f,
    Mat query,
    Mat train,
    int k,
    ffi.Pointer<VecVecDMatch> rval,
  ) {
    return _FlannBasedMatcher_KnnMatch(
      f,
      query,
      train,
      k,
      rval,
    );
  }

  late final _FlannBasedMatcher_KnnMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FlannBasedMatcher, Mat, Mat, ffi.Int,
              ffi.Pointer<VecVecDMatch>)>>('FlannBasedMatcher_KnnMatch');
  late final _FlannBasedMatcher_KnnMatch =
      _FlannBasedMatcher_KnnMatchPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FlannBasedMatcher, Mat, Mat, int, ffi.Pointer<VecVecDMatch>)>();

  ffi.Pointer<CvStatus> FlannBasedMatcher_KnnMatch_Async(
    FlannBasedMatcher self,
    Mat query,
    Mat train,
    int k,
    imp1.CvCallback_1 callback,
  ) {
    return _FlannBasedMatcher_KnnMatch_Async(
      self,
      query,
      train,
      k,
      callback,
    );
  }

  late final _FlannBasedMatcher_KnnMatch_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FlannBasedMatcher, Mat, Mat, ffi.Int,
              imp1.CvCallback_1)>>('FlannBasedMatcher_KnnMatch_Async');
  late final _FlannBasedMatcher_KnnMatch_Async =
      _FlannBasedMatcher_KnnMatch_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              FlannBasedMatcher, Mat, Mat, int, imp1.CvCallback_1)>();

  void GFTTDetector_Close(
    GFTTDetectorPtr a,
  ) {
    return _GFTTDetector_Close(
      a,
    );
  }

  late final _GFTTDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GFTTDetectorPtr)>>(
          'GFTTDetector_Close');
  late final _GFTTDetector_Close =
      _GFTTDetector_ClosePtr.asFunction<void Function(GFTTDetectorPtr)>();

  ffi.Pointer<CvStatus> GFTTDetector_Close_Async(
    GFTTDetectorPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _GFTTDetector_Close_Async(
      self,
      callback,
    );
  }

  late final _GFTTDetector_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GFTTDetectorPtr, imp1.CvCallback_0)>>('GFTTDetector_Close_Async');
  late final _GFTTDetector_Close_Async =
      _GFTTDetector_Close_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(GFTTDetectorPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> GFTTDetector_Create(
    ffi.Pointer<GFTTDetector> rval,
  ) {
    return _GFTTDetector_Create(
      rval,
    );
  }

  late final _GFTTDetector_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<GFTTDetector>)>>('GFTTDetector_Create');
  late final _GFTTDetector_Create = _GFTTDetector_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<GFTTDetector>)>();

  ffi.Pointer<CvStatus> GFTTDetector_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _GFTTDetector_Create_Async(
      callback,
    );
  }

  late final _GFTTDetector_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'GFTTDetector_Create_Async');
  late final _GFTTDetector_Create_Async = _GFTTDetector_Create_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> GFTTDetector_Detect(
    GFTTDetector a,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _GFTTDetector_Detect(
      a,
      src,
      rval,
    );
  }

  late final _GFTTDetector_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GFTTDetector, Mat,
              ffi.Pointer<VecKeyPoint>)>>('GFTTDetector_Detect');
  late final _GFTTDetector_Detect = _GFTTDetector_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> GFTTDetector_Detect_Async(
    GFTTDetector self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _GFTTDetector_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _GFTTDetector_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GFTTDetector, Mat,
              imp1.CvCallback_1)>>('GFTTDetector_Detect_Async');
  late final _GFTTDetector_Detect_Async =
      _GFTTDetector_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              GFTTDetector, Mat, imp1.CvCallback_1)>();

  void KAZE_Close(
    KAZEPtr a,
  ) {
    return _KAZE_Close(
      a,
    );
  }

  late final _KAZE_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KAZEPtr)>>('KAZE_Close');
  late final _KAZE_Close = _KAZE_ClosePtr.asFunction<void Function(KAZEPtr)>();

  ffi.Pointer<CvStatus> KAZE_Close_Async(
    KAZEPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _KAZE_Close_Async(
      self,
      callback,
    );
  }

  late final _KAZE_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KAZEPtr, imp1.CvCallback_0)>>('KAZE_Close_Async');
  late final _KAZE_Close_Async = _KAZE_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KAZEPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KAZE_Create(
    ffi.Pointer<KAZE> rval,
  ) {
    return _KAZE_Create(
      rval,
    );
  }

  late final _KAZE_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>>('KAZE_Create');
  late final _KAZE_Create = _KAZE_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>();

  ffi.Pointer<CvStatus> KAZE_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _KAZE_Create_Async(
      callback,
    );
  }

  late final _KAZE_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'KAZE_Create_Async');
  late final _KAZE_Create_Async = _KAZE_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KAZE_Detect(
    KAZE a,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _KAZE_Detect(
      a,
      src,
      rval,
    );
  }

  late final _KAZE_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KAZE, Mat, ffi.Pointer<VecKeyPoint>)>>('KAZE_Detect');
  late final _KAZE_Detect = _KAZE_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KAZE, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> KAZE_DetectAndCompute(
    KAZE a,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _KAZE_DetectAndCompute(
      a,
      src,
      mask,
      desc,
      rval,
    );
  }

  late final _KAZE_DetectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KAZE, Mat, Mat, Mat,
              ffi.Pointer<VecKeyPoint>)>>('KAZE_DetectAndCompute');
  late final _KAZE_DetectAndCompute = _KAZE_DetectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> KAZE_DetectAndCompute_Async(
    KAZE self,
    Mat src,
    Mat mask,
    imp1.CvCallback_2 callback,
  ) {
    return _KAZE_DetectAndCompute_Async(
      self,
      src,
      mask,
      callback,
    );
  }

  late final _KAZE_DetectAndCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KAZE, Mat, Mat,
              imp1.CvCallback_2)>>('KAZE_DetectAndCompute_Async');
  late final _KAZE_DetectAndCompute_Async =
      _KAZE_DetectAndCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KAZE, Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> KAZE_Detect_Async(
    KAZE self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _KAZE_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _KAZE_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KAZE, Mat, imp1.CvCallback_1)>>('KAZE_Detect_Async');
  late final _KAZE_Detect_Async = _KAZE_Detect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KAZE, Mat, imp1.CvCallback_1)>();

  void MSER_Close(
    MSERPtr a,
  ) {
    return _MSER_Close(
      a,
    );
  }

  late final _MSER_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MSERPtr)>>('MSER_Close');
  late final _MSER_Close = _MSER_ClosePtr.asFunction<void Function(MSERPtr)>();

  ffi.Pointer<CvStatus> MSER_Close_Async(
    MSERPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _MSER_Close_Async(
      self,
      callback,
    );
  }

  late final _MSER_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              MSERPtr, imp1.CvCallback_0)>>('MSER_Close_Async');
  late final _MSER_Close_Async = _MSER_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(MSERPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> MSER_Create(
    ffi.Pointer<MSER> rval,
  ) {
    return _MSER_Create(
      rval,
    );
  }

  late final _MSER_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>>('MSER_Create');
  late final _MSER_Create = _MSER_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>();

  ffi.Pointer<CvStatus> MSER_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _MSER_Create_Async(
      callback,
    );
  }

  late final _MSER_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'MSER_Create_Async');
  late final _MSER_Create_Async = _MSER_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> MSER_Detect(
    MSER a,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _MSER_Detect(
      a,
      src,
      rval,
    );
  }

  late final _MSER_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              MSER, Mat, ffi.Pointer<VecKeyPoint>)>>('MSER_Detect');
  late final _MSER_Detect = _MSER_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(MSER, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> MSER_Detect_Async(
    MSER self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _MSER_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _MSER_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              MSER, Mat, imp1.CvCallback_1)>>('MSER_Detect_Async');
  late final _MSER_Detect_Async = _MSER_Detect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(MSER, Mat, imp1.CvCallback_1)>();

  void ORB_Close(
    ORBPtr self,
  ) {
    return _ORB_Close(
      self,
    );
  }

  late final _ORB_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ORBPtr)>>('ORB_Close');
  late final _ORB_Close = _ORB_ClosePtr.asFunction<void Function(ORBPtr)>();

  ffi.Pointer<CvStatus> ORB_Close_Async(
    ORBPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _ORB_Close_Async(
      self,
      callback,
    );
  }

  late final _ORB_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ORBPtr, imp1.CvCallback_0)>>('ORB_Close_Async');
  late final _ORB_Close_Async = _ORB_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ORBPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ORB_Create(
    ffi.Pointer<ORB> rval,
  ) {
    return _ORB_Create(
      rval,
    );
  }

  late final _ORB_CreatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>>(
      'ORB_Create');
  late final _ORB_Create = _ORB_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>();

  ffi.Pointer<CvStatus> ORB_CreateWithParams(
    int nfeatures,
    double scaleFactor,
    int nlevels,
    int edgeThreshold,
    int firstLevel,
    int WTA_K,
    int scoreType,
    int patchSize,
    int fastThreshold,
    ffi.Pointer<ORB> rval,
  ) {
    return _ORB_CreateWithParams(
      nfeatures,
      scaleFactor,
      nlevels,
      edgeThreshold,
      firstLevel,
      WTA_K,
      scoreType,
      patchSize,
      fastThreshold,
      rval,
    );
  }

  late final _ORB_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ORB>)>>('ORB_CreateWithParams');
  late final _ORB_CreateWithParams = _ORB_CreateWithParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, double, int, int, int, int, int, int, int, ffi.Pointer<ORB>)>();

  ffi.Pointer<CvStatus> ORB_CreateWithParams_Async(
    int nfeatures,
    double scaleFactor,
    int nlevels,
    int edgeThreshold,
    int firstLevel,
    int WTA_K,
    int scoreType,
    int patchSize,
    int fastThreshold,
    imp1.CvCallback_1 callback,
  ) {
    return _ORB_CreateWithParams_Async(
      nfeatures,
      scaleFactor,
      nlevels,
      edgeThreshold,
      firstLevel,
      WTA_K,
      scoreType,
      patchSize,
      fastThreshold,
      callback,
    );
  }

  late final _ORB_CreateWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_1)>>('ORB_CreateWithParams_Async');
  late final _ORB_CreateWithParams_Async =
      _ORB_CreateWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, double, int, int, int, int, int,
              int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ORB_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _ORB_Create_Async(
      callback,
    );
  }

  late final _ORB_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'ORB_Create_Async');
  late final _ORB_Create_Async = _ORB_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ORB_Detect(
    ORB self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _ORB_Detect(
      self,
      src,
      rval,
    );
  }

  late final _ORB_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ORB, Mat, ffi.Pointer<VecKeyPoint>)>>('ORB_Detect');
  late final _ORB_Detect = _ORB_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ORB, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> ORB_DetectAndCompute(
    ORB self,
    Mat src,
    Mat mask,
    ffi.Pointer<Mat> desc,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _ORB_DetectAndCompute(
      self,
      src,
      mask,
      desc,
      rval,
    );
  }

  late final _ORB_DetectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ORB, Mat, Mat, ffi.Pointer<Mat>,
              ffi.Pointer<VecKeyPoint>)>>('ORB_DetectAndCompute');
  late final _ORB_DetectAndCompute = _ORB_DetectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ORB, Mat, Mat, ffi.Pointer<Mat>, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> ORB_DetectAndCompute_Async(
    ORB self,
    Mat src,
    Mat mask,
    imp1.CvCallback_2 callback,
  ) {
    return _ORB_DetectAndCompute_Async(
      self,
      src,
      mask,
      callback,
    );
  }

  late final _ORB_DetectAndCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ORB, Mat, Mat, imp1.CvCallback_2)>>('ORB_DetectAndCompute_Async');
  late final _ORB_DetectAndCompute_Async =
      _ORB_DetectAndCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ORB, Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> ORB_Detect_Async(
    ORB self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _ORB_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _ORB_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ORB, Mat, imp1.CvCallback_1)>>('ORB_Detect_Async');
  late final _ORB_Detect_Async = _ORB_Detect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ORB, Mat, imp1.CvCallback_1)>();

  void SIFT_Close(
    SIFTPtr f,
  ) {
    return _SIFT_Close(
      f,
    );
  }

  late final _SIFT_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SIFTPtr)>>('SIFT_Close');
  late final _SIFT_Close = _SIFT_ClosePtr.asFunction<void Function(SIFTPtr)>();

  ffi.Pointer<CvStatus> SIFT_Close_Async(
    SIFTPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _SIFT_Close_Async(
      self,
      callback,
    );
  }

  late final _SIFT_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              SIFTPtr, imp1.CvCallback_0)>>('SIFT_Close_Async');
  late final _SIFT_Close_Async = _SIFT_Close_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(SIFTPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> SIFT_Create(
    ffi.Pointer<SIFT> rval,
  ) {
    return _SIFT_Create(
      rval,
    );
  }

  late final _SIFT_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>>('SIFT_Create');
  late final _SIFT_Create = _SIFT_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>();

  ffi.Pointer<CvStatus> SIFT_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _SIFT_Create_Async(
      callback,
    );
  }

  late final _SIFT_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'SIFT_Create_Async');
  late final _SIFT_Create_Async = _SIFT_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SIFT_Detect(
    SIFT f,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _SIFT_Detect(
      f,
      src,
      rval,
    );
  }

  late final _SIFT_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              SIFT, Mat, ffi.Pointer<VecKeyPoint>)>>('SIFT_Detect');
  late final _SIFT_Detect = _SIFT_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(SIFT, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> SIFT_DetectAndCompute(
    SIFT f,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _SIFT_DetectAndCompute(
      f,
      src,
      mask,
      desc,
      rval,
    );
  }

  late final _SIFT_DetectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(SIFT, Mat, Mat, Mat,
              ffi.Pointer<VecKeyPoint>)>>('SIFT_DetectAndCompute');
  late final _SIFT_DetectAndCompute = _SIFT_DetectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> SIFT_DetectAndCompute_Async(
    SIFT self,
    Mat src,
    Mat mask,
    imp1.CvCallback_2 callback,
  ) {
    return _SIFT_DetectAndCompute_Async(
      self,
      src,
      mask,
      callback,
    );
  }

  late final _SIFT_DetectAndCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(SIFT, Mat, Mat,
              imp1.CvCallback_2)>>('SIFT_DetectAndCompute_Async');
  late final _SIFT_DetectAndCompute_Async =
      _SIFT_DetectAndCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(SIFT, Mat, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> SIFT_Detect_Async(
    SIFT self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _SIFT_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _SIFT_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              SIFT, Mat, imp1.CvCallback_1)>>('SIFT_Detect_Async');
  late final _SIFT_Detect_Async = _SIFT_Detect_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(SIFT, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SimpleBlobDetectorParams_Create(
    ffi.Pointer<SimpleBlobDetectorParams> rval,
  ) {
    return _SimpleBlobDetectorParams_Create(
      rval,
    );
  }

  late final _SimpleBlobDetectorParams_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<SimpleBlobDetectorParams>)>>(
      'SimpleBlobDetectorParams_Create');
  late final _SimpleBlobDetectorParams_Create =
      _SimpleBlobDetectorParams_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<SimpleBlobDetectorParams>)>();

  void SimpleBlobDetector_Close(
    SimpleBlobDetectorPtr b,
  ) {
    return _SimpleBlobDetector_Close(
      b,
    );
  }

  late final _SimpleBlobDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetectorPtr)>>(
          'SimpleBlobDetector_Close');
  late final _SimpleBlobDetector_Close = _SimpleBlobDetector_ClosePtr
      .asFunction<void Function(SimpleBlobDetectorPtr)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Close_Async(
    SimpleBlobDetectorPtr self,
    imp1.CvCallback_0 callback,
  ) {
    return _SimpleBlobDetector_Close_Async(
      self,
      callback,
    );
  }

  late final _SimpleBlobDetector_Close_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(SimpleBlobDetectorPtr,
              imp1.CvCallback_0)>>('SimpleBlobDetector_Close_Async');
  late final _SimpleBlobDetector_Close_Async =
      _SimpleBlobDetector_Close_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              SimpleBlobDetectorPtr, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Create(
    ffi.Pointer<SimpleBlobDetector> rval,
  ) {
    return _SimpleBlobDetector_Create(
      rval,
    );
  }

  late final _SimpleBlobDetector_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<SimpleBlobDetector>)>>('SimpleBlobDetector_Create');
  late final _SimpleBlobDetector_Create =
      _SimpleBlobDetector_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetector>)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _SimpleBlobDetector_Create_Async(
      callback,
    );
  }

  late final _SimpleBlobDetector_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'SimpleBlobDetector_Create_Async');
  late final _SimpleBlobDetector_Create_Async =
      _SimpleBlobDetector_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Create_WithParams(
    SimpleBlobDetectorParams params,
    ffi.Pointer<SimpleBlobDetector> rval,
  ) {
    return _SimpleBlobDetector_Create_WithParams(
      params,
      rval,
    );
  }

  late final _SimpleBlobDetector_Create_WithParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>>(
      'SimpleBlobDetector_Create_WithParams');
  late final _SimpleBlobDetector_Create_WithParams =
      _SimpleBlobDetector_Create_WithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Create_WithParams_Async(
    SimpleBlobDetectorParams params,
    imp1.CvCallback_1 callback,
  ) {
    return _SimpleBlobDetector_Create_WithParams_Async(
      params,
      callback,
    );
  }

  late final _SimpleBlobDetector_Create_WithParams_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  SimpleBlobDetectorParams, imp1.CvCallback_1)>>(
      'SimpleBlobDetector_Create_WithParams_Async');
  late final _SimpleBlobDetector_Create_WithParams_Async =
      _SimpleBlobDetector_Create_WithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              SimpleBlobDetectorParams, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Detect(
    SimpleBlobDetector b,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
  ) {
    return _SimpleBlobDetector_Detect(
      b,
      src,
      rval,
    );
  }

  late final _SimpleBlobDetector_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(SimpleBlobDetector, Mat,
              ffi.Pointer<VecKeyPoint>)>>('SimpleBlobDetector_Detect');
  late final _SimpleBlobDetector_Detect =
      _SimpleBlobDetector_DetectPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<CvStatus> SimpleBlobDetector_Detect_Async(
    SimpleBlobDetector self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _SimpleBlobDetector_Detect_Async(
      self,
      src,
      callback,
    );
  }

  late final _SimpleBlobDetector_Detect_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(SimpleBlobDetector, Mat,
              imp1.CvCallback_1)>>('SimpleBlobDetector_Detect_Async');
  late final _SimpleBlobDetector_Detect_Async =
      _SimpleBlobDetector_Detect_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              SimpleBlobDetector, Mat, imp1.CvCallback_1)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeFeatures2d _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AKAZEPtr)>>
      get AKAZE_Close => _library._AKAZE_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(AKAZEPtr, imp1.CvCallback_0)>>
      get AKAZE_Close_Async => _library._AKAZE_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetectorPtr)>>
      get AgastFeatureDetector_Close => _library._AgastFeatureDetector_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  AgastFeatureDetectorPtr, imp1.CvCallback_0)>>
      get AgastFeatureDetector_Close_Async =>
          _library._AgastFeatureDetector_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BFMatcherPtr)>>
      get BFMatcher_Close => _library._BFMatcher_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(BFMatcherPtr, imp1.CvCallback_0)>>
      get BFMatcher_Close_Async => _library._BFMatcher_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BRISKPtr)>>
      get BRISK_Close => _library._BRISK_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(BRISKPtr, imp1.CvCallback_0)>>
      get BRISK_Close_Async => _library._BRISK_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FastFeatureDetectorPtr)>>
      get FastFeatureDetector_Close => _library._FastFeatureDetector_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  FastFeatureDetectorPtr, imp1.CvCallback_0)>>
      get FastFeatureDetector_Close_Async =>
          _library._FastFeatureDetector_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcherPtr)>>
      get FlannBasedMatcher_Close => _library._FlannBasedMatcher_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  FlannBasedMatcherPtr, imp1.CvCallback_0)>>
      get FlannBasedMatcher_Close_Async =>
          _library._FlannBasedMatcher_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GFTTDetectorPtr)>>
      get GFTTDetector_Close => _library._GFTTDetector_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  GFTTDetectorPtr, imp1.CvCallback_0)>>
      get GFTTDetector_Close_Async => _library._GFTTDetector_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KAZEPtr)>> get KAZE_Close =>
      _library._KAZE_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(KAZEPtr, imp1.CvCallback_0)>>
      get KAZE_Close_Async => _library._KAZE_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MSERPtr)>> get MSER_Close =>
      _library._MSER_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(MSERPtr, imp1.CvCallback_0)>>
      get MSER_Close_Async => _library._MSER_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ORBPtr)>> get ORB_Close =>
      _library._ORB_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ORBPtr, imp1.CvCallback_0)>>
      get ORB_Close_Async => _library._ORB_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SIFTPtr)>> get SIFT_Close =>
      _library._SIFT_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(SIFTPtr, imp1.CvCallback_0)>>
      get SIFT_Close_Async => _library._SIFT_Close_AsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetectorPtr)>>
      get SimpleBlobDetector_Close => _library._SimpleBlobDetector_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  SimpleBlobDetectorPtr, imp1.CvCallback_0)>>
      get SimpleBlobDetector_Close_Async =>
          _library._SimpleBlobDetector_Close_AsyncPtr;
}

final class AKAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AKAZEPtr = ffi.Pointer<AKAZE>;

final class AgastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AgastFeatureDetectorPtr = ffi.Pointer<AgastFeatureDetector>;

final class BFMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BFMatcherPtr = ffi.Pointer<BFMatcher>;

final class BRISK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BRISKPtr = ffi.Pointer<BRISK>;
typedef CvStatus = imp1.CvStatus;

final class FastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FastFeatureDetectorPtr = ffi.Pointer<FastFeatureDetector>;

final class FlannBasedMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FlannBasedMatcherPtr = ffi.Pointer<FlannBasedMatcher>;

final class GFTTDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFTTDetectorPtr = ffi.Pointer<GFTTDetector>;

final class KAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KAZEPtr = ffi.Pointer<KAZE>;

final class MSER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MSERPtr = ffi.Pointer<MSER>;
typedef Mat = imp1.Mat;

final class ORB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ORBPtr = ffi.Pointer<ORB>;

final class SIFT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef SIFTPtr = ffi.Pointer<SIFT>;
typedef Scalar = imp1.Scalar;

final class SimpleBlobDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

typedef SimpleBlobDetectorPtr = ffi.Pointer<SimpleBlobDetector>;
typedef VecChar = imp1.VecChar;
typedef VecDMatch = imp1.VecDMatch;
typedef VecKeyPoint = imp1.VecKeyPoint;
typedef VecVecDMatch = imp1.VecVecDMatch;
