// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Contrib
///
class CvNativeContrib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeContrib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeContrib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void ArucoDetectorParameters_Close(
    ArucoDetectorParametersPtr ap,
  ) {
    return _ArucoDetectorParameters_Close(
      ap,
    );
  }

  late final _ArucoDetectorParameters_ClosePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ArucoDetectorParametersPtr)>>(
      'ArucoDetectorParameters_Close');
  late final _ArucoDetectorParameters_Close = _ArucoDetectorParameters_ClosePtr
      .asFunction<void Function(ArucoDetectorParametersPtr)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_Create(
    ffi.Pointer<ArucoDetectorParameters> rval,
  ) {
    return _ArucoDetectorParameters_Create(
      rval,
    );
  }

  late final _ArucoDetectorParameters_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<ArucoDetectorParameters>)>>(
      'ArucoDetectorParameters_Create');
  late final _ArucoDetectorParameters_Create =
      _ArucoDetectorParameters_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ArucoDetectorParameters>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_Create_Async(
      callback,
    );
  }

  late final _ArucoDetectorParameters_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_Create_Async');
  late final _ArucoDetectorParameters_Create_Async =
      _ArucoDetectorParameters_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAdaptiveThreshConstant(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshConstant(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshConstantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetAdaptiveThreshConstant');
  late final _ArucoDetectorParameters_GetAdaptiveThreshConstant =
      _ArucoDetectorParameters_GetAdaptiveThreshConstantPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAdaptiveThreshConstant_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshConstant_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshConstant_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshConstant_Async');
  late final _ArucoDetectorParameters_GetAdaptiveThreshConstant_Async =
      _ArucoDetectorParameters_GetAdaptiveThreshConstant_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMaxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMaxPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax_Async');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax_Async =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMinPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMinPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin_Async');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin_Async =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStepPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStepPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep_Async');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep_Async =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagCriticalRad(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagCriticalRad(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagCriticalRadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>>(
      'ArucoDetectorParameters_GetAprilTagCriticalRad');
  late final _ArucoDetectorParameters_GetAprilTagCriticalRad =
      _ArucoDetectorParameters_GetAprilTagCriticalRadPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagCriticalRad_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagCriticalRad_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagCriticalRad_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetAprilTagCriticalRad_Async');
  late final _ArucoDetectorParameters_GetAprilTagCriticalRad_Async =
      _ArucoDetectorParameters_GetAprilTagCriticalRad_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagDeglitch(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagDeglitch(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagDeglitchPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAprilTagDeglitch');
  late final _ArucoDetectorParameters_GetAprilTagDeglitch =
      _ArucoDetectorParameters_GetAprilTagDeglitchPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagDeglitch_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagDeglitch_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagDeglitch_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetAprilTagDeglitch_Async');
  late final _ArucoDetectorParameters_GetAprilTagDeglitch_Async =
      _ArucoDetectorParameters_GetAprilTagDeglitch_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMaxLineFitMse(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMaxLineFitMse(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMaxLineFitMsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>>(
      'ArucoDetectorParameters_GetAprilTagMaxLineFitMse');
  late final _ArucoDetectorParameters_GetAprilTagMaxLineFitMse =
      _ArucoDetectorParameters_GetAprilTagMaxLineFitMsePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMaxLineFitMse_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMaxLineFitMse_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMaxLineFitMse_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAprilTagMaxLineFitMse_Async');
  late final _ArucoDetectorParameters_GetAprilTagMaxLineFitMse_Async =
      _ArucoDetectorParameters_GetAprilTagMaxLineFitMse_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMaxNmaxima(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMaxNmaxima(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMaxNmaximaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAprilTagMaxNmaxima');
  late final _ArucoDetectorParameters_GetAprilTagMaxNmaxima =
      _ArucoDetectorParameters_GetAprilTagMaxNmaximaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMaxNmaxima_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMaxNmaxima_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMaxNmaxima_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetAprilTagMaxNmaxima_Async');
  late final _ArucoDetectorParameters_GetAprilTagMaxNmaxima_Async =
      _ArucoDetectorParameters_GetAprilTagMaxNmaxima_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMinClusterPixels(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMinClusterPixels(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMinClusterPixelsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAprilTagMinClusterPixels');
  late final _ArucoDetectorParameters_GetAprilTagMinClusterPixels =
      _ArucoDetectorParameters_GetAprilTagMinClusterPixelsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetAprilTagMinClusterPixels_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMinClusterPixels_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMinClusterPixels_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAprilTagMinClusterPixels_Async');
  late final _ArucoDetectorParameters_GetAprilTagMinClusterPixels_Async =
      _ArucoDetectorParameters_GetAprilTagMinClusterPixels_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiffPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff');
  late final _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff =
      _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiffPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff_Async');
  late final _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff_Async =
      _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagQuadDecimate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagQuadDecimate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagQuadDecimatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>>(
      'ArucoDetectorParameters_GetAprilTagQuadDecimate');
  late final _ArucoDetectorParameters_GetAprilTagQuadDecimate =
      _ArucoDetectorParameters_GetAprilTagQuadDecimatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagQuadDecimate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagQuadDecimate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagQuadDecimate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetAprilTagQuadDecimate_Async');
  late final _ArucoDetectorParameters_GetAprilTagQuadDecimate_Async =
      _ArucoDetectorParameters_GetAprilTagQuadDecimate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagQuadSigma(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _ArucoDetectorParameters_GetAprilTagQuadSigma(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagQuadSigmaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>>(
      'ArucoDetectorParameters_GetAprilTagQuadSigma');
  late final _ArucoDetectorParameters_GetAprilTagQuadSigma =
      _ArucoDetectorParameters_GetAprilTagQuadSigmaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagQuadSigma_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetAprilTagQuadSigma_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagQuadSigma_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetAprilTagQuadSigma_Async');
  late final _ArucoDetectorParameters_GetAprilTagQuadSigma_Async =
      _ArucoDetectorParameters_GetAprilTagQuadSigma_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetCornerRefinementMaxIterations(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMaxIterations(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMaxIterationsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
          'ArucoDetectorParameters_GetCornerRefinementMaxIterations');
  late final _ArucoDetectorParameters_GetCornerRefinementMaxIterations =
      _ArucoDetectorParameters_GetCornerRefinementMaxIterationsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetCornerRefinementMaxIterations_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMaxIterations_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMaxIterations_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetCornerRefinementMaxIterations_Async');
  late final _ArucoDetectorParameters_GetCornerRefinementMaxIterations_Async =
      _ArucoDetectorParameters_GetCornerRefinementMaxIterations_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetCornerRefinementMethod(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMethod(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMethodPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetCornerRefinementMethod');
  late final _ArucoDetectorParameters_GetCornerRefinementMethod =
      _ArucoDetectorParameters_GetCornerRefinementMethodPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetCornerRefinementMethod_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMethod_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMethod_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetCornerRefinementMethod_Async');
  late final _ArucoDetectorParameters_GetCornerRefinementMethod_Async =
      _ArucoDetectorParameters_GetCornerRefinementMethod_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetCornerRefinementMinAccuracy(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMinAccuracy(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMinAccuracyPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
          'ArucoDetectorParameters_GetCornerRefinementMinAccuracy');
  late final _ArucoDetectorParameters_GetCornerRefinementMinAccuracy =
      _ArucoDetectorParameters_GetCornerRefinementMinAccuracyPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetCornerRefinementMinAccuracy_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMinAccuracy_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMinAccuracy_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetCornerRefinementMinAccuracy_Async');
  late final _ArucoDetectorParameters_GetCornerRefinementMinAccuracy_Async =
      _ArucoDetectorParameters_GetCornerRefinementMinAccuracy_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetCornerRefinementWinSize(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementWinSize(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementWinSizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetCornerRefinementWinSize');
  late final _ArucoDetectorParameters_GetCornerRefinementWinSize =
      _ArucoDetectorParameters_GetCornerRefinementWinSizePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetCornerRefinementWinSize_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementWinSize_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementWinSize_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetCornerRefinementWinSize_Async');
  late final _ArucoDetectorParameters_GetCornerRefinementWinSize_Async =
      _ArucoDetectorParameters_GetCornerRefinementWinSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetDetectInvertedMarker(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _ArucoDetectorParameters_GetDetectInvertedMarker(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetDetectInvertedMarkerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Bool>)>>(
      'ArucoDetectorParameters_GetDetectInvertedMarker');
  late final _ArucoDetectorParameters_GetDetectInvertedMarker =
      _ArucoDetectorParameters_GetDetectInvertedMarkerPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetDetectInvertedMarker_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetDetectInvertedMarker_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetDetectInvertedMarker_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetDetectInvertedMarker_Async');
  late final _ArucoDetectorParameters_GetDetectInvertedMarker_Async =
      _ArucoDetectorParameters_GetDetectInvertedMarker_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetErrorCorrectionRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetErrorCorrectionRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetErrorCorrectionRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetErrorCorrectionRate');
  late final _ArucoDetectorParameters_GetErrorCorrectionRate =
      _ArucoDetectorParameters_GetErrorCorrectionRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetErrorCorrectionRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetErrorCorrectionRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetErrorCorrectionRate_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetErrorCorrectionRate_Async');
  late final _ArucoDetectorParameters_GetErrorCorrectionRate_Async =
      _ArucoDetectorParameters_GetErrorCorrectionRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMarkerBorderBits(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetMarkerBorderBits(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMarkerBorderBitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetMarkerBorderBits');
  late final _ArucoDetectorParameters_GetMarkerBorderBits =
      _ArucoDetectorParameters_GetMarkerBorderBitsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMarkerBorderBits_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMarkerBorderBits_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMarkerBorderBits_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetMarkerBorderBits_Async');
  late final _ArucoDetectorParameters_GetMarkerBorderBits_Async =
      _ArucoDetectorParameters_GetMarkerBorderBits_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
          'ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate');
  late final _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate =
      _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate_Async');
  late final _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate_Async =
      _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMaxMarkerPerimeterRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetMaxMarkerPerimeterRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMaxMarkerPerimeterRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetMaxMarkerPerimeterRate');
  late final _ArucoDetectorParameters_GetMaxMarkerPerimeterRate =
      _ArucoDetectorParameters_GetMaxMarkerPerimeterRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMaxMarkerPerimeterRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMaxMarkerPerimeterRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMaxMarkerPerimeterRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetMaxMarkerPerimeterRate_Async');
  late final _ArucoDetectorParameters_GetMaxMarkerPerimeterRate_Async =
      _ArucoDetectorParameters_GetMaxMarkerPerimeterRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinCornerDistanceRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetMinCornerDistanceRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMinCornerDistanceRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetMinCornerDistanceRate');
  late final _ArucoDetectorParameters_GetMinCornerDistanceRate =
      _ArucoDetectorParameters_GetMinCornerDistanceRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinCornerDistanceRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMinCornerDistanceRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMinCornerDistanceRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetMinCornerDistanceRate_Async');
  late final _ArucoDetectorParameters_GetMinCornerDistanceRate_Async =
      _ArucoDetectorParameters_GetMinCornerDistanceRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinDistanceToBorder(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetMinDistanceToBorder(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMinDistanceToBorderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
      'ArucoDetectorParameters_GetMinDistanceToBorder');
  late final _ArucoDetectorParameters_GetMinDistanceToBorder =
      _ArucoDetectorParameters_GetMinDistanceToBorderPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinDistanceToBorder_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMinDistanceToBorder_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMinDistanceToBorder_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetMinDistanceToBorder_Async');
  late final _ArucoDetectorParameters_GetMinDistanceToBorder_Async =
      _ArucoDetectorParameters_GetMinDistanceToBorder_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinMarkerDistanceRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetMinMarkerDistanceRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMinMarkerDistanceRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetMinMarkerDistanceRate');
  late final _ArucoDetectorParameters_GetMinMarkerDistanceRate =
      _ArucoDetectorParameters_GetMinMarkerDistanceRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinMarkerDistanceRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMinMarkerDistanceRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMinMarkerDistanceRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetMinMarkerDistanceRate_Async');
  late final _ArucoDetectorParameters_GetMinMarkerDistanceRate_Async =
      _ArucoDetectorParameters_GetMinMarkerDistanceRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinMarkerPerimeterRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetMinMarkerPerimeterRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMinMarkerPerimeterRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetMinMarkerPerimeterRate');
  late final _ArucoDetectorParameters_GetMinMarkerPerimeterRate =
      _ArucoDetectorParameters_GetMinMarkerPerimeterRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinMarkerPerimeterRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMinMarkerPerimeterRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMinMarkerPerimeterRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetMinMarkerPerimeterRate_Async');
  late final _ArucoDetectorParameters_GetMinMarkerPerimeterRate_Async =
      _ArucoDetectorParameters_GetMinMarkerPerimeterRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinOtsuStdDev(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetMinOtsuStdDev(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetMinOtsuStdDevPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
      'ArucoDetectorParameters_GetMinOtsuStdDev');
  late final _ArucoDetectorParameters_GetMinOtsuStdDev =
      _ArucoDetectorParameters_GetMinOtsuStdDevPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinOtsuStdDev_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetMinOtsuStdDev_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetMinOtsuStdDev_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>>(
      'ArucoDetectorParameters_GetMinOtsuStdDev_Async');
  late final _ArucoDetectorParameters_GetMinOtsuStdDev_Async =
      _ArucoDetectorParameters_GetMinOtsuStdDev_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCellPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
          'ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell');
  late final _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell =
      _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCellPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell_Async');
  late final _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell_Async =
      _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCellPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>>(
          'ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell');
  late final _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell =
      _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCellPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell_Async');
  late final _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell_Async =
      _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_GetPolygonalApproxAccuracyRate(
    ArucoDetectorParameters ap,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate(
      ap,
      rval,
    );
  }

  late final _ArucoDetectorParameters_GetPolygonalApproxAccuracyRatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>>(
          'ArucoDetectorParameters_GetPolygonalApproxAccuracyRate');
  late final _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate =
      _ArucoDetectorParameters_GetPolygonalApproxAccuracyRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_GetPolygonalApproxAccuracyRate_Async(
    ArucoDetectorParameters ap,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate_Async(
      ap,
      callback,
    );
  }

  late final _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, imp1.CvCallback_1)>>(
          'ArucoDetectorParameters_GetPolygonalApproxAccuracyRate_Async');
  late final _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate_Async =
      _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAdaptiveThreshConstant(
    ArucoDetectorParameters ap,
    double adaptiveThreshConstant,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshConstant(
      ap,
      adaptiveThreshConstant,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshConstantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Double)>>(
      'ArucoDetectorParameters_SetAdaptiveThreshConstant');
  late final _ArucoDetectorParameters_SetAdaptiveThreshConstant =
      _ArucoDetectorParameters_SetAdaptiveThreshConstantPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAdaptiveThreshConstant_Async(
    ArucoDetectorParameters ap,
    double adaptiveThreshConstant,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshConstant_Async(
      ap,
      adaptiveThreshConstant,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshConstant_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAdaptiveThreshConstant_Async');
  late final _ArucoDetectorParameters_SetAdaptiveThreshConstant_Async =
      _ArucoDetectorParameters_SetAdaptiveThreshConstant_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeMax,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax(
      ap,
      adaptiveThreshWinSizeMax,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMaxPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax_Async(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeMax,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax_Async(
      ap,
      adaptiveThreshWinSizeMax,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax_Async');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax_Async =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeMin,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin(
      ap,
      adaptiveThreshWinSizeMin,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMinPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin_Async(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeMin,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin_Async(
      ap,
      adaptiveThreshWinSizeMin,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin_Async');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin_Async =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeStep,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep(
      ap,
      adaptiveThreshWinSizeStep,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStepPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStepPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep_Async(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeStep,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep_Async(
      ap,
      adaptiveThreshWinSizeStep,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep_Async');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep_Async =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagCriticalRad(
    ArucoDetectorParameters ap,
    double aprilTagCriticalRad,
  ) {
    return _ArucoDetectorParameters_SetAprilTagCriticalRad(
      ap,
      aprilTagCriticalRad,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagCriticalRadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagCriticalRad');
  late final _ArucoDetectorParameters_SetAprilTagCriticalRad =
      _ArucoDetectorParameters_SetAprilTagCriticalRadPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagCriticalRad_Async(
    ArucoDetectorParameters ap,
    double aprilTagCriticalRad,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagCriticalRad_Async(
      ap,
      aprilTagCriticalRad,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagCriticalRad_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Float, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetAprilTagCriticalRad_Async');
  late final _ArucoDetectorParameters_SetAprilTagCriticalRad_Async =
      _ArucoDetectorParameters_SetAprilTagCriticalRad_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagDeglitch(
    ArucoDetectorParameters ap,
    int aprilTagDeglitch,
  ) {
    return _ArucoDetectorParameters_SetAprilTagDeglitch(
      ap,
      aprilTagDeglitch,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagDeglitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetAprilTagDeglitch');
  late final _ArucoDetectorParameters_SetAprilTagDeglitch =
      _ArucoDetectorParameters_SetAprilTagDeglitchPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagDeglitch_Async(
    ArucoDetectorParameters ap,
    int aprilTagDeglitch,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagDeglitch_Async(
      ap,
      aprilTagDeglitch,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagDeglitch_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetAprilTagDeglitch_Async');
  late final _ArucoDetectorParameters_SetAprilTagDeglitch_Async =
      _ArucoDetectorParameters_SetAprilTagDeglitch_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMaxLineFitMse(
    ArucoDetectorParameters ap,
    double aprilTagMaxLineFitMse,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMaxLineFitMse(
      ap,
      aprilTagMaxLineFitMse,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMaxLineFitMsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagMaxLineFitMse');
  late final _ArucoDetectorParameters_SetAprilTagMaxLineFitMse =
      _ArucoDetectorParameters_SetAprilTagMaxLineFitMsePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMaxLineFitMse_Async(
    ArucoDetectorParameters ap,
    double aprilTagMaxLineFitMse,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMaxLineFitMse_Async(
      ap,
      aprilTagMaxLineFitMse,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMaxLineFitMse_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Float, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAprilTagMaxLineFitMse_Async');
  late final _ArucoDetectorParameters_SetAprilTagMaxLineFitMse_Async =
      _ArucoDetectorParameters_SetAprilTagMaxLineFitMse_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMaxNmaxima(
    ArucoDetectorParameters ap,
    int aprilTagMaxNmaxima,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMaxNmaxima(
      ap,
      aprilTagMaxNmaxima,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMaxNmaximaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetAprilTagMaxNmaxima');
  late final _ArucoDetectorParameters_SetAprilTagMaxNmaxima =
      _ArucoDetectorParameters_SetAprilTagMaxNmaximaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMaxNmaxima_Async(
    ArucoDetectorParameters ap,
    int aprilTagMaxNmaxima,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMaxNmaxima_Async(
      ap,
      aprilTagMaxNmaxima,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMaxNmaxima_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetAprilTagMaxNmaxima_Async');
  late final _ArucoDetectorParameters_SetAprilTagMaxNmaxima_Async =
      _ArucoDetectorParameters_SetAprilTagMaxNmaxima_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMinClusterPixels(
    ArucoDetectorParameters ap,
    int aprilTagMinClusterPixels,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMinClusterPixels(
      ap,
      aprilTagMinClusterPixels,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMinClusterPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetAprilTagMinClusterPixels');
  late final _ArucoDetectorParameters_SetAprilTagMinClusterPixels =
      _ArucoDetectorParameters_SetAprilTagMinClusterPixelsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetAprilTagMinClusterPixels_Async(
    ArucoDetectorParameters ap,
    int aprilTagMinClusterPixels,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMinClusterPixels_Async(
      ap,
      aprilTagMinClusterPixels,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMinClusterPixels_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAprilTagMinClusterPixels_Async');
  late final _ArucoDetectorParameters_SetAprilTagMinClusterPixels_Async =
      _ArucoDetectorParameters_SetAprilTagMinClusterPixels_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff(
    ArucoDetectorParameters ap,
    int aprilTagMinWhiteBlackDiff,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff(
      ap,
      aprilTagMinWhiteBlackDiff,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiffPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff');
  late final _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff =
      _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiffPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff_Async(
    ArucoDetectorParameters ap,
    int aprilTagMinWhiteBlackDiff,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff_Async(
      ap,
      aprilTagMinWhiteBlackDiff,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff_Async');
  late final _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff_Async =
      _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagQuadDecimate(
    ArucoDetectorParameters ap,
    double aprilTagQuadDecimate,
  ) {
    return _ArucoDetectorParameters_SetAprilTagQuadDecimate(
      ap,
      aprilTagQuadDecimate,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagQuadDecimatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagQuadDecimate');
  late final _ArucoDetectorParameters_SetAprilTagQuadDecimate =
      _ArucoDetectorParameters_SetAprilTagQuadDecimatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagQuadDecimate_Async(
    ArucoDetectorParameters ap,
    double aprilTagQuadDecimate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagQuadDecimate_Async(
      ap,
      aprilTagQuadDecimate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagQuadDecimate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Float, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetAprilTagQuadDecimate_Async');
  late final _ArucoDetectorParameters_SetAprilTagQuadDecimate_Async =
      _ArucoDetectorParameters_SetAprilTagQuadDecimate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagQuadSigma(
    ArucoDetectorParameters ap,
    double aprilTagQuadSigma,
  ) {
    return _ArucoDetectorParameters_SetAprilTagQuadSigma(
      ap,
      aprilTagQuadSigma,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagQuadSigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagQuadSigma');
  late final _ArucoDetectorParameters_SetAprilTagQuadSigma =
      _ArucoDetectorParameters_SetAprilTagQuadSigmaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagQuadSigma_Async(
    ArucoDetectorParameters ap,
    double aprilTagQuadSigma,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetAprilTagQuadSigma_Async(
      ap,
      aprilTagQuadSigma,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagQuadSigma_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Float, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetAprilTagQuadSigma_Async');
  late final _ArucoDetectorParameters_SetAprilTagQuadSigma_Async =
      _ArucoDetectorParameters_SetAprilTagQuadSigma_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetCornerRefinementMaxIterations(
    ArucoDetectorParameters ap,
    int cornerRefinementMaxIterations,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMaxIterations(
      ap,
      cornerRefinementMaxIterations,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMaxIterationsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int)>>(
          'ArucoDetectorParameters_SetCornerRefinementMaxIterations');
  late final _ArucoDetectorParameters_SetCornerRefinementMaxIterations =
      _ArucoDetectorParameters_SetCornerRefinementMaxIterationsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetCornerRefinementMaxIterations_Async(
    ArucoDetectorParameters ap,
    int cornerRefinementMaxIterations,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMaxIterations_Async(
      ap,
      cornerRefinementMaxIterations,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMaxIterations_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetCornerRefinementMaxIterations_Async');
  late final _ArucoDetectorParameters_SetCornerRefinementMaxIterations_Async =
      _ArucoDetectorParameters_SetCornerRefinementMaxIterations_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetCornerRefinementMethod(
    ArucoDetectorParameters ap,
    int cornerRefinementMethod,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMethod(
      ap,
      cornerRefinementMethod,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetCornerRefinementMethod');
  late final _ArucoDetectorParameters_SetCornerRefinementMethod =
      _ArucoDetectorParameters_SetCornerRefinementMethodPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetCornerRefinementMethod_Async(
    ArucoDetectorParameters ap,
    int cornerRefinementMethod,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMethod_Async(
      ap,
      cornerRefinementMethod,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMethod_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetCornerRefinementMethod_Async');
  late final _ArucoDetectorParameters_SetCornerRefinementMethod_Async =
      _ArucoDetectorParameters_SetCornerRefinementMethod_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetCornerRefinementMinAccuracy(
    ArucoDetectorParameters ap,
    double cornerRefinementMinAccuracy,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMinAccuracy(
      ap,
      cornerRefinementMinAccuracy,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMinAccuracyPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetCornerRefinementMinAccuracy');
  late final _ArucoDetectorParameters_SetCornerRefinementMinAccuracy =
      _ArucoDetectorParameters_SetCornerRefinementMinAccuracyPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetCornerRefinementMinAccuracy_Async(
    ArucoDetectorParameters ap,
    double cornerRefinementMinAccuracy,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMinAccuracy_Async(
      ap,
      cornerRefinementMinAccuracy,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMinAccuracy_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetCornerRefinementMinAccuracy_Async');
  late final _ArucoDetectorParameters_SetCornerRefinementMinAccuracy_Async =
      _ArucoDetectorParameters_SetCornerRefinementMinAccuracy_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetCornerRefinementWinSize(
    ArucoDetectorParameters ap,
    int cornerRefinementWinSize,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementWinSize(
      ap,
      cornerRefinementWinSize,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementWinSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetCornerRefinementWinSize');
  late final _ArucoDetectorParameters_SetCornerRefinementWinSize =
      _ArucoDetectorParameters_SetCornerRefinementWinSizePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetCornerRefinementWinSize_Async(
    ArucoDetectorParameters ap,
    int cornerRefinementWinSize,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementWinSize_Async(
      ap,
      cornerRefinementWinSize,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementWinSize_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetCornerRefinementWinSize_Async');
  late final _ArucoDetectorParameters_SetCornerRefinementWinSize_Async =
      _ArucoDetectorParameters_SetCornerRefinementWinSize_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetDetectInvertedMarker(
    ArucoDetectorParameters ap,
    bool detectInvertedMarker,
  ) {
    return _ArucoDetectorParameters_SetDetectInvertedMarker(
      ap,
      detectInvertedMarker,
    );
  }

  late final _ArucoDetectorParameters_SetDetectInvertedMarkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Bool)>>('ArucoDetectorParameters_SetDetectInvertedMarker');
  late final _ArucoDetectorParameters_SetDetectInvertedMarker =
      _ArucoDetectorParameters_SetDetectInvertedMarkerPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, bool)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetDetectInvertedMarker_Async(
    ArucoDetectorParameters ap,
    bool detectInvertedMarker,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetDetectInvertedMarker_Async(
      ap,
      detectInvertedMarker,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetDetectInvertedMarker_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Bool, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetDetectInvertedMarker_Async');
  late final _ArucoDetectorParameters_SetDetectInvertedMarker_Async =
      _ArucoDetectorParameters_SetDetectInvertedMarker_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetErrorCorrectionRate(
    ArucoDetectorParameters ap,
    double errorCorrectionRate,
  ) {
    return _ArucoDetectorParameters_SetErrorCorrectionRate(
      ap,
      errorCorrectionRate,
    );
  }

  late final _ArucoDetectorParameters_SetErrorCorrectionRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetErrorCorrectionRate');
  late final _ArucoDetectorParameters_SetErrorCorrectionRate =
      _ArucoDetectorParameters_SetErrorCorrectionRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetErrorCorrectionRate_Async(
    ArucoDetectorParameters ap,
    double errorCorrectionRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetErrorCorrectionRate_Async(
      ap,
      errorCorrectionRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetErrorCorrectionRate_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetErrorCorrectionRate_Async');
  late final _ArucoDetectorParameters_SetErrorCorrectionRate_Async =
      _ArucoDetectorParameters_SetErrorCorrectionRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMarkerBorderBits(
    ArucoDetectorParameters ap,
    int markerBorderBits,
  ) {
    return _ArucoDetectorParameters_SetMarkerBorderBits(
      ap,
      markerBorderBits,
    );
  }

  late final _ArucoDetectorParameters_SetMarkerBorderBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetMarkerBorderBits');
  late final _ArucoDetectorParameters_SetMarkerBorderBits =
      _ArucoDetectorParameters_SetMarkerBorderBitsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMarkerBorderBits_Async(
    ArucoDetectorParameters ap,
    int markerBorderBits,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMarkerBorderBits_Async(
      ap,
      markerBorderBits,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMarkerBorderBits_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetMarkerBorderBits_Async');
  late final _ArucoDetectorParameters_SetMarkerBorderBits_Async =
      _ArucoDetectorParameters_SetMarkerBorderBits_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate(
    ArucoDetectorParameters ap,
    double maxErroneousBitsInBorderRate,
  ) {
    return _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate(
      ap,
      maxErroneousBitsInBorderRate,
    );
  }

  late final _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate');
  late final _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate =
      _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate_Async(
    ArucoDetectorParameters ap,
    double maxErroneousBitsInBorderRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate_Async(
      ap,
      maxErroneousBitsInBorderRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate_Async');
  late final _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate_Async =
      _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMaxMarkerPerimeterRate(
    ArucoDetectorParameters ap,
    double maxMarkerPerimeterRate,
  ) {
    return _ArucoDetectorParameters_SetMaxMarkerPerimeterRate(
      ap,
      maxMarkerPerimeterRate,
    );
  }

  late final _ArucoDetectorParameters_SetMaxMarkerPerimeterRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Double)>>(
      'ArucoDetectorParameters_SetMaxMarkerPerimeterRate');
  late final _ArucoDetectorParameters_SetMaxMarkerPerimeterRate =
      _ArucoDetectorParameters_SetMaxMarkerPerimeterRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMaxMarkerPerimeterRate_Async(
    ArucoDetectorParameters ap,
    double maxMarkerPerimeterRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMaxMarkerPerimeterRate_Async(
      ap,
      maxMarkerPerimeterRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMaxMarkerPerimeterRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetMaxMarkerPerimeterRate_Async');
  late final _ArucoDetectorParameters_SetMaxMarkerPerimeterRate_Async =
      _ArucoDetectorParameters_SetMaxMarkerPerimeterRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinCornerDistanceRate(
    ArucoDetectorParameters ap,
    double minCornerDistanceRate,
  ) {
    return _ArucoDetectorParameters_SetMinCornerDistanceRate(
      ap,
      minCornerDistanceRate,
    );
  }

  late final _ArucoDetectorParameters_SetMinCornerDistanceRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetMinCornerDistanceRate');
  late final _ArucoDetectorParameters_SetMinCornerDistanceRate =
      _ArucoDetectorParameters_SetMinCornerDistanceRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinCornerDistanceRate_Async(
    ArucoDetectorParameters ap,
    double minCornerDistanceRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMinCornerDistanceRate_Async(
      ap,
      minCornerDistanceRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMinCornerDistanceRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetMinCornerDistanceRate_Async');
  late final _ArucoDetectorParameters_SetMinCornerDistanceRate_Async =
      _ArucoDetectorParameters_SetMinCornerDistanceRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinDistanceToBorder(
    ArucoDetectorParameters ap,
    int minDistanceToBorder,
  ) {
    return _ArucoDetectorParameters_SetMinDistanceToBorder(
      ap,
      minDistanceToBorder,
    );
  }

  late final _ArucoDetectorParameters_SetMinDistanceToBorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Int)>>('ArucoDetectorParameters_SetMinDistanceToBorder');
  late final _ArucoDetectorParameters_SetMinDistanceToBorder =
      _ArucoDetectorParameters_SetMinDistanceToBorderPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinDistanceToBorder_Async(
    ArucoDetectorParameters ap,
    int minDistanceToBorder,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMinDistanceToBorder_Async(
      ap,
      minDistanceToBorder,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMinDistanceToBorder_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetMinDistanceToBorder_Async');
  late final _ArucoDetectorParameters_SetMinDistanceToBorder_Async =
      _ArucoDetectorParameters_SetMinDistanceToBorder_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinMarkerDistanceRate(
    ArucoDetectorParameters ap,
    double minMarkerDistanceRate,
  ) {
    return _ArucoDetectorParameters_SetMinMarkerDistanceRate(
      ap,
      minMarkerDistanceRate,
    );
  }

  late final _ArucoDetectorParameters_SetMinMarkerDistanceRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetMinMarkerDistanceRate');
  late final _ArucoDetectorParameters_SetMinMarkerDistanceRate =
      _ArucoDetectorParameters_SetMinMarkerDistanceRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinMarkerDistanceRate_Async(
    ArucoDetectorParameters ap,
    double minMarkerDistanceRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMinMarkerDistanceRate_Async(
      ap,
      minMarkerDistanceRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMinMarkerDistanceRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetMinMarkerDistanceRate_Async');
  late final _ArucoDetectorParameters_SetMinMarkerDistanceRate_Async =
      _ArucoDetectorParameters_SetMinMarkerDistanceRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinMarkerPerimeterRate(
    ArucoDetectorParameters ap,
    double minMarkerPerimeterRate,
  ) {
    return _ArucoDetectorParameters_SetMinMarkerPerimeterRate(
      ap,
      minMarkerPerimeterRate,
    );
  }

  late final _ArucoDetectorParameters_SetMinMarkerPerimeterRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Double)>>(
      'ArucoDetectorParameters_SetMinMarkerPerimeterRate');
  late final _ArucoDetectorParameters_SetMinMarkerPerimeterRate =
      _ArucoDetectorParameters_SetMinMarkerPerimeterRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinMarkerPerimeterRate_Async(
    ArucoDetectorParameters ap,
    double minMarkerPerimeterRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMinMarkerPerimeterRate_Async(
      ap,
      minMarkerPerimeterRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMinMarkerPerimeterRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetMinMarkerPerimeterRate_Async');
  late final _ArucoDetectorParameters_SetMinMarkerPerimeterRate_Async =
      _ArucoDetectorParameters_SetMinMarkerPerimeterRate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinOtsuStdDev(
    ArucoDetectorParameters ap,
    double minOtsuStdDev,
  ) {
    return _ArucoDetectorParameters_SetMinOtsuStdDev(
      ap,
      minOtsuStdDev,
    );
  }

  late final _ArucoDetectorParameters_SetMinOtsuStdDevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetMinOtsuStdDev');
  late final _ArucoDetectorParameters_SetMinOtsuStdDev =
      _ArucoDetectorParameters_SetMinOtsuStdDevPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinOtsuStdDev_Async(
    ArucoDetectorParameters ap,
    double minOtsuStdDev,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetMinOtsuStdDev_Async(
      ap,
      minOtsuStdDev,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetMinOtsuStdDev_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
      'ArucoDetectorParameters_SetMinOtsuStdDev_Async');
  late final _ArucoDetectorParameters_SetMinOtsuStdDev_Async =
      _ArucoDetectorParameters_SetMinOtsuStdDev_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell(
    ArucoDetectorParameters ap,
    double perspectiveRemoveIgnoredMarginPerCell,
  ) {
    return _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell(
      ap,
      perspectiveRemoveIgnoredMarginPerCell,
    );
  }

  late final _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCellPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell');
  late final _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell =
      _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCellPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell_Async(
    ArucoDetectorParameters ap,
    double perspectiveRemoveIgnoredMarginPerCell,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell_Async(
      ap,
      perspectiveRemoveIgnoredMarginPerCell,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell_Async');
  late final _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell_Async =
      _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell(
    ArucoDetectorParameters ap,
    int perspectiveRemovePixelPerCell,
  ) {
    return _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell(
      ap,
      perspectiveRemovePixelPerCell,
    );
  }

  late final _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCellPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int)>>(
          'ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell');
  late final _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell =
      _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCellPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, int)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell_Async(
    ArucoDetectorParameters ap,
    int perspectiveRemovePixelPerCell,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell_Async(
      ap,
      perspectiveRemovePixelPerCell,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Int, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell_Async');
  late final _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell_Async =
      _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoDetectorParameters_SetPolygonalApproxAccuracyRate(
    ArucoDetectorParameters ap,
    double polygonalApproxAccuracyRate,
  ) {
    return _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate(
      ap,
      polygonalApproxAccuracyRate,
    );
  }

  late final _ArucoDetectorParameters_SetPolygonalApproxAccuracyRatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetPolygonalApproxAccuracyRate');
  late final _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate =
      _ArucoDetectorParameters_SetPolygonalApproxAccuracyRatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, double)>();

  ffi.Pointer<CvStatus>
      ArucoDetectorParameters_SetPolygonalApproxAccuracyRate_Async(
    ArucoDetectorParameters ap,
    double polygonalApproxAccuracyRate,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate_Async(
      ap,
      polygonalApproxAccuracyRate,
      callback,
    );
  }

  late final _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      ArucoDetectorParameters, ffi.Double, imp1.CvCallback_0)>>(
          'ArucoDetectorParameters_SetPolygonalApproxAccuracyRate_Async');
  late final _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate_Async =
      _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate_AsyncPtr
          .asFunction<
              ffi.Pointer<CvStatus> Function(
                  ArucoDetectorParameters, double, imp1.CvCallback_0)>();

  void ArucoDetector_Close(
    ArucoDetectorPtr ad,
  ) {
    return _ArucoDetector_Close(
      ad,
    );
  }

  late final _ArucoDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorPtr)>>(
          'ArucoDetector_Close');
  late final _ArucoDetector_Close =
      _ArucoDetector_ClosePtr.asFunction<void Function(ArucoDetectorPtr)>();

  ffi.Pointer<CvStatus> ArucoDetector_DetectMarkers(
    ArucoDetector ad,
    Mat inputArr,
    ffi.Pointer<VecVecPoint2f> markerCorners,
    ffi.Pointer<VecI32> markerIds,
    ffi.Pointer<VecVecPoint2f> rejectedCandidates,
  ) {
    return _ArucoDetector_DetectMarkers(
      ad,
      inputArr,
      markerCorners,
      markerIds,
      rejectedCandidates,
    );
  }

  late final _ArucoDetector_DetectMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetector,
              Mat,
              ffi.Pointer<VecVecPoint2f>,
              ffi.Pointer<VecI32>,
              ffi.Pointer<VecVecPoint2f>)>>('ArucoDetector_DetectMarkers');
  late final _ArucoDetector_DetectMarkers =
      _ArucoDetector_DetectMarkersPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetector,
              Mat,
              ffi.Pointer<VecVecPoint2f>,
              ffi.Pointer<VecI32>,
              ffi.Pointer<VecVecPoint2f>)>();

  ffi.Pointer<CvStatus> ArucoDetector_DetectMarkers_Async(
    ArucoDetector ad,
    Mat inputArr,
    imp1.CvCallback_3 callback,
  ) {
    return _ArucoDetector_DetectMarkers_Async(
      ad,
      inputArr,
      callback,
    );
  }

  late final _ArucoDetector_DetectMarkers_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetector, Mat,
              imp1.CvCallback_3)>>('ArucoDetector_DetectMarkers_Async');
  late final _ArucoDetector_DetectMarkers_Async =
      _ArucoDetector_DetectMarkers_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDetector, Mat, imp1.CvCallback_3)>();

  ffi.Pointer<CvStatus> ArucoDetector_New(
    ffi.Pointer<ArucoDetector> rval,
  ) {
    return _ArucoDetector_New(
      rval,
    );
  }

  late final _ArucoDetector_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ArucoDetector>)>>('ArucoDetector_New');
  late final _ArucoDetector_New = _ArucoDetector_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetector>)>();

  ffi.Pointer<CvStatus> ArucoDetector_NewWithParams(
    ArucoDictionary dictionary,
    ArucoDetectorParameters params,
    ffi.Pointer<ArucoDetector> rval,
  ) {
    return _ArucoDetector_NewWithParams(
      dictionary,
      params,
      rval,
    );
  }

  late final _ArucoDetector_NewWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDictionary,
              ArucoDetectorParameters,
              ffi.Pointer<ArucoDetector>)>>('ArucoDetector_NewWithParams');
  late final _ArucoDetector_NewWithParams =
      _ArucoDetector_NewWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ArucoDictionary,
              ArucoDetectorParameters, ffi.Pointer<ArucoDetector>)>();

  ffi.Pointer<CvStatus> ArucoDetector_NewWithParams_Async(
    ArucoDictionary dictionary,
    ArucoDetectorParameters params,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetector_NewWithParams_Async(
      dictionary,
      params,
      callback,
    );
  }

  late final _ArucoDetector_NewWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDictionary,
              ArucoDetectorParameters,
              imp1.CvCallback_1)>>('ArucoDetector_NewWithParams_Async');
  late final _ArucoDetector_NewWithParams_Async =
      _ArucoDetector_NewWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ArucoDictionary, ArucoDetectorParameters, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ArucoDetector_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoDetector_New_Async(
      callback,
    );
  }

  late final _ArucoDetector_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'ArucoDetector_New_Async');
  late final _ArucoDetector_New_Async = _ArucoDetector_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  void ArucoDictionary_Close(
    ArucoDictionaryPtr self,
  ) {
    return _ArucoDictionary_Close(
      self,
    );
  }

  late final _ArucoDictionary_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDictionaryPtr)>>(
          'ArucoDictionary_Close');
  late final _ArucoDictionary_Close =
      _ArucoDictionary_ClosePtr.asFunction<void Function(ArucoDictionaryPtr)>();

  ffi.Pointer<CvStatus> ArucoDrawDetectedMarkers(
    Mat image,
    VecVecPoint2f markerCorners,
    VecI32 markerIds,
    Scalar borderColor,
  ) {
    return _ArucoDrawDetectedMarkers(
      image,
      markerCorners,
      markerIds,
      borderColor,
    );
  }

  late final _ArucoDrawDetectedMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint2f, VecI32, Scalar)>>('ArucoDrawDetectedMarkers');
  late final _ArucoDrawDetectedMarkers =
      _ArucoDrawDetectedMarkersPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint2f, VecI32, Scalar)>();

  ffi.Pointer<CvStatus> ArucoDrawDetectedMarkers_Async(
    Mat image,
    VecVecPoint2f markerCorners,
    VecI32 markerIds,
    Scalar borderColor,
    imp1.CvCallback_0 callback,
  ) {
    return _ArucoDrawDetectedMarkers_Async(
      image,
      markerCorners,
      markerIds,
      borderColor,
      callback,
    );
  }

  late final _ArucoDrawDetectedMarkers_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint2f, VecI32, Scalar,
              imp1.CvCallback_0)>>('ArucoDrawDetectedMarkers_Async');
  late final _ArucoDrawDetectedMarkers_Async =
      _ArucoDrawDetectedMarkers_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint2f, VecI32, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ArucoGenerateImageMarker(
    int dictionaryId,
    int id,
    int sidePixels,
    int borderBits,
    ffi.Pointer<Mat> img,
  ) {
    return _ArucoGenerateImageMarker(
      dictionaryId,
      id,
      sidePixels,
      borderBits,
      img,
    );
  }

  late final _ArucoGenerateImageMarkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<Mat>)>>('ArucoGenerateImageMarker');
  late final _ArucoGenerateImageMarker =
      _ArucoGenerateImageMarkerPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, int, int, int, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ArucoGenerateImageMarker_Async(
    int dictionaryId,
    int id,
    int sidePixels,
    int borderBits,
    imp1.CvCallback_1 callback,
  ) {
    return _ArucoGenerateImageMarker_Async(
      dictionaryId,
      id,
      sidePixels,
      borderBits,
      callback,
    );
  }

  late final _ArucoGenerateImageMarker_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('ArucoGenerateImageMarker_Async');
  late final _ArucoGenerateImageMarker_Async =
      _ArucoGenerateImageMarker_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, int, int, int, imp1.CvCallback_1)>();

  void BlockMeanHash_Close(
    BlockMeanHashPtr self,
  ) {
    return _BlockMeanHash_Close(
      self,
    );
  }

  late final _BlockMeanHash_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BlockMeanHashPtr)>>(
          'BlockMeanHash_Close');
  late final _BlockMeanHash_Close =
      _BlockMeanHash_ClosePtr.asFunction<void Function(BlockMeanHashPtr)>();

  ffi.Pointer<CvStatus> BlockMeanHash_Compare(
    BlockMeanHash self,
    Mat hashOne,
    Mat hashTwo,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _BlockMeanHash_Compare(
      self,
      hashOne,
      hashTwo,
      rval,
    );
  }

  late final _BlockMeanHash_ComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat,
              ffi.Pointer<ffi.Double>)>>('BlockMeanHash_Compare');
  late final _BlockMeanHash_Compare = _BlockMeanHash_ComparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          BlockMeanHash, Mat, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> BlockMeanHash_Compare_Async(
    BlockMeanHash self,
    Mat hashOne,
    Mat hashTwo,
    imp1.CvCallback_1 callback,
  ) {
    return _BlockMeanHash_Compare_Async(
      self,
      hashOne,
      hashTwo,
      callback,
    );
  }

  late final _BlockMeanHash_Compare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat,
              imp1.CvCallback_1)>>('BlockMeanHash_Compare_Async');
  late final _BlockMeanHash_Compare_Async =
      _BlockMeanHash_Compare_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BlockMeanHash_Compute(
    BlockMeanHash self,
    Mat inputArr,
    ffi.Pointer<Mat> outputArr,
  ) {
    return _BlockMeanHash_Compute(
      self,
      inputArr,
      outputArr,
    );
  }

  late final _BlockMeanHash_ComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash, Mat, ffi.Pointer<Mat>)>>('BlockMeanHash_Compute');
  late final _BlockMeanHash_Compute = _BlockMeanHash_ComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> BlockMeanHash_Compute_Async(
    BlockMeanHash self,
    Mat inputArr,
    imp1.CvCallback_1 callback,
  ) {
    return _BlockMeanHash_Compute_Async(
      self,
      inputArr,
      callback,
    );
  }

  late final _BlockMeanHash_Compute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat,
              imp1.CvCallback_1)>>('BlockMeanHash_Compute_Async');
  late final _BlockMeanHash_Compute_Async =
      _BlockMeanHash_Compute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BlockMeanHash_Create(
    int mode,
    ffi.Pointer<BlockMeanHash> rval,
  ) {
    return _BlockMeanHash_Create(
      mode,
      rval,
    );
  }

  late final _BlockMeanHash_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Pointer<BlockMeanHash>)>>('BlockMeanHash_Create');
  late final _BlockMeanHash_Create = _BlockMeanHash_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, ffi.Pointer<BlockMeanHash>)>();

  ffi.Pointer<CvStatus> BlockMeanHash_Create_Async(
    int mode,
    imp1.CvCallback_1 callback,
  ) {
    return _BlockMeanHash_Create_Async(
      mode,
      callback,
    );
  }

  late final _BlockMeanHash_Create_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, imp1.CvCallback_1)>>('BlockMeanHash_Create_Async');
  late final _BlockMeanHash_Create_Async = _BlockMeanHash_Create_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BlockMeanHash_GetMean(
    BlockMeanHash self,
    ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
    ffi.Pointer<ffi.Size> length,
  ) {
    return _BlockMeanHash_GetMean(
      self,
      rval,
      length,
    );
  }

  late final _BlockMeanHash_GetMeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash,
              ffi.Pointer<ffi.Pointer<ffi.Double>>,
              ffi.Pointer<ffi.Size>)>>('BlockMeanHash_GetMean');
  late final _BlockMeanHash_GetMean = _BlockMeanHash_GetMeanPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BlockMeanHash,
          ffi.Pointer<ffi.Pointer<ffi.Double>>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<CvStatus> BlockMeanHash_GetMean_Async(
    BlockMeanHash self,
    imp1.CvCallback_1 callback,
  ) {
    return _BlockMeanHash_GetMean_Async(
      self,
      callback,
    );
  }

  late final _BlockMeanHash_GetMean_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash,
              imp1.CvCallback_1)>>('BlockMeanHash_GetMean_Async');
  late final _BlockMeanHash_GetMean_Async =
      _BlockMeanHash_GetMean_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BlockMeanHash_SetMode(
    BlockMeanHash self,
    int mode,
  ) {
    return _BlockMeanHash_SetMode(
      self,
      mode,
    );
  }

  late final _BlockMeanHash_SetModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash, ffi.Int)>>('BlockMeanHash_SetMode');
  late final _BlockMeanHash_SetMode = _BlockMeanHash_SetModePtr.asFunction<
      ffi.Pointer<CvStatus> Function(BlockMeanHash, int)>();

  ffi.Pointer<CvStatus> BlockMeanHash_SetMode_Async(
    BlockMeanHash self,
    int mode,
    imp1.CvCallback_0 callback,
  ) {
    return _BlockMeanHash_SetMode_Async(
      self,
      mode,
      callback,
    );
  }

  late final _BlockMeanHash_SetMode_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash, ffi.Int,
              imp1.CvCallback_0)>>('BlockMeanHash_SetMode_Async');
  late final _BlockMeanHash_SetMode_Async =
      _BlockMeanHash_SetMode_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash, int, imp1.CvCallback_0)>();

  void QualityBRISQUE_close(
    QualityBRISQUEPtr self,
  ) {
    return _QualityBRISQUE_close(
      self,
    );
  }

  late final _QualityBRISQUE_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityBRISQUEPtr)>>(
          'QualityBRISQUE_close');
  late final _QualityBRISQUE_close =
      _QualityBRISQUE_closePtr.asFunction<void Function(QualityBRISQUEPtr)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_compute(
    QualityBRISQUE self,
    Mat img,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityBRISQUE_compute(
      self,
      img,
      rval,
    );
  }

  late final _QualityBRISQUE_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QualityBRISQUE, Mat,
              ffi.Pointer<Scalar>)>>('QualityBRISQUE_compute');
  late final _QualityBRISQUE_compute = _QualityBRISQUE_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          QualityBRISQUE, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_computeFeatures_static(
    Mat img,
    Mat features,
  ) {
    return _QualityBRISQUE_computeFeatures_static(
      img,
      features,
    );
  }

  late final _QualityBRISQUE_computeFeatures_staticPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>(
          'QualityBRISQUE_computeFeatures_static');
  late final _QualityBRISQUE_computeFeatures_static =
      _QualityBRISQUE_computeFeatures_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_computeFeatures_static_async(
    Mat img,
    Mat features,
    imp1.CvCallback_0 callback,
  ) {
    return _QualityBRISQUE_computeFeatures_static_async(
      img,
      features,
      callback,
    );
  }

  late final _QualityBRISQUE_computeFeatures_static_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
      'QualityBRISQUE_computeFeatures_static_async');
  late final _QualityBRISQUE_computeFeatures_static_async =
      _QualityBRISQUE_computeFeatures_static_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_compute_async(
    QualityBRISQUE self,
    Mat img,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityBRISQUE_compute_async(
      self,
      img,
      callback,
    );
  }

  late final _QualityBRISQUE_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QualityBRISQUE, Mat,
              imp1.CvCallback_1)>>('QualityBRISQUE_compute_async');
  late final _QualityBRISQUE_compute_async =
      _QualityBRISQUE_compute_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QualityBRISQUE, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_compute_static(
    Mat img,
    ffi.Pointer<ffi.Char> model_file,
    ffi.Pointer<ffi.Char> range_file,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityBRISQUE_compute_static(
      img,
      model_file,
      range_file,
      rval,
    );
  }

  late final _QualityBRISQUE_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<Scalar>)>>('QualityBRISQUE_compute_static');
  late final _QualityBRISQUE_compute_static =
      _QualityBRISQUE_compute_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_compute_static_async(
    Mat img,
    ffi.Pointer<ffi.Char> model_file,
    ffi.Pointer<ffi.Char> range_file,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityBRISQUE_compute_static_async(
      img,
      model_file,
      range_file,
      callback,
    );
  }

  late final _QualityBRISQUE_compute_static_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('QualityBRISQUE_compute_static_async');
  late final _QualityBRISQUE_compute_static_async =
      _QualityBRISQUE_compute_static_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityBRISQUE_create(
    ffi.Pointer<ffi.Char> model_file,
    ffi.Pointer<ffi.Char> range_file,
    ffi.Pointer<QualityBRISQUE> rval,
  ) {
    return _QualityBRISQUE_create(
      model_file,
      range_file,
      rval,
    );
  }

  late final _QualityBRISQUE_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<QualityBRISQUE>)>>('QualityBRISQUE_create');
  late final _QualityBRISQUE_create = _QualityBRISQUE_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<QualityBRISQUE>)>();

  void QualityGMSD_close(
    QualityGMSDPtr self,
  ) {
    return _QualityGMSD_close(
      self,
    );
  }

  late final _QualityGMSD_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityGMSDPtr)>>(
          'QualityGMSD_close');
  late final _QualityGMSD_close =
      _QualityGMSD_closePtr.asFunction<void Function(QualityGMSDPtr)>();

  ffi.Pointer<CvStatus> QualityGMSD_compute(
    QualityGMSD self,
    Mat cmp,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityGMSD_compute(
      self,
      cmp,
      rval,
    );
  }

  late final _QualityGMSD_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityGMSD, Mat, ffi.Pointer<Scalar>)>>('QualityGMSD_compute');
  late final _QualityGMSD_compute = _QualityGMSD_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QualityGMSD, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityGMSD_compute_async(
    QualityGMSD self,
    Mat cmp,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityGMSD_compute_async(
      self,
      cmp,
      callback,
    );
  }

  late final _QualityGMSD_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QualityGMSD, Mat,
              imp1.CvCallback_1)>>('QualityGMSD_compute_async');
  late final _QualityGMSD_compute_async =
      _QualityGMSD_compute_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QualityGMSD, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityGMSD_compute_static(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityGMSD_compute_static(
      ref,
      cmp,
      qualityMap,
      rval,
    );
  }

  late final _QualityGMSD_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              ffi.Pointer<Scalar>)>>('QualityGMSD_compute_static');
  late final _QualityGMSD_compute_static =
      _QualityGMSD_compute_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityGMSD_compute_static_async(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityGMSD_compute_static_async(
      ref,
      cmp,
      qualityMap,
      callback,
    );
  }

  late final _QualityGMSD_compute_static_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_1)>>('QualityGMSD_compute_static_async');
  late final _QualityGMSD_compute_static_async =
      _QualityGMSD_compute_static_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityGMSD_create(
    Mat ref,
    ffi.Pointer<QualityGMSD> rval,
  ) {
    return _QualityGMSD_create(
      ref,
      rval,
    );
  }

  late final _QualityGMSD_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<QualityGMSD>)>>('QualityGMSD_create');
  late final _QualityGMSD_create = _QualityGMSD_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityGMSD>)>();

  void QualityMSE_close(
    QualityMSEPtr self,
  ) {
    return _QualityMSE_close(
      self,
    );
  }

  late final _QualityMSE_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityMSEPtr)>>(
          'QualityMSE_close');
  late final _QualityMSE_close =
      _QualityMSE_closePtr.asFunction<void Function(QualityMSEPtr)>();

  ffi.Pointer<CvStatus> QualityMSE_compute(
    QualityMSE self,
    Mat cmpImgs,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityMSE_compute(
      self,
      cmpImgs,
      rval,
    );
  }

  late final _QualityMSE_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityMSE, Mat, ffi.Pointer<Scalar>)>>('QualityMSE_compute');
  late final _QualityMSE_compute = _QualityMSE_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QualityMSE, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityMSE_compute_async(
    QualityMSE self,
    Mat cmpImgs,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityMSE_compute_async(
      self,
      cmpImgs,
      callback,
    );
  }

  late final _QualityMSE_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityMSE, Mat, imp1.CvCallback_1)>>('QualityMSE_compute_async');
  late final _QualityMSE_compute_async =
      _QualityMSE_compute_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(QualityMSE, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityMSE_compute_static(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityMSE_compute_static(
      ref,
      cmp,
      qualityMap,
      rval,
    );
  }

  late final _QualityMSE_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              ffi.Pointer<Scalar>)>>('QualityMSE_compute_static');
  late final _QualityMSE_compute_static =
      _QualityMSE_compute_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityMSE_compute_static_async(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityMSE_compute_static_async(
      ref,
      cmp,
      qualityMap,
      callback,
    );
  }

  late final _QualityMSE_compute_static_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_1)>>('QualityMSE_compute_static_async');
  late final _QualityMSE_compute_static_async =
      _QualityMSE_compute_static_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityMSE_create(
    Mat ref,
    ffi.Pointer<QualityMSE> rval,
  ) {
    return _QualityMSE_create(
      ref,
      rval,
    );
  }

  late final _QualityMSE_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<QualityMSE>)>>('QualityMSE_create');
  late final _QualityMSE_create = _QualityMSE_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityMSE>)>();

  void QualityPSNR_close(
    QualityPSNRPtr self,
  ) {
    return _QualityPSNR_close(
      self,
    );
  }

  late final _QualityPSNR_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityPSNRPtr)>>(
          'QualityPSNR_close');
  late final _QualityPSNR_close =
      _QualityPSNR_closePtr.asFunction<void Function(QualityPSNRPtr)>();

  ffi.Pointer<CvStatus> QualityPSNR_compute(
    QualityPSNR self,
    Mat cmp,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityPSNR_compute(
      self,
      cmp,
      rval,
    );
  }

  late final _QualityPSNR_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityPSNR, Mat, ffi.Pointer<Scalar>)>>('QualityPSNR_compute');
  late final _QualityPSNR_compute = _QualityPSNR_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QualityPSNR, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityPSNR_compute_async(
    QualityPSNR self,
    Mat cmp,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityPSNR_compute_async(
      self,
      cmp,
      callback,
    );
  }

  late final _QualityPSNR_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QualityPSNR, Mat,
              imp1.CvCallback_1)>>('QualityPSNR_compute_async');
  late final _QualityPSNR_compute_async =
      _QualityPSNR_compute_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QualityPSNR, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityPSNR_compute_static(
    Mat ref,
    Mat cmp,
    double maxPixelValue,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualityPSNR_compute_static(
      ref,
      cmp,
      maxPixelValue,
      qualityMap,
      rval,
    );
  }

  late final _QualityPSNR_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat,
              ffi.Pointer<Scalar>)>>('QualityPSNR_compute_static');
  late final _QualityPSNR_compute_static =
      _QualityPSNR_compute_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualityPSNR_compute_static_async(
    Mat ref,
    Mat cmp,
    double maxPixelValue,
    Mat qualityMap,
    imp1.CvCallback_1 callback,
  ) {
    return _QualityPSNR_compute_static_async(
      ref,
      cmp,
      maxPixelValue,
      qualityMap,
      callback,
    );
  }

  late final _QualityPSNR_compute_static_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat,
              imp1.CvCallback_1)>>('QualityPSNR_compute_static_async');
  late final _QualityPSNR_compute_static_async =
      _QualityPSNR_compute_static_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualityPSNR_create(
    Mat ref,
    double maxPixelValue,
    ffi.Pointer<QualityPSNR> rval,
  ) {
    return _QualityPSNR_create(
      ref,
      maxPixelValue,
      rval,
    );
  }

  late final _QualityPSNR_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double,
              ffi.Pointer<QualityPSNR>)>>('QualityPSNR_create');
  late final _QualityPSNR_create = _QualityPSNR_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, ffi.Pointer<QualityPSNR>)>();

  double QualityPSNR_getMaxPixelValue(
    QualityPSNR self,
  ) {
    return _QualityPSNR_getMaxPixelValue(
      self,
    );
  }

  late final _QualityPSNR_getMaxPixelValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(QualityPSNR)>>(
          'QualityPSNR_getMaxPixelValue');
  late final _QualityPSNR_getMaxPixelValue = _QualityPSNR_getMaxPixelValuePtr
      .asFunction<double Function(QualityPSNR)>();

  void QualityPSNR_setMaxPixelValue(
    QualityPSNR self,
    double maxPixelValue,
  ) {
    return _QualityPSNR_setMaxPixelValue(
      self,
      maxPixelValue,
    );
  }

  late final _QualityPSNR_setMaxPixelValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityPSNR, ffi.Double)>>(
          'QualityPSNR_setMaxPixelValue');
  late final _QualityPSNR_setMaxPixelValue = _QualityPSNR_setMaxPixelValuePtr
      .asFunction<void Function(QualityPSNR, double)>();

  void QualitySSIM_close(
    QualitySSIMPtr self,
  ) {
    return _QualitySSIM_close(
      self,
    );
  }

  late final _QualitySSIM_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualitySSIMPtr)>>(
          'QualitySSIM_close');
  late final _QualitySSIM_close =
      _QualitySSIM_closePtr.asFunction<void Function(QualitySSIMPtr)>();

  ffi.Pointer<CvStatus> QualitySSIM_compute(
    QualitySSIM self,
    Mat cmp,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualitySSIM_compute(
      self,
      cmp,
      rval,
    );
  }

  late final _QualitySSIM_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualitySSIM, Mat, ffi.Pointer<Scalar>)>>('QualitySSIM_compute');
  late final _QualitySSIM_compute = _QualitySSIM_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QualitySSIM, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualitySSIM_compute_async(
    QualitySSIM self,
    Mat cmp,
    imp1.CvCallback_1 callback,
  ) {
    return _QualitySSIM_compute_async(
      self,
      cmp,
      callback,
    );
  }

  late final _QualitySSIM_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QualitySSIM, Mat,
              imp1.CvCallback_1)>>('QualitySSIM_compute_async');
  late final _QualitySSIM_compute_async =
      _QualitySSIM_compute_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              QualitySSIM, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualitySSIM_compute_static(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
  ) {
    return _QualitySSIM_compute_static(
      ref,
      cmp,
      qualityMap,
      rval,
    );
  }

  late final _QualitySSIM_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              ffi.Pointer<Scalar>)>>('QualitySSIM_compute_static');
  late final _QualitySSIM_compute_static =
      _QualitySSIM_compute_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> QualitySSIM_compute_static_async(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    imp1.CvCallback_1 callback,
  ) {
    return _QualitySSIM_compute_static_async(
      ref,
      cmp,
      qualityMap,
      callback,
    );
  }

  late final _QualitySSIM_compute_static_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat,
              imp1.CvCallback_1)>>('QualitySSIM_compute_static_async');
  late final _QualitySSIM_compute_static_async =
      _QualitySSIM_compute_static_asyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> QualitySSIM_create(
    Mat ref,
    ffi.Pointer<QualitySSIM> rval,
  ) {
    return _QualitySSIM_create(
      ref,
      rval,
    );
  }

  late final _QualitySSIM_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<QualitySSIM>)>>('QualitySSIM_create');
  late final _QualitySSIM_create = _QualitySSIM_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualitySSIM>)>();

  void WBDetector_Close(
    PtrWBDetectorPtr self,
  ) {
    return _WBDetector_Close(
      self,
    );
  }

  late final _WBDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PtrWBDetectorPtr)>>(
          'WBDetector_Close');
  late final _WBDetector_Close =
      _WBDetector_ClosePtr.asFunction<void Function(PtrWBDetectorPtr)>();

  ffi.Pointer<CvStatus> WBDetector_Create(
    ffi.Pointer<PtrWBDetector> rval,
  ) {
    return _WBDetector_Create(
      rval,
    );
  }

  late final _WBDetector_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<PtrWBDetector>)>>('WBDetector_Create');
  late final _WBDetector_Create = _WBDetector_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>)>();

  ffi.Pointer<CvStatus> WBDetector_Detect(
    ffi.Pointer<PtrWBDetector> self,
    Mat img,
    ffi.Pointer<VecRect> bbox,
    ffi.Pointer<VecF64> confidences,
  ) {
    return _WBDetector_Detect(
      self,
      img,
      bbox,
      confidences,
    );
  }

  late final _WBDetector_DetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>, Mat,
              ffi.Pointer<VecRect>, ffi.Pointer<VecF64>)>>('WBDetector_Detect');
  late final _WBDetector_Detect = _WBDetector_DetectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>, Mat,
          ffi.Pointer<VecRect>, ffi.Pointer<VecF64>)>();

  ffi.Pointer<CvStatus> WBDetector_Read(
    ffi.Pointer<PtrWBDetector> self,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _WBDetector_Read(
      self,
      filename,
    );
  }

  late final _WBDetector_ReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>,
              ffi.Pointer<ffi.Char>)>>('WBDetector_Read');
  late final _WBDetector_Read = _WBDetector_ReadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<PtrWBDetector>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> WBDetector_Train(
    ffi.Pointer<PtrWBDetector> self,
    ffi.Pointer<ffi.Char> pos_samples,
    ffi.Pointer<ffi.Char> neg_imgs,
  ) {
    return _WBDetector_Train(
      self,
      pos_samples,
      neg_imgs,
    );
  }

  late final _WBDetector_TrainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<PtrWBDetector>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('WBDetector_Train');
  late final _WBDetector_Train = _WBDetector_TrainPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> WBDetector_Write(
    ffi.Pointer<PtrWBDetector> self,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _WBDetector_Write(
      self,
      filename,
    );
  }

  late final _WBDetector_WritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>,
              ffi.Pointer<ffi.Char>)>>('WBDetector_Write');
  late final _WBDetector_Write = _WBDetector_WritePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<PtrWBDetector>, ffi.Pointer<ffi.Char>)>();

  void WeChatQRCode_Close(
    WeChatQRCodePtr self,
  ) {
    return _WeChatQRCode_Close(
      self,
    );
  }

  late final _WeChatQRCode_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WeChatQRCodePtr)>>(
          'WeChatQRCode_Close');
  late final _WeChatQRCode_Close =
      _WeChatQRCode_ClosePtr.asFunction<void Function(WeChatQRCodePtr)>();

  ffi.Pointer<CvStatus> WeChatQRCode_DetectAndDecode(
    ffi.Pointer<WeChatQRCode> self,
    Mat img,
    ffi.Pointer<VecMat> points,
    ffi.Pointer<VecVecChar> rval,
  ) {
    return _WeChatQRCode_DetectAndDecode(
      self,
      img,
      points,
      rval,
    );
  }

  late final _WeChatQRCode_DetectAndDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<WeChatQRCode>,
              Mat,
              ffi.Pointer<VecMat>,
              ffi.Pointer<VecVecChar>)>>('WeChatQRCode_DetectAndDecode');
  late final _WeChatQRCode_DetectAndDecode =
      _WeChatQRCode_DetectAndDecodePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>, Mat,
              ffi.Pointer<VecMat>, ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<CvStatus> WeChatQRCode_DetectAndDecode_Async(
    ffi.Pointer<WeChatQRCode> self,
    Mat img,
    imp1.CvCallback_2 callback,
  ) {
    return _WeChatQRCode_DetectAndDecode_Async(
      self,
      img,
      callback,
    );
  }

  late final _WeChatQRCode_DetectAndDecode_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>, Mat,
              imp1.CvCallback_2)>>('WeChatQRCode_DetectAndDecode_Async');
  late final _WeChatQRCode_DetectAndDecode_Async =
      _WeChatQRCode_DetectAndDecode_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<WeChatQRCode>, Mat, imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> WeChatQRCode_GetScaleFactor(
    ffi.Pointer<WeChatQRCode> self,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _WeChatQRCode_GetScaleFactor(
      self,
      rval,
    );
  }

  late final _WeChatQRCode_GetScaleFactorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>,
              ffi.Pointer<ffi.Float>)>>('WeChatQRCode_GetScaleFactor');
  late final _WeChatQRCode_GetScaleFactor =
      _WeChatQRCode_GetScaleFactorPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<WeChatQRCode>, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> WeChatQRCode_GetScaleFactor_Async(
    ffi.Pointer<WeChatQRCode> self,
    imp1.CvCallback_1 callback,
  ) {
    return _WeChatQRCode_GetScaleFactor_Async(
      self,
      callback,
    );
  }

  late final _WeChatQRCode_GetScaleFactor_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>,
              imp1.CvCallback_1)>>('WeChatQRCode_GetScaleFactor_Async');
  late final _WeChatQRCode_GetScaleFactor_Async =
      _WeChatQRCode_GetScaleFactor_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<WeChatQRCode>, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> WeChatQRCode_New(
    ffi.Pointer<WeChatQRCode> qrcode,
  ) {
    return _WeChatQRCode_New(
      qrcode,
    );
  }

  late final _WeChatQRCode_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<WeChatQRCode>)>>('WeChatQRCode_New');
  late final _WeChatQRCode_New = _WeChatQRCode_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>)>();

  ffi.Pointer<CvStatus> WeChatQRCode_NewWithParams(
    ffi.Pointer<ffi.Char> detector_prototxt_path,
    ffi.Pointer<ffi.Char> detector_caffe_model_path,
    ffi.Pointer<ffi.Char> super_resolution_prototxt_path,
    ffi.Pointer<ffi.Char> super_resolution_caffe_model_path,
    ffi.Pointer<WeChatQRCode> qrcode,
  ) {
    return _WeChatQRCode_NewWithParams(
      detector_prototxt_path,
      detector_caffe_model_path,
      super_resolution_prototxt_path,
      super_resolution_caffe_model_path,
      qrcode,
    );
  }

  late final _WeChatQRCode_NewWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<WeChatQRCode>)>>('WeChatQRCode_NewWithParams');
  late final _WeChatQRCode_NewWithParams =
      _WeChatQRCode_NewWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<WeChatQRCode>)>();

  ffi.Pointer<CvStatus> WeChatQRCode_NewWithParams_Async(
    ffi.Pointer<ffi.Char> detector_prototxt_path,
    ffi.Pointer<ffi.Char> detector_caffe_model_path,
    ffi.Pointer<ffi.Char> super_resolution_prototxt_path,
    ffi.Pointer<ffi.Char> super_resolution_caffe_model_path,
    imp1.CvCallback_1 callback,
  ) {
    return _WeChatQRCode_NewWithParams_Async(
      detector_prototxt_path,
      detector_caffe_model_path,
      super_resolution_prototxt_path,
      super_resolution_caffe_model_path,
      callback,
    );
  }

  late final _WeChatQRCode_NewWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>>('WeChatQRCode_NewWithParams_Async');
  late final _WeChatQRCode_NewWithParams_Async =
      _WeChatQRCode_NewWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> WeChatQRCode_New_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _WeChatQRCode_New_Async(
      callback,
    );
  }

  late final _WeChatQRCode_New_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'WeChatQRCode_New_Async');
  late final _WeChatQRCode_New_Async = _WeChatQRCode_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> WeChatQRCode_SetScaleFactor(
    ffi.Pointer<WeChatQRCode> self,
    double scale_factor,
  ) {
    return _WeChatQRCode_SetScaleFactor(
      self,
      scale_factor,
    );
  }

  late final _WeChatQRCode_SetScaleFactorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>,
              ffi.Float)>>('WeChatQRCode_SetScaleFactor');
  late final _WeChatQRCode_SetScaleFactor =
      _WeChatQRCode_SetScaleFactorPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>, double)>();

  ffi.Pointer<CvStatus> WeChatQRCode_SetScaleFactor_Async(
    ffi.Pointer<WeChatQRCode> self,
    double scale_factor,
    imp1.CvCallback_0 callback,
  ) {
    return _WeChatQRCode_SetScaleFactor_Async(
      self,
      scale_factor,
      callback,
    );
  }

  late final _WeChatQRCode_SetScaleFactor_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>, ffi.Float,
              imp1.CvCallback_0)>>('WeChatQRCode_SetScaleFactor_Async');
  late final _WeChatQRCode_SetScaleFactor_Async =
      _WeChatQRCode_SetScaleFactor_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<WeChatQRCode>, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> averageHashCompare(
    Mat a,
    Mat b,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _averageHashCompare(
      a,
      b,
      rval,
    );
  }

  late final _averageHashComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Double>)>>('averageHashCompare');
  late final _averageHashCompare = _averageHashComparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> averageHashCompare_Async(
    Mat a,
    Mat b,
    imp1.CvCallback_1 callback,
  ) {
    return _averageHashCompare_Async(
      a,
      b,
      callback,
    );
  }

  late final _averageHashCompare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('averageHashCompare_Async');
  late final _averageHashCompare_Async =
      _averageHashCompare_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> averageHashCompute(
    Mat inputArr,
    ffi.Pointer<Mat> outputArr,
  ) {
    return _averageHashCompute(
      inputArr,
      outputArr,
    );
  }

  late final _averageHashComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>)>>('averageHashCompute');
  late final _averageHashCompute = _averageHashComputePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> averageHashCompute_Async(
    Mat inputArr,
    imp1.CvCallback_1 callback,
  ) {
    return _averageHashCompute_Async(
      inputArr,
      callback,
    );
  }

  late final _averageHashCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('averageHashCompute_Async');
  late final _averageHashCompute_Async = _averageHashCompute_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> colorMomentHashCompare(
    Mat a,
    Mat b,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _colorMomentHashCompare(
      a,
      b,
      rval,
    );
  }

  late final _colorMomentHashComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Double>)>>('colorMomentHashCompare');
  late final _colorMomentHashCompare = _colorMomentHashComparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> colorMomentHashCompare_Async(
    Mat a,
    Mat b,
    imp1.CvCallback_1 callback,
  ) {
    return _colorMomentHashCompare_Async(
      a,
      b,
      callback,
    );
  }

  late final _colorMomentHashCompare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('colorMomentHashCompare_Async');
  late final _colorMomentHashCompare_Async =
      _colorMomentHashCompare_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> colorMomentHashCompute(
    Mat inputArr,
    ffi.Pointer<Mat> outputArr,
  ) {
    return _colorMomentHashCompute(
      inputArr,
      outputArr,
    );
  }

  late final _colorMomentHashComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>)>>('colorMomentHashCompute');
  late final _colorMomentHashCompute = _colorMomentHashComputePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> colorMomentHashCompute_Async(
    Mat inputArr,
    imp1.CvCallback_1 callback,
  ) {
    return _colorMomentHashCompute_Async(
      inputArr,
      callback,
    );
  }

  late final _colorMomentHashCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('colorMomentHashCompute_Async');
  late final _colorMomentHashCompute_Async = _colorMomentHashCompute_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> getPredefinedDictionary(
    int dictionaryId,
    ffi.Pointer<ArucoDictionary> rval,
  ) {
    return _getPredefinedDictionary(
      dictionaryId,
      rval,
    );
  }

  late final _getPredefinedDictionaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int,
              ffi.Pointer<ArucoDictionary>)>>('getPredefinedDictionary');
  late final _getPredefinedDictionary = _getPredefinedDictionaryPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, ffi.Pointer<ArucoDictionary>)>();

  ffi.Pointer<CvStatus> getPredefinedDictionary_Async(
    int dictionaryId,
    imp1.CvCallback_1 callback,
  ) {
    return _getPredefinedDictionary_Async(
      dictionaryId,
      callback,
    );
  }

  late final _getPredefinedDictionary_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, imp1.CvCallback_1)>>('getPredefinedDictionary_Async');
  late final _getPredefinedDictionary_Async = _getPredefinedDictionary_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> marrHildrethHashCompare(
    Mat a,
    Mat b,
    double alpha,
    double scale,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _marrHildrethHashCompare(
      a,
      b,
      alpha,
      scale,
      rval,
    );
  }

  late final _marrHildrethHashComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float,
              ffi.Pointer<ffi.Double>)>>('marrHildrethHashCompare');
  late final _marrHildrethHashCompare = _marrHildrethHashComparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> marrHildrethHashCompare_Async(
    Mat a,
    Mat b,
    double alpha,
    double scale,
    imp1.CvCallback_1 callback,
  ) {
    return _marrHildrethHashCompare_Async(
      a,
      b,
      alpha,
      scale,
      callback,
    );
  }

  late final _marrHildrethHashCompare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float,
              imp1.CvCallback_1)>>('marrHildrethHashCompare_Async');
  late final _marrHildrethHashCompare_Async =
      _marrHildrethHashCompare_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> marrHildrethHashCompute(
    Mat inputArr,
    ffi.Pointer<Mat> outputArr,
    double alpha,
    double scale,
  ) {
    return _marrHildrethHashCompute(
      inputArr,
      outputArr,
      alpha,
      scale,
    );
  }

  late final _marrHildrethHashComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Float,
              ffi.Float)>>('marrHildrethHashCompute');
  late final _marrHildrethHashCompute = _marrHildrethHashComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, double, double)>();

  ffi.Pointer<CvStatus> marrHildrethHashCompute_Async(
    Mat inputArr,
    double alpha,
    double scale,
    imp1.CvCallback_1 callback,
  ) {
    return _marrHildrethHashCompute_Async(
      inputArr,
      alpha,
      scale,
      callback,
    );
  }

  late final _marrHildrethHashCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Float, ffi.Float,
              imp1.CvCallback_1)>>('marrHildrethHashCompute_Async');
  late final _marrHildrethHashCompute_Async =
      _marrHildrethHashCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> pHashCompare(
    Mat a,
    Mat b,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _pHashCompare(
      a,
      b,
      rval,
    );
  }

  late final _pHashComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Double>)>>('pHashCompare');
  late final _pHashCompare = _pHashComparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> pHashCompare_Async(
    Mat a,
    Mat b,
    imp1.CvCallback_1 callback,
  ) {
    return _pHashCompare_Async(
      a,
      b,
      callback,
    );
  }

  late final _pHashCompare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, imp1.CvCallback_1)>>('pHashCompare_Async');
  late final _pHashCompare_Async = _pHashCompare_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> pHashCompute(
    Mat inputArr,
    ffi.Pointer<Mat> outputArr,
  ) {
    return _pHashCompute(
      inputArr,
      outputArr,
    );
  }

  late final _pHashComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>)>>('pHashCompute');
  late final _pHashCompute = _pHashComputePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> pHashCompute_Async(
    Mat inputArr,
    imp1.CvCallback_1 callback,
  ) {
    return _pHashCompute_Async(
      inputArr,
      callback,
    );
  }

  late final _pHashCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('pHashCompute_Async');
  late final _pHashCompute_Async = _pHashCompute_AsyncPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> radialVarianceHashCompare(
    Mat a,
    Mat b,
    double sigma,
    int numOfAngleLine,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _radialVarianceHashCompare(
      a,
      b,
      sigma,
      numOfAngleLine,
      rval,
    );
  }

  late final _radialVarianceHashComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('radialVarianceHashCompare');
  late final _radialVarianceHashCompare =
      _radialVarianceHashComparePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> radialVarianceHashCompare_Async(
    Mat a,
    Mat b,
    double sigma,
    int numOfAngleLine,
    imp1.CvCallback_1 callback,
  ) {
    return _radialVarianceHashCompare_Async(
      a,
      b,
      sigma,
      numOfAngleLine,
      callback,
    );
  }

  late final _radialVarianceHashCompare_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('radialVarianceHashCompare_Async');
  late final _radialVarianceHashCompare_Async =
      _radialVarianceHashCompare_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> radialVarianceHashCompute(
    Mat inputArr,
    ffi.Pointer<Mat> outputArr,
    double sigma,
    int numOfAngleLine,
  ) {
    return _radialVarianceHashCompute(
      inputArr,
      outputArr,
      sigma,
      numOfAngleLine,
    );
  }

  late final _radialVarianceHashComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Double,
              ffi.Int)>>('radialVarianceHashCompute');
  late final _radialVarianceHashCompute =
      _radialVarianceHashComputePtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, double, int)>();

  ffi.Pointer<CvStatus> radialVarianceHashCompute_Async(
    Mat inputArr,
    double sigma,
    int numOfAngleLine,
    imp1.CvCallback_1 callback,
  ) {
    return _radialVarianceHashCompute_Async(
      inputArr,
      sigma,
      numOfAngleLine,
      callback,
    );
  }

  late final _radialVarianceHashCompute_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('radialVarianceHashCompute_Async');
  late final _radialVarianceHashCompute_Async =
      _radialVarianceHashCompute_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeBoxes_getBoundingBoxes(
    EdgeBoxes self,
    Mat edge_map,
    Mat orientation_map,
    ffi.Pointer<VecRect> boxes,
    ffi.Pointer<VecF32> scores,
  ) {
    return _ximgproc_EdgeBoxes_getBoundingBoxes(
      self,
      edge_map,
      orientation_map,
      boxes,
      scores,
    );
  }

  late final _ximgproc_EdgeBoxes_getBoundingBoxesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              EdgeBoxes,
              Mat,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecF32>)>>('ximgproc_EdgeBoxes_getBoundingBoxes');
  late final _ximgproc_EdgeBoxes_getBoundingBoxes =
      _ximgproc_EdgeBoxes_getBoundingBoxesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeBoxes, Mat, Mat,
              ffi.Pointer<VecRect>, ffi.Pointer<VecF32>)>();

  void ximgproc_EdgeDrawing_Close(
    EdgeDrawingPtr self,
  ) {
    return _ximgproc_EdgeDrawing_Close(
      self,
    );
  }

  late final _ximgproc_EdgeDrawing_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeDrawingPtr)>>(
          'ximgproc_EdgeDrawing_Close');
  late final _ximgproc_EdgeDrawing_Close = _ximgproc_EdgeDrawing_ClosePtr
      .asFunction<void Function(EdgeDrawingPtr)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_Create(
    ffi.Pointer<EdgeDrawing> rval,
  ) {
    return _ximgproc_EdgeDrawing_Create(
      rval,
    );
  }

  late final _ximgproc_EdgeDrawing_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<EdgeDrawing>)>>('ximgproc_EdgeDrawing_Create');
  late final _ximgproc_EdgeDrawing_Create = _ximgproc_EdgeDrawing_CreatePtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<EdgeDrawing>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_Create_Async(
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'ximgproc_EdgeDrawing_Create_Async');
  late final _ximgproc_EdgeDrawing_Create_Async =
      _ximgproc_EdgeDrawing_Create_AsyncPtr
          .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_detectEdges(
    EdgeDrawing self,
    Mat src,
  ) {
    return _ximgproc_EdgeDrawing_detectEdges(
      self,
      src,
    );
  }

  late final _ximgproc_EdgeDrawing_detectEdgesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat)>>(
      'ximgproc_EdgeDrawing_detectEdges');
  late final _ximgproc_EdgeDrawing_detectEdges =
      _ximgproc_EdgeDrawing_detectEdgesPtr
          .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_detectEdges_Async(
    EdgeDrawing self,
    Mat src,
    imp1.CvCallback_0 callback,
  ) {
    return _ximgproc_EdgeDrawing_detectEdges_Async(
      self,
      src,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_detectEdges_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat,
              imp1.CvCallback_0)>>('ximgproc_EdgeDrawing_detectEdges_Async');
  late final _ximgproc_EdgeDrawing_detectEdges_Async =
      _ximgproc_EdgeDrawing_detectEdges_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              EdgeDrawing, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_detectEllipses(
    EdgeDrawing self,
    ffi.Pointer<Mat> ellipses,
  ) {
    return _ximgproc_EdgeDrawing_detectEllipses(
      self,
      ellipses,
    );
  }

  late final _ximgproc_EdgeDrawing_detectEllipsesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              ffi.Pointer<Mat>)>>('ximgproc_EdgeDrawing_detectEllipses');
  late final _ximgproc_EdgeDrawing_detectEllipses =
      _ximgproc_EdgeDrawing_detectEllipsesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_detectEllipses_Async(
    EdgeDrawing self,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_detectEllipses_Async(
      self,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_detectEllipses_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              imp1.CvCallback_1)>>('ximgproc_EdgeDrawing_detectEllipses_Async');
  late final _ximgproc_EdgeDrawing_detectEllipses_Async =
      _ximgproc_EdgeDrawing_detectEllipses_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_detectLines(
    EdgeDrawing self,
    ffi.Pointer<Mat> lines,
  ) {
    return _ximgproc_EdgeDrawing_detectLines(
      self,
      lines,
    );
  }

  late final _ximgproc_EdgeDrawing_detectLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              ffi.Pointer<Mat>)>>('ximgproc_EdgeDrawing_detectLines');
  late final _ximgproc_EdgeDrawing_detectLines =
      _ximgproc_EdgeDrawing_detectLinesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_detectLines_Async(
    EdgeDrawing self,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_detectLines_Async(
      self,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_detectLines_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              imp1.CvCallback_1)>>('ximgproc_EdgeDrawing_detectLines_Async');
  late final _ximgproc_EdgeDrawing_detectLines_Async =
      _ximgproc_EdgeDrawing_detectLines_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getEdgeImage(
    EdgeDrawing self,
    ffi.Pointer<Mat> dst,
  ) {
    return _ximgproc_EdgeDrawing_getEdgeImage(
      self,
      dst,
    );
  }

  late final _ximgproc_EdgeDrawing_getEdgeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              ffi.Pointer<Mat>)>>('ximgproc_EdgeDrawing_getEdgeImage');
  late final _ximgproc_EdgeDrawing_getEdgeImage =
      _ximgproc_EdgeDrawing_getEdgeImagePtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getEdgeImage_Async(
    EdgeDrawing self,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_getEdgeImage_Async(
      self,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_getEdgeImage_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              imp1.CvCallback_1)>>('ximgproc_EdgeDrawing_getEdgeImage_Async');
  late final _ximgproc_EdgeDrawing_getEdgeImage_Async =
      _ximgproc_EdgeDrawing_getEdgeImage_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getGradientImage(
    EdgeDrawing self,
    ffi.Pointer<Mat> dst,
  ) {
    return _ximgproc_EdgeDrawing_getGradientImage(
      self,
      dst,
    );
  }

  late final _ximgproc_EdgeDrawing_getGradientImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              ffi.Pointer<Mat>)>>('ximgproc_EdgeDrawing_getGradientImage');
  late final _ximgproc_EdgeDrawing_getGradientImage =
      _ximgproc_EdgeDrawing_getGradientImagePtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getGradientImage_Async(
    EdgeDrawing self,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_getGradientImage_Async(
      self,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_getGradientImage_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>>(
      'ximgproc_EdgeDrawing_getGradientImage_Async');
  late final _ximgproc_EdgeDrawing_getGradientImage_Async =
      _ximgproc_EdgeDrawing_getGradientImage_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getParams(
    EdgeDrawing self,
    ffi.Pointer<EdgeDrawingParams> params,
  ) {
    return _ximgproc_EdgeDrawing_getParams(
      self,
      params,
    );
  }

  late final _ximgproc_EdgeDrawing_getParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  EdgeDrawing, ffi.Pointer<EdgeDrawingParams>)>>(
      'ximgproc_EdgeDrawing_getParams');
  late final _ximgproc_EdgeDrawing_getParams =
      _ximgproc_EdgeDrawing_getParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              EdgeDrawing, ffi.Pointer<EdgeDrawingParams>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getSegmentIndicesOfLines(
    EdgeDrawing self,
    ffi.Pointer<VecI32> rval,
  ) {
    return _ximgproc_EdgeDrawing_getSegmentIndicesOfLines(
      self,
      rval,
    );
  }

  late final _ximgproc_EdgeDrawing_getSegmentIndicesOfLinesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  EdgeDrawing, ffi.Pointer<VecI32>)>>(
      'ximgproc_EdgeDrawing_getSegmentIndicesOfLines');
  late final _ximgproc_EdgeDrawing_getSegmentIndicesOfLines =
      _ximgproc_EdgeDrawing_getSegmentIndicesOfLinesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<VecI32>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getSegmentIndicesOfLines_Async(
    EdgeDrawing self,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_getSegmentIndicesOfLines_Async(
      self,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_getSegmentIndicesOfLines_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>>(
      'ximgproc_EdgeDrawing_getSegmentIndicesOfLines_Async');
  late final _ximgproc_EdgeDrawing_getSegmentIndicesOfLines_Async =
      _ximgproc_EdgeDrawing_getSegmentIndicesOfLines_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getSegments(
    EdgeDrawing self,
    ffi.Pointer<VecVecPoint> rval,
  ) {
    return _ximgproc_EdgeDrawing_getSegments(
      self,
      rval,
    );
  }

  late final _ximgproc_EdgeDrawing_getSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              ffi.Pointer<VecVecPoint>)>>('ximgproc_EdgeDrawing_getSegments');
  late final _ximgproc_EdgeDrawing_getSegments =
      _ximgproc_EdgeDrawing_getSegmentsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              EdgeDrawing, ffi.Pointer<VecVecPoint>)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_getSegments_Async(
    EdgeDrawing self,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_EdgeDrawing_getSegments_Async(
      self,
      callback,
    );
  }

  late final _ximgproc_EdgeDrawing_getSegments_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              imp1.CvCallback_1)>>('ximgproc_EdgeDrawing_getSegments_Async');
  late final _ximgproc_EdgeDrawing_getSegments_Async =
      _ximgproc_EdgeDrawing_getSegments_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_EdgeDrawing_setParams(
    EdgeDrawing self,
    EdgeDrawingParams params,
  ) {
    return _ximgproc_EdgeDrawing_setParams(
      self,
      params,
    );
  }

  late final _ximgproc_EdgeDrawing_setParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing,
              EdgeDrawingParams)>>('ximgproc_EdgeDrawing_setParams');
  late final _ximgproc_EdgeDrawing_setParams =
      _ximgproc_EdgeDrawing_setParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, EdgeDrawingParams)>();

  void ximgproc_GraphSegmentation_Close(
    GraphSegmentationPtr self,
  ) {
    return _ximgproc_GraphSegmentation_Close(
      self,
    );
  }

  late final _ximgproc_GraphSegmentation_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GraphSegmentationPtr)>>(
          'ximgproc_GraphSegmentation_Close');
  late final _ximgproc_GraphSegmentation_Close =
      _ximgproc_GraphSegmentation_ClosePtr
          .asFunction<void Function(GraphSegmentationPtr)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_Create(
    double sigma,
    double k,
    int min_size,
    ffi.Pointer<GraphSegmentation> rval,
  ) {
    return _ximgproc_GraphSegmentation_Create(
      sigma,
      k,
      min_size,
      rval,
    );
  }

  late final _ximgproc_GraphSegmentation_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Float, ffi.Float, ffi.Int,
                  ffi.Pointer<GraphSegmentation>)>>(
      'ximgproc_GraphSegmentation_Create');
  late final _ximgproc_GraphSegmentation_Create =
      _ximgproc_GraphSegmentation_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              double, double, int, ffi.Pointer<GraphSegmentation>)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_Create_Async(
    double sigma,
    double k,
    int min_size,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_GraphSegmentation_Create_Async(
      sigma,
      k,
      min_size,
      callback,
    );
  }

  late final _ximgproc_GraphSegmentation_Create_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Float, ffi.Float, ffi.Int,
              imp1.CvCallback_1)>>('ximgproc_GraphSegmentation_Create_Async');
  late final _ximgproc_GraphSegmentation_Create_Async =
      _ximgproc_GraphSegmentation_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_getK(
    GraphSegmentation self,
    ffi.Pointer<ffi.Float> rval,
  ) {
    return _ximgproc_GraphSegmentation_getK(
      self,
      rval,
    );
  }

  late final _ximgproc_GraphSegmentation_getKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation,
              ffi.Pointer<ffi.Float>)>>('ximgproc_GraphSegmentation_getK');
  late final _ximgproc_GraphSegmentation_getK =
      _ximgproc_GraphSegmentation_getKPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              GraphSegmentation, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_getMinSize(
    GraphSegmentation self,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _ximgproc_GraphSegmentation_getMinSize(
      self,
      rval,
    );
  }

  late final _ximgproc_GraphSegmentation_getMinSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation,
              ffi.Pointer<ffi.Int>)>>('ximgproc_GraphSegmentation_getMinSize');
  late final _ximgproc_GraphSegmentation_getMinSize =
      _ximgproc_GraphSegmentation_getMinSizePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              GraphSegmentation, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_getSigma(
    GraphSegmentation self,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _ximgproc_GraphSegmentation_getSigma(
      self,
      rval,
    );
  }

  late final _ximgproc_GraphSegmentation_getSigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation,
              ffi.Pointer<ffi.Double>)>>('ximgproc_GraphSegmentation_getSigma');
  late final _ximgproc_GraphSegmentation_getSigma =
      _ximgproc_GraphSegmentation_getSigmaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              GraphSegmentation, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_processImage(
    GraphSegmentation self,
    Mat src,
    ffi.Pointer<Mat> dst,
  ) {
    return _ximgproc_GraphSegmentation_processImage(
      self,
      src,
      dst,
    );
  }

  late final _ximgproc_GraphSegmentation_processImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation, Mat,
              ffi.Pointer<Mat>)>>('ximgproc_GraphSegmentation_processImage');
  late final _ximgproc_GraphSegmentation_processImage =
      _ximgproc_GraphSegmentation_processImagePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              GraphSegmentation, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_processImage_Async(
    GraphSegmentation self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_GraphSegmentation_processImage_Async(
      self,
      src,
      callback,
    );
  }

  late final _ximgproc_GraphSegmentation_processImage_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  GraphSegmentation, Mat, imp1.CvCallback_1)>>(
      'ximgproc_GraphSegmentation_processImage_Async');
  late final _ximgproc_GraphSegmentation_processImage_Async =
      _ximgproc_GraphSegmentation_processImage_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              GraphSegmentation, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_setK(
    GraphSegmentation self,
    double val,
  ) {
    return _ximgproc_GraphSegmentation_setK(
      self,
      val,
    );
  }

  late final _ximgproc_GraphSegmentation_setKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation,
              ffi.Float)>>('ximgproc_GraphSegmentation_setK');
  late final _ximgproc_GraphSegmentation_setK =
      _ximgproc_GraphSegmentation_setKPtr.asFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation, double)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_setMinSize(
    GraphSegmentation self,
    int val,
  ) {
    return _ximgproc_GraphSegmentation_setMinSize(
      self,
      val,
    );
  }

  late final _ximgproc_GraphSegmentation_setMinSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation,
              ffi.Int)>>('ximgproc_GraphSegmentation_setMinSize');
  late final _ximgproc_GraphSegmentation_setMinSize =
      _ximgproc_GraphSegmentation_setMinSizePtr
          .asFunction<ffi.Pointer<CvStatus> Function(GraphSegmentation, int)>();

  ffi.Pointer<CvStatus> ximgproc_GraphSegmentation_setSigma(
    GraphSegmentation self,
    double val,
  ) {
    return _ximgproc_GraphSegmentation_setSigma(
      self,
      val,
    );
  }

  late final _ximgproc_GraphSegmentation_setSigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation,
              ffi.Double)>>('ximgproc_GraphSegmentation_setSigma');
  late final _ximgproc_GraphSegmentation_setSigma =
      _ximgproc_GraphSegmentation_setSigmaPtr.asFunction<
          ffi.Pointer<CvStatus> Function(GraphSegmentation, double)>();

  ffi.Pointer<CvStatus> ximgproc_PeiLinNormalization(
    Mat I,
    ffi.Pointer<Mat> dst,
  ) {
    return _ximgproc_PeiLinNormalization(
      I,
      dst,
    );
  }

  late final _ximgproc_PeiLinNormalizationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>)>>('ximgproc_PeiLinNormalization');
  late final _ximgproc_PeiLinNormalization = _ximgproc_PeiLinNormalizationPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_PeiLinNormalization_Async(
    Mat I,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_PeiLinNormalization_Async(
      I,
      callback,
    );
  }

  late final _ximgproc_PeiLinNormalization_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, imp1.CvCallback_1)>>('ximgproc_PeiLinNormalization_Async');
  late final _ximgproc_PeiLinNormalization_Async =
      _ximgproc_PeiLinNormalization_AsyncPtr
          .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_RFFeatureGetter_Clear(
    RFFeatureGetter self,
  ) {
    return _ximgproc_RFFeatureGetter_Clear(
      self,
    );
  }

  late final _ximgproc_RFFeatureGetter_ClearPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RFFeatureGetter)>>(
      'ximgproc_RFFeatureGetter_Clear');
  late final _ximgproc_RFFeatureGetter_Clear =
      _ximgproc_RFFeatureGetter_ClearPtr
          .asFunction<ffi.Pointer<CvStatus> Function(RFFeatureGetter)>();

  void ximgproc_RFFeatureGetter_Close(
    RFFeatureGetterPtr self,
  ) {
    return _ximgproc_RFFeatureGetter_Close(
      self,
    );
  }

  late final _ximgproc_RFFeatureGetter_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RFFeatureGetterPtr)>>(
          'ximgproc_RFFeatureGetter_Close');
  late final _ximgproc_RFFeatureGetter_Close =
      _ximgproc_RFFeatureGetter_ClosePtr
          .asFunction<void Function(RFFeatureGetterPtr)>();

  ffi.Pointer<CvStatus> ximgproc_RFFeatureGetter_Create(
    ffi.Pointer<RFFeatureGetter> rval,
  ) {
    return _ximgproc_RFFeatureGetter_Create(
      rval,
    );
  }

  late final _ximgproc_RFFeatureGetter_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Pointer<RFFeatureGetter>)>>(
      'ximgproc_RFFeatureGetter_Create');
  late final _ximgproc_RFFeatureGetter_Create =
      _ximgproc_RFFeatureGetter_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<RFFeatureGetter>)>();

  ffi.Pointer<CvStatus> ximgproc_RFFeatureGetter_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_RFFeatureGetter_Create_Async(
      callback,
    );
  }

  late final _ximgproc_RFFeatureGetter_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'ximgproc_RFFeatureGetter_Create_Async');
  late final _ximgproc_RFFeatureGetter_Create_Async =
      _ximgproc_RFFeatureGetter_Create_AsyncPtr
          .asFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_RFFeatureGetter_Empty(
    RFFeatureGetter self,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _ximgproc_RFFeatureGetter_Empty(
      self,
      rval,
    );
  }

  late final _ximgproc_RFFeatureGetter_EmptyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RFFeatureGetter,
              ffi.Pointer<ffi.Bool>)>>('ximgproc_RFFeatureGetter_Empty');
  late final _ximgproc_RFFeatureGetter_Empty =
      _ximgproc_RFFeatureGetter_EmptyPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              RFFeatureGetter, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> ximgproc_RFFeatureGetter_getFeatures(
    RFFeatureGetter self,
    Mat src,
    ffi.Pointer<Mat> features,
    int gnrmRad,
    int gsmthRad,
    int shrink,
    int outNum,
    int gradNum,
  ) {
    return _ximgproc_RFFeatureGetter_getFeatures(
      self,
      src,
      features,
      gnrmRad,
      gsmthRad,
      shrink,
      outNum,
      gradNum,
    );
  }

  late final _ximgproc_RFFeatureGetter_getFeaturesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RFFeatureGetter,
              Mat,
              ffi.Pointer<Mat>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ximgproc_RFFeatureGetter_getFeatures');
  late final _ximgproc_RFFeatureGetter_getFeatures =
      _ximgproc_RFFeatureGetter_getFeaturesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(RFFeatureGetter, Mat, ffi.Pointer<Mat>,
              int, int, int, int, int)>();

  ffi.Pointer<CvStatus> ximgproc_RFFeatureGetter_getFeatures_Async(
    RFFeatureGetter self,
    Mat src,
    int gnrmRad,
    int gsmthRad,
    int shrink,
    int outNum,
    int gradNum,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_RFFeatureGetter_getFeatures_Async(
      self,
      src,
      gnrmRad,
      gsmthRad,
      shrink,
      outNum,
      gradNum,
      callback,
    );
  }

  late final _ximgproc_RFFeatureGetter_getFeatures_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(RFFeatureGetter, Mat, ffi.Int,
                  ffi.Int, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>>(
      'ximgproc_RFFeatureGetter_getFeatures_Async');
  late final _ximgproc_RFFeatureGetter_getFeatures_Async =
      _ximgproc_RFFeatureGetter_getFeatures_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(RFFeatureGetter, Mat, int, int, int,
              int, int, imp1.CvCallback_1)>();

  void ximgproc_StructuredEdgeDetection_Close(
    StructuredEdgeDetectionPtr self,
  ) {
    return _ximgproc_StructuredEdgeDetection_Close(
      self,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_ClosePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(StructuredEdgeDetectionPtr)>>(
      'ximgproc_StructuredEdgeDetection_Close');
  late final _ximgproc_StructuredEdgeDetection_Close =
      _ximgproc_StructuredEdgeDetection_ClosePtr
          .asFunction<void Function(StructuredEdgeDetectionPtr)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_Create(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<StructuredEdgeDetection> rval,
  ) {
    return _ximgproc_StructuredEdgeDetection_Create(
      model,
      rval,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
                  ffi.Pointer<StructuredEdgeDetection>)>>(
      'ximgproc_StructuredEdgeDetection_Create');
  late final _ximgproc_StructuredEdgeDetection_Create =
      _ximgproc_StructuredEdgeDetection_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<StructuredEdgeDetection>)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_Create_1(
    ffi.Pointer<ffi.Char> model,
    RFFeatureGetter howToGetFeatures,
    ffi.Pointer<StructuredEdgeDetection> rval,
  ) {
    return _ximgproc_StructuredEdgeDetection_Create_1(
      model,
      howToGetFeatures,
      rval,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_Create_1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
                  RFFeatureGetter, ffi.Pointer<StructuredEdgeDetection>)>>(
      'ximgproc_StructuredEdgeDetection_Create_1');
  late final _ximgproc_StructuredEdgeDetection_Create_1 =
      _ximgproc_StructuredEdgeDetection_Create_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, RFFeatureGetter,
              ffi.Pointer<StructuredEdgeDetection>)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_Create_Async(
    ffi.Pointer<ffi.Char> model,
    RFFeatureGetter howToGetFeatures,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_StructuredEdgeDetection_Create_Async(
      model,
      howToGetFeatures,
      callback,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_Create_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<ffi.Char>, RFFeatureGetter, imp1.CvCallback_1)>>(
      'ximgproc_StructuredEdgeDetection_Create_Async');
  late final _ximgproc_StructuredEdgeDetection_Create_Async =
      _ximgproc_StructuredEdgeDetection_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, RFFeatureGetter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_computeOrientation(
    StructuredEdgeDetection self,
    Mat src,
    ffi.Pointer<Mat> dst,
  ) {
    return _ximgproc_StructuredEdgeDetection_computeOrientation(
      self,
      src,
      dst,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_computeOrientationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  StructuredEdgeDetection, Mat, ffi.Pointer<Mat>)>>(
      'ximgproc_StructuredEdgeDetection_computeOrientation');
  late final _ximgproc_StructuredEdgeDetection_computeOrientation =
      _ximgproc_StructuredEdgeDetection_computeOrientationPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              StructuredEdgeDetection, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus>
      ximgproc_StructuredEdgeDetection_computeOrientation_Async(
    StructuredEdgeDetection self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_StructuredEdgeDetection_computeOrientation_Async(
      self,
      src,
      callback,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_computeOrientation_AsyncPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(
                      StructuredEdgeDetection, Mat, imp1.CvCallback_1)>>(
          'ximgproc_StructuredEdgeDetection_computeOrientation_Async');
  late final _ximgproc_StructuredEdgeDetection_computeOrientation_Async =
      _ximgproc_StructuredEdgeDetection_computeOrientation_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              StructuredEdgeDetection, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_detectEdges(
    StructuredEdgeDetection self,
    Mat src,
    ffi.Pointer<Mat> dst,
  ) {
    return _ximgproc_StructuredEdgeDetection_detectEdges(
      self,
      src,
      dst,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_detectEdgesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  StructuredEdgeDetection, Mat, ffi.Pointer<Mat>)>>(
      'ximgproc_StructuredEdgeDetection_detectEdges');
  late final _ximgproc_StructuredEdgeDetection_detectEdges =
      _ximgproc_StructuredEdgeDetection_detectEdgesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              StructuredEdgeDetection, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_detectEdges_Async(
    StructuredEdgeDetection self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_StructuredEdgeDetection_detectEdges_Async(
      self,
      src,
      callback,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_detectEdges_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  StructuredEdgeDetection, Mat, imp1.CvCallback_1)>>(
      'ximgproc_StructuredEdgeDetection_detectEdges_Async');
  late final _ximgproc_StructuredEdgeDetection_detectEdges_Async =
      _ximgproc_StructuredEdgeDetection_detectEdges_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              StructuredEdgeDetection, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_edgesNms(
    StructuredEdgeDetection self,
    Mat edge_image,
    Mat orientation_image,
    ffi.Pointer<Mat> dst,
    int r,
    int s,
    double m,
    bool isParallel,
  ) {
    return _ximgproc_StructuredEdgeDetection_edgesNms(
      self,
      edge_image,
      orientation_image,
      dst,
      r,
      s,
      m,
      isParallel,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_edgesNmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              StructuredEdgeDetection,
              Mat,
              Mat,
              ffi.Pointer<Mat>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Bool)>>('ximgproc_StructuredEdgeDetection_edgesNms');
  late final _ximgproc_StructuredEdgeDetection_edgesNms =
      _ximgproc_StructuredEdgeDetection_edgesNmsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat,
              ffi.Pointer<Mat>, int, int, double, bool)>();

  ffi.Pointer<CvStatus> ximgproc_StructuredEdgeDetection_edgesNms_Async(
    StructuredEdgeDetection self,
    Mat edge_image,
    Mat orientation_image,
    int r,
    int s,
    double m,
    bool isParallel,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_StructuredEdgeDetection_edgesNms_Async(
      self,
      edge_image,
      orientation_image,
      r,
      s,
      m,
      isParallel,
      callback,
    );
  }

  late final _ximgproc_StructuredEdgeDetection_edgesNms_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat,
                  ffi.Int, ffi.Int, ffi.Float, ffi.Bool, imp1.CvCallback_1)>>(
      'ximgproc_StructuredEdgeDetection_edgesNms_Async');
  late final _ximgproc_StructuredEdgeDetection_edgesNms_Async =
      _ximgproc_StructuredEdgeDetection_edgesNms_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat, int,
              int, double, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_anisotropicDiffusion(
    Mat src,
    ffi.Pointer<Mat> dst,
    double alpha,
    double K,
    int niters,
  ) {
    return _ximgproc_anisotropicDiffusion(
      src,
      dst,
      alpha,
      K,
      niters,
    );
  }

  late final _ximgproc_anisotropicDiffusionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Float,
              ffi.Float, ffi.Int)>>('ximgproc_anisotropicDiffusion');
  late final _ximgproc_anisotropicDiffusion =
      _ximgproc_anisotropicDiffusionPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, double, double, int)>();

  ffi.Pointer<CvStatus> ximgproc_anisotropicDiffusion_Async(
    Mat src,
    double alpha,
    double K,
    int niters,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_anisotropicDiffusion_Async(
      src,
      alpha,
      K,
      niters,
      callback,
    );
  }

  late final _ximgproc_anisotropicDiffusion_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Float, ffi.Float, ffi.Int,
              imp1.CvCallback_1)>>('ximgproc_anisotropicDiffusion_Async');
  late final _ximgproc_anisotropicDiffusion_Async =
      _ximgproc_anisotropicDiffusion_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_edgePreservingFilter(
    Mat src,
    ffi.Pointer<Mat> dst,
    int d,
    double threshold,
  ) {
    return _ximgproc_edgePreservingFilter(
      src,
      dst,
      d,
      threshold,
    );
  }

  late final _ximgproc_edgePreservingFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Int,
              ffi.Double)>>('ximgproc_edgePreservingFilter');
  late final _ximgproc_edgePreservingFilter =
      _ximgproc_edgePreservingFilterPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, int, double)>();

  ffi.Pointer<CvStatus> ximgproc_edgePreservingFilter_Async(
    Mat src,
    int d,
    double threshold,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_edgePreservingFilter_Async(
      src,
      d,
      threshold,
      callback,
    );
  }

  late final _ximgproc_edgePreservingFilter_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Double,
              imp1.CvCallback_1)>>('ximgproc_edgePreservingFilter_Async');
  late final _ximgproc_edgePreservingFilter_Async =
      _ximgproc_edgePreservingFilter_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_findEllipses(
    Mat image,
    ffi.Pointer<Mat> ellipses,
    double scoreThreshold,
    double reliabilityThreshold,
    double centerDistanceThreshold,
  ) {
    return _ximgproc_findEllipses(
      image,
      ellipses,
      scoreThreshold,
      reliabilityThreshold,
      centerDistanceThreshold,
    );
  }

  late final _ximgproc_findEllipsesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Float,
              ffi.Float, ffi.Float)>>('ximgproc_findEllipses');
  late final _ximgproc_findEllipses = _ximgproc_findEllipsesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Mat>, double, double, double)>();

  ffi.Pointer<CvStatus> ximgproc_findEllipses_Async(
    Mat image,
    double scoreThreshold,
    double reliabilityThreshold,
    double centerDistanceThreshold,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_findEllipses_Async(
      image,
      scoreThreshold,
      reliabilityThreshold,
      centerDistanceThreshold,
      callback,
    );
  }

  late final _ximgproc_findEllipses_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Float, ffi.Float, ffi.Float,
              imp1.CvCallback_1)>>('ximgproc_findEllipses_Async');
  late final _ximgproc_findEllipses_Async =
      _ximgproc_findEllipses_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, double, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_niBlackThreshold(
    Mat src,
    ffi.Pointer<Mat> dst,
    double maxValue,
    int type,
    int blockSize,
    double k,
    int binarizationMethod,
    double r,
  ) {
    return _ximgproc_niBlackThreshold(
      src,
      dst,
      maxValue,
      type,
      blockSize,
      k,
      binarizationMethod,
      r,
    );
  }

  late final _ximgproc_niBlackThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Pointer<Mat>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Double)>>('ximgproc_niBlackThreshold');
  late final _ximgproc_niBlackThreshold =
      _ximgproc_niBlackThresholdPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, double, int, int, double, int, double)>();

  ffi.Pointer<CvStatus> ximgproc_niBlackThreshold_Async(
    Mat src,
    double maxValue,
    int type,
    int blockSize,
    double k,
    int binarizationMethod,
    double r,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_niBlackThreshold_Async(
      src,
      maxValue,
      type,
      blockSize,
      k,
      binarizationMethod,
      r,
      callback,
    );
  }

  late final _ximgproc_niBlackThreshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Double,
              imp1.CvCallback_1)>>('ximgproc_niBlackThreshold_Async');
  late final _ximgproc_niBlackThreshold_Async =
      _ximgproc_niBlackThreshold_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, int, int, double, int, double, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_createRLEImage(
    VecPoint3i runs,
    ffi.Pointer<Mat> res,
    CvSize size,
  ) {
    return _ximgproc_rl_createRLEImage(
      runs,
      res,
      size,
    );
  }

  late final _ximgproc_rl_createRLEImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint3i, ffi.Pointer<Mat>,
              CvSize)>>('ximgproc_rl_createRLEImage');
  late final _ximgproc_rl_createRLEImage =
      _ximgproc_rl_createRLEImagePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint3i, ffi.Pointer<Mat>, CvSize)>();

  ffi.Pointer<CvStatus> ximgproc_rl_createRLEImage_Async(
    VecPoint3i runs,
    CvSize size,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_createRLEImage_Async(
      runs,
      size,
      callback,
    );
  }

  late final _ximgproc_rl_createRLEImage_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint3i, CvSize,
              imp1.CvCallback_1)>>('ximgproc_rl_createRLEImage_Async');
  late final _ximgproc_rl_createRLEImage_Async =
      _ximgproc_rl_createRLEImage_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint3i, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_dilate(
    Mat rlSrc,
    ffi.Pointer<Mat> rlDest,
    Mat rlKernel,
    CvPoint anchor,
  ) {
    return _ximgproc_rl_dilate(
      rlSrc,
      rlDest,
      rlKernel,
      anchor,
    );
  }

  late final _ximgproc_rl_dilatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, Mat, CvPoint)>>('ximgproc_rl_dilate');
  late final _ximgproc_rl_dilate = _ximgproc_rl_dilatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, Mat, CvPoint)>();

  ffi.Pointer<CvStatus> ximgproc_rl_dilate_Async(
    Mat rlSrc,
    Mat rlKernel,
    CvPoint anchor,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_dilate_Async(
      rlSrc,
      rlKernel,
      anchor,
      callback,
    );
  }

  late final _ximgproc_rl_dilate_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint,
              imp1.CvCallback_1)>>('ximgproc_rl_dilate_Async');
  late final _ximgproc_rl_dilate_Async =
      _ximgproc_rl_dilate_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_erode(
    Mat rlSrc,
    ffi.Pointer<Mat> rlDest,
    Mat rlKernel,
    bool bBoundaryOn,
    CvPoint anchor,
  ) {
    return _ximgproc_rl_erode(
      rlSrc,
      rlDest,
      rlKernel,
      bBoundaryOn,
      anchor,
    );
  }

  late final _ximgproc_rl_erodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, Mat, ffi.Bool,
              CvPoint)>>('ximgproc_rl_erode');
  late final _ximgproc_rl_erode = _ximgproc_rl_erodePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Mat>, Mat, bool, CvPoint)>();

  ffi.Pointer<CvStatus> ximgproc_rl_erode_Async(
    Mat rlSrc,
    Mat rlKernel,
    bool bBoundaryOn,
    CvPoint anchor,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_erode_Async(
      rlSrc,
      rlKernel,
      bBoundaryOn,
      anchor,
      callback,
    );
  }

  late final _ximgproc_rl_erode_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool, CvPoint,
              imp1.CvCallback_1)>>('ximgproc_rl_erode_Async');
  late final _ximgproc_rl_erode_Async = _ximgproc_rl_erode_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, bool, CvPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_getStructuringElement(
    int shape,
    CvSize ksize,
    ffi.Pointer<Mat> rval,
  ) {
    return _ximgproc_rl_getStructuringElement(
      shape,
      ksize,
      rval,
    );
  }

  late final _ximgproc_rl_getStructuringElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, CvSize,
              ffi.Pointer<Mat>)>>('ximgproc_rl_getStructuringElement');
  late final _ximgproc_rl_getStructuringElement =
      _ximgproc_rl_getStructuringElementPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, CvSize, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> ximgproc_rl_getStructuringElement_Async(
    int shape,
    CvSize ksize,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_getStructuringElement_Async(
      shape,
      ksize,
      callback,
    );
  }

  late final _ximgproc_rl_getStructuringElement_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, CvSize,
              imp1.CvCallback_1)>>('ximgproc_rl_getStructuringElement_Async');
  late final _ximgproc_rl_getStructuringElement_Async =
      _ximgproc_rl_getStructuringElement_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(int, CvSize, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_isRLMorphologyPossible(
    Mat rlStructuringElement,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _ximgproc_rl_isRLMorphologyPossible(
      rlStructuringElement,
      rval,
    );
  }

  late final _ximgproc_rl_isRLMorphologyPossiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat,
              ffi.Pointer<ffi.Bool>)>>('ximgproc_rl_isRLMorphologyPossible');
  late final _ximgproc_rl_isRLMorphologyPossible =
      _ximgproc_rl_isRLMorphologyPossiblePtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> ximgproc_rl_isRLMorphologyPossible_Async(
    Mat rlStructuringElement,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_isRLMorphologyPossible_Async(
      rlStructuringElement,
      callback,
    );
  }

  late final _ximgproc_rl_isRLMorphologyPossible_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat,
              imp1.CvCallback_1)>>('ximgproc_rl_isRLMorphologyPossible_Async');
  late final _ximgproc_rl_isRLMorphologyPossible_Async =
      _ximgproc_rl_isRLMorphologyPossible_AsyncPtr
          .asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_morphologyEx(
    Mat rlSrc,
    ffi.Pointer<Mat> rlDest,
    int op,
    Mat rlKernel,
    bool bBoundaryOnForErosion,
    CvPoint anchor,
  ) {
    return _ximgproc_rl_morphologyEx(
      rlSrc,
      rlDest,
      op,
      rlKernel,
      bBoundaryOnForErosion,
      anchor,
    );
  }

  late final _ximgproc_rl_morphologyExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Int, Mat,
              ffi.Bool, CvPoint)>>('ximgproc_rl_morphologyEx');
  late final _ximgproc_rl_morphologyEx =
      _ximgproc_rl_morphologyExPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, int, Mat, bool, CvPoint)>();

  ffi.Pointer<CvStatus> ximgproc_rl_morphologyEx_Async(
    Mat rlSrc,
    int op,
    Mat rlKernel,
    bool bBoundaryOnForErosion,
    CvPoint anchor,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_morphologyEx_Async(
      rlSrc,
      op,
      rlKernel,
      bBoundaryOnForErosion,
      anchor,
      callback,
    );
  }

  late final _ximgproc_rl_morphologyEx_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, ffi.Bool, CvPoint,
              imp1.CvCallback_1)>>('ximgproc_rl_morphologyEx_Async');
  late final _ximgproc_rl_morphologyEx_Async =
      _ximgproc_rl_morphologyEx_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, int, Mat, bool, CvPoint, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_rl_paint(
    Mat image,
    Mat rlSrc,
    Scalar value,
  ) {
    return _ximgproc_rl_paint(
      image,
      rlSrc,
      value,
    );
  }

  late final _ximgproc_rl_paintPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Scalar)>>(
      'ximgproc_rl_paint');
  late final _ximgproc_rl_paint = _ximgproc_rl_paintPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Scalar)>();

  ffi.Pointer<CvStatus> ximgproc_rl_paint_Async(
    Mat image,
    Mat rlSrc,
    Scalar value,
    imp1.CvCallback_0 callback,
  ) {
    return _ximgproc_rl_paint_Async(
      image,
      rlSrc,
      value,
      callback,
    );
  }

  late final _ximgproc_rl_paint_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Scalar, imp1.CvCallback_0)>>('ximgproc_rl_paint_Async');
  late final _ximgproc_rl_paint_Async = _ximgproc_rl_paint_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> ximgproc_rl_threshold(
    Mat src,
    ffi.Pointer<Mat> rlDest,
    double thresh,
    int type,
  ) {
    return _ximgproc_rl_threshold(
      src,
      rlDest,
      thresh,
      type,
    );
  }

  late final _ximgproc_rl_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, ffi.Double,
              ffi.Int)>>('ximgproc_rl_threshold');
  late final _ximgproc_rl_threshold = _ximgproc_rl_thresholdPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, double, int)>();

  ffi.Pointer<CvStatus> ximgproc_rl_threshold_Async(
    Mat src,
    double thresh,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_rl_threshold_Async(
      src,
      thresh,
      type,
      callback,
    );
  }

  late final _ximgproc_rl_threshold_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Int,
              imp1.CvCallback_1)>>('ximgproc_rl_threshold_Async');
  late final _ximgproc_rl_threshold_Async =
      _ximgproc_rl_threshold_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, double, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> ximgproc_thinning(
    Mat src,
    ffi.Pointer<Mat> dst,
    int thinningType,
  ) {
    return _ximgproc_thinning(
      src,
      dst,
      thinningType,
    );
  }

  late final _ximgproc_thinningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Mat>, ffi.Int)>>('ximgproc_thinning');
  late final _ximgproc_thinning = _ximgproc_thinningPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, int)>();

  ffi.Pointer<CvStatus> ximgproc_thinning_Async(
    Mat src,
    int thinningType,
    imp1.CvCallback_1 callback,
  ) {
    return _ximgproc_thinning_Async(
      src,
      thinningType,
      callback,
    );
  }

  late final _ximgproc_thinning_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, imp1.CvCallback_1)>>('ximgproc_thinning_Async');
  late final _ximgproc_thinning_Async = _ximgproc_thinning_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, imp1.CvCallback_1)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeContrib _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParametersPtr)>>
      get ArucoDetectorParameters_Close =>
          _library._ArucoDetectorParameters_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorPtr)>>
      get ArucoDetector_Close => _library._ArucoDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDictionaryPtr)>>
      get ArucoDictionary_Close => _library._ArucoDictionary_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BlockMeanHashPtr)>>
      get BlockMeanHash_Close => _library._BlockMeanHash_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityBRISQUEPtr)>>
      get QualityBRISQUE_close => _library._QualityBRISQUE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityGMSDPtr)>>
      get QualityGMSD_close => _library._QualityGMSD_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityMSEPtr)>>
      get QualityMSE_close => _library._QualityMSE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityPSNRPtr)>>
      get QualityPSNR_close => _library._QualityPSNR_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualitySSIMPtr)>>
      get QualitySSIM_close => _library._QualitySSIM_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PtrWBDetectorPtr)>>
      get WBDetector_Close => _library._WBDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(WeChatQRCodePtr)>>
      get WeChatQRCode_Close => _library._WeChatQRCode_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EdgeDrawingPtr)>>
      get ximgproc_EdgeDrawing_Close => _library._ximgproc_EdgeDrawing_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GraphSegmentationPtr)>>
      get ximgproc_GraphSegmentation_Close =>
          _library._ximgproc_GraphSegmentation_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(RFFeatureGetterPtr)>>
      get ximgproc_RFFeatureGetter_Close =>
          _library._ximgproc_RFFeatureGetter_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StructuredEdgeDetectionPtr)>>
      get ximgproc_StructuredEdgeDetection_Close =>
          _library._ximgproc_StructuredEdgeDetection_ClosePtr;
}

final class ArucoDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class ArucoDetectorParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDetectorParametersPtr = ffi.Pointer<ArucoDetectorParameters>;
typedef ArucoDetectorPtr = ffi.Pointer<ArucoDetector>;

final class ArucoDictionary extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDictionaryPtr = ffi.Pointer<ArucoDictionary>;

const int BLOCK_MEAN_HASH_MODE_0 = 0;

const int BLOCK_MEAN_HASH_MODE_1 = 1;

final class BlockMeanHash extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BlockMeanHashPtr = ffi.Pointer<BlockMeanHash>;

final class Box extends ffi.Struct {
  @ffi.Int()
  external int h;

  @ffi.Float()
  external double score;

  @ffi.Int()
  external int w;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

typedef CvPoint = imp1.CvPoint;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class EdgeBoxes extends ffi.Struct {
  @ffi.Float()
  external double alpha;

  @ffi.Float()
  external double beta;

  @ffi.Float()
  external double eta;

  @ffi.Float()
  external double minScore;

  @ffi.Int()
  external int maxBoxes;

  @ffi.Float()
  external double edgeMinMag;

  @ffi.Float()
  external double edgeMergeThr;

  @ffi.Float()
  external double clusterMinMag;

  @ffi.Float()
  external double maxAspectRatio;

  @ffi.Float()
  external double minBoxArea;

  @ffi.Float()
  external double gamma;

  @ffi.Float()
  external double kappa;
}

final class EdgeDrawing extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

final class EdgeDrawingParams extends ffi.Struct {
  @ffi.Int()
  external int AnchorThresholdValue;

  @ffi.Int()
  external int EdgeDetectionOperator;

  @ffi.Int()
  external int GradientThresholdValue;

  @ffi.Double()
  external double LineFitErrorThreshold;

  @ffi.Double()
  external double MaxDistanceBetweenTwoLines;

  @ffi.Double()
  external double MaxErrorThreshold;

  @ffi.Int()
  external int MinLineLength;

  @ffi.Int()
  external int MinPathLength;

  @ffi.Bool()
  external bool NFAValidation;

  @ffi.Bool()
  external bool PFmode;

  @ffi.Int()
  external int ScanInterval;

  @ffi.Float()
  external double Sigma;

  @ffi.Bool()
  external bool SumFlag;
}

typedef EdgeDrawingPtr = ffi.Pointer<EdgeDrawing>;

final class GraphSegmentation extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef GraphSegmentationPtr = ffi.Pointer<GraphSegmentation>;
typedef Mat = imp1.Mat;

final class PtrWBDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef PtrWBDetectorPtr = ffi.Pointer<PtrWBDetector>;

final class QualityBRISQUE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityBRISQUEPtr = ffi.Pointer<QualityBRISQUE>;

final class QualityGMSD extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityGMSDPtr = ffi.Pointer<QualityGMSD>;

final class QualityMSE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityMSEPtr = ffi.Pointer<QualityMSE>;

final class QualityPSNR extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityPSNRPtr = ffi.Pointer<QualityPSNR>;

final class QualitySSIM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualitySSIMPtr = ffi.Pointer<QualitySSIM>;

final class RFFeatureGetter extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef RFFeatureGetterPtr = ffi.Pointer<RFFeatureGetter>;
typedef Scalar = imp1.Scalar;

final class StructuredEdgeDetection extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef StructuredEdgeDetectionPtr = ffi.Pointer<StructuredEdgeDetection>;
typedef VecF32 = imp1.VecF32;
typedef VecF64 = imp1.VecF64;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint3i = imp1.VecPoint3i;
typedef VecRect = imp1.VecRect;
typedef VecVecChar = imp1.VecVecChar;
typedef VecVecPoint = imp1.VecVecPoint;
typedef VecVecPoint2f = imp1.VecVecPoint2f;

final class WeChatQRCode extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef WeChatQRCodePtr = ffi.Pointer<WeChatQRCode>;
