// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Calib3d
///
class CvNativeCalib3d {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeCalib3d(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeCalib3d.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> cv_calibrateCamera(
    VecVecPoint3f objectPoints,
    VecVecPoint2f imagePoints,
    CvSize imageSize,
    Mat cameraMatrix,
    Mat distCoeffs,
    Mat rvecs,
    Mat tvecs,
    int flag,
    TermCriteria criteria,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calibrateCamera(
      objectPoints,
      imagePoints,
      imageSize,
      cameraMatrix,
      distCoeffs,
      rvecs,
      tvecs,
      flag,
      criteria,
      rval,
      callback,
    );
  }

  late final _cv_calibrateCameraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecVecPoint3f,
              VecVecPoint2f,
              CvSize,
              Mat,
              Mat,
              Mat,
              Mat,
              ffi.Int,
              TermCriteria,
              ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_calibrateCamera');
  late final _cv_calibrateCamera = _cv_calibrateCameraPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecVecPoint3f,
          VecVecPoint2f,
          CvSize,
          Mat,
          Mat,
          Mat,
          Mat,
          int,
          TermCriteria,
          ffi.Pointer<ffi.Double>,
          imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_drawChessboardCorners(
    Mat image,
    CvSize patternSize,
    VecPoint2f corners,
    bool patternWasFound,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_drawChessboardCorners(
      image,
      patternSize,
      corners,
      patternWasFound,
      callback,
    );
  }

  late final _cv_drawChessboardCornersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, VecPoint2f, ffi.Bool,
              imp1.CvCallback_0)>>('cv_drawChessboardCorners');
  late final _cv_drawChessboardCorners =
      _cv_drawChessboardCornersPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvSize, VecPoint2f, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_estimateAffine2D(
    VecPoint2f from,
    VecPoint2f to,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_estimateAffine2D(
      from,
      to,
      rval,
      callback,
    );
  }

  late final _cv_estimateAffine2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f,
              ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_estimateAffine2D');
  late final _cv_estimateAffine2D = _cv_estimateAffine2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_estimateAffine2D_1(
    VecPoint2f from,
    VecPoint2f to,
    Mat inliers,
    int method,
    double ransacReprojThreshold,
    int maxIters,
    double confidence,
    int refineIters,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_estimateAffine2D_1(
      from,
      to,
      inliers,
      method,
      ransacReprojThreshold,
      maxIters,
      confidence,
      refineIters,
      rval,
      callback,
    );
  }

  late final _cv_estimateAffine2D_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f,
              VecPoint2f,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Size,
              ffi.Double,
              ffi.Size,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_estimateAffine2D_1');
  late final _cv_estimateAffine2D_1 = _cv_estimateAffine2D_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, Mat, int, double,
          int, double, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_estimateAffinePartial2D(
    VecPoint2f from,
    VecPoint2f to,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_estimateAffinePartial2D(
      from,
      to,
      rval,
      callback,
    );
  }

  late final _cv_estimateAffinePartial2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f,
              VecPoint2f,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_estimateAffinePartial2D');
  late final _cv_estimateAffinePartial2D =
      _cv_estimateAffinePartial2DPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_estimateAffinePartial2D_1(
    VecPoint2f from,
    VecPoint2f to,
    Mat inliers,
    int method,
    double ransacReprojThreshold,
    int maxIters,
    double confidence,
    int refineIters,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_estimateAffinePartial2D_1(
      from,
      to,
      inliers,
      method,
      ransacReprojThreshold,
      maxIters,
      confidence,
      refineIters,
      rval,
      callback,
    );
  }

  late final _cv_estimateAffinePartial2D_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f,
              VecPoint2f,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Size,
              ffi.Double,
              ffi.Size,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_estimateAffinePartial2D_1');
  late final _cv_estimateAffinePartial2D_1 =
      _cv_estimateAffinePartial2D_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, Mat, int,
              double, int, double, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findChessboardCorners(
    Mat image,
    CvSize patternSize,
    ffi.Pointer<VecPoint2f> corners,
    int flags,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findChessboardCorners(
      image,
      patternSize,
      corners,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_findChessboardCornersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvSize,
              ffi.Pointer<VecPoint2f>,
              ffi.Int,
              ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_findChessboardCorners');
  late final _cv_findChessboardCorners =
      _cv_findChessboardCornersPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Pointer<VecPoint2f>,
              int, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findChessboardCornersSB(
    Mat image,
    CvSize patternSize,
    ffi.Pointer<VecPoint2f> corners,
    int flags,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findChessboardCornersSB(
      image,
      patternSize,
      corners,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_findChessboardCornersSBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvSize,
              ffi.Pointer<VecPoint2f>,
              ffi.Int,
              ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_findChessboardCornersSB');
  late final _cv_findChessboardCornersSB =
      _cv_findChessboardCornersSBPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Pointer<VecPoint2f>,
              int, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findChessboardCornersSB_1(
    Mat image,
    CvSize patternSize,
    ffi.Pointer<VecPoint2f> corners,
    int flags,
    Mat meta,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findChessboardCornersSB_1(
      image,
      patternSize,
      corners,
      flags,
      meta,
      rval,
      callback,
    );
  }

  late final _cv_findChessboardCornersSB_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              CvSize,
              ffi.Pointer<VecPoint2f>,
              ffi.Int,
              Mat,
              ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_findChessboardCornersSB_1');
  late final _cv_findChessboardCornersSB_1 =
      _cv_findChessboardCornersSB_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Pointer<VecPoint2f>,
              int, Mat, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findHomography(
    Mat src,
    Mat dst,
    int method,
    double ransacReprojThreshold,
    Mat mask,
    int maxIters,
    double confidence,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findHomography(
      src,
      dst,
      method,
      ransacReprojThreshold,
      mask,
      maxIters,
      confidence,
      rval,
      callback,
    );
  }

  late final _cv_findHomographyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Double,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_findHomography');
  late final _cv_findHomography = _cv_findHomographyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, Mat, int, double,
          ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fisheye_estimateNewCameraMatrixForUndistortRectify(
    Mat k,
    Mat d,
    CvSize imgSize,
    Mat r,
    Mat p,
    double balance,
    CvSize newSize,
    double fovScale,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fisheye_estimateNewCameraMatrixForUndistortRectify(
      k,
      d,
      imgSize,
      r,
      p,
      balance,
      newSize,
      fovScale,
      callback,
    );
  }

  late final _cv_fisheye_estimateNewCameraMatrixForUndistortRectifyPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, Mat, Mat,
                      ffi.Double, CvSize, ffi.Double, imp1.CvCallback_0)>>(
          'cv_fisheye_estimateNewCameraMatrixForUndistortRectify');
  late final _cv_fisheye_estimateNewCameraMatrixForUndistortRectify =
      _cv_fisheye_estimateNewCameraMatrixForUndistortRectifyPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, Mat, Mat, double,
              CvSize, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fisheye_undistortImage(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fisheye_undistortImage(
      distorted,
      undistorted,
      k,
      d,
      callback,
    );
  }

  late final _cv_fisheye_undistortImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat,
              imp1.CvCallback_0)>>('cv_fisheye_undistortImage');
  late final _cv_fisheye_undistortImage =
      _cv_fisheye_undistortImagePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fisheye_undistortImage_1(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    Mat knew,
    CvSize size,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fisheye_undistortImage_1(
      distorted,
      undistorted,
      k,
      d,
      knew,
      size,
      callback,
    );
  }

  late final _cv_fisheye_undistortImage_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, CvSize,
              imp1.CvCallback_0)>>('cv_fisheye_undistortImage_1');
  late final _cv_fisheye_undistortImage_1 =
      _cv_fisheye_undistortImage_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, Mat, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fisheye_undistortPoints(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    Mat R,
    Mat P,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fisheye_undistortPoints(
      distorted,
      undistorted,
      k,
      d,
      R,
      P,
      callback,
    );
  }

  late final _cv_fisheye_undistortPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Mat,
              imp1.CvCallback_0)>>('cv_fisheye_undistortPoints');
  late final _cv_fisheye_undistortPoints =
      _cv_fisheye_undistortPointsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getOptimalNewCameraMatrix(
    Mat cameraMatrix,
    Mat distCoeffs,
    CvSize size,
    double alpha,
    CvSize newImgSize,
    ffi.Pointer<CvRect> validPixROI,
    bool centerPrincipalPoint,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getOptimalNewCameraMatrix(
      cameraMatrix,
      distCoeffs,
      size,
      alpha,
      newImgSize,
      validPixROI,
      centerPrincipalPoint,
      rval,
      callback,
    );
  }

  late final _cv_getOptimalNewCameraMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              CvSize,
              ffi.Double,
              CvSize,
              ffi.Pointer<CvRect>,
              ffi.Bool,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_getOptimalNewCameraMatrix');
  late final _cv_getOptimalNewCameraMatrix =
      _cv_getOptimalNewCameraMatrixPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              CvSize,
              double,
              CvSize,
              ffi.Pointer<CvRect>,
              bool,
              ffi.Pointer<Mat>,
              imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_initUndistortRectifyMap(
    Mat cameraMatrix,
    Mat distCoeffs,
    Mat r,
    Mat newCameraMatrix,
    CvSize size,
    int m1type,
    Mat map1,
    Mat map2,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_initUndistortRectifyMap(
      cameraMatrix,
      distCoeffs,
      r,
      newCameraMatrix,
      size,
      m1type,
      map1,
      map2,
      callback,
    );
  }

  late final _cv_initUndistortRectifyMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, CvSize, ffi.Int,
              Mat, Mat, imp1.CvCallback_0)>>('cv_initUndistortRectifyMap');
  late final _cv_initUndistortRectifyMap =
      _cv_initUndistortRectifyMapPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, CvSize, int, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_undistort(
    Mat src,
    Mat dst,
    Mat cameraMatrix,
    Mat distCoeffs,
    Mat newCameraMatrix,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_undistort(
      src,
      dst,
      cameraMatrix,
      distCoeffs,
      newCameraMatrix,
      callback,
    );
  }

  late final _cv_undistortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_undistort');
  late final _cv_undistort = _cv_undistortPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_undistortPoints(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    Mat r,
    Mat p,
    TermCriteria criteria,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_undistortPoints(
      distorted,
      undistorted,
      k,
      d,
      r,
      p,
      criteria,
      callback,
    );
  }

  late final _cv_undistortPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Mat,
              TermCriteria, imp1.CvCallback_0)>>('cv_undistortPoints');
  late final _cv_undistortPoints = _cv_undistortPointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, Mat, Mat, TermCriteria, imp1.CvCallback_0)>();
}

typedef CvRect = imp1.CvRect;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef TermCriteria = imp1.TermCriteria;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecVecPoint2f = imp1.VecVecPoint2f;
typedef VecVecPoint3f = imp1.VecVecPoint3f;
