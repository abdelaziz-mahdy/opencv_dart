// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Video
///
class CvNativeVideo {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeVideo(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeVideo.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Apply(
    BackgroundSubtractorKNN self,
    Mat src,
    Mat dst,
  ) {
    return _BackgroundSubtractorKNN_Apply(
      self,
      src,
      dst,
    );
  }

  late final _BackgroundSubtractorKNN_ApplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BackgroundSubtractorKNN, Mat,
              Mat)>>('BackgroundSubtractorKNN_Apply');
  late final _BackgroundSubtractorKNN_Apply =
      _BackgroundSubtractorKNN_ApplyPtr.asFunction<
          ffi.Pointer<CvStatus> Function(BackgroundSubtractorKNN, Mat, Mat)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Apply_Async(
    BackgroundSubtractorKNN self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _BackgroundSubtractorKNN_Apply_Async(
      self,
      src,
      callback,
    );
  }

  late final _BackgroundSubtractorKNN_Apply_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BackgroundSubtractorKNN, Mat,
              imp1.CvCallback_1)>>('BackgroundSubtractorKNN_Apply_Async');
  late final _BackgroundSubtractorKNN_Apply_Async =
      _BackgroundSubtractorKNN_Apply_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              BackgroundSubtractorKNN, Mat, imp1.CvCallback_1)>();

  void BackgroundSubtractorKNN_Close(
    BackgroundSubtractorKNNPtr self,
  ) {
    return _BackgroundSubtractorKNN_Close(
      self,
    );
  }

  late final _BackgroundSubtractorKNN_ClosePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNNPtr)>>(
      'BackgroundSubtractorKNN_Close');
  late final _BackgroundSubtractorKNN_Close = _BackgroundSubtractorKNN_ClosePtr
      .asFunction<void Function(BackgroundSubtractorKNNPtr)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Create(
    ffi.Pointer<BackgroundSubtractorKNN> rval,
  ) {
    return _BackgroundSubtractorKNN_Create(
      rval,
    );
  }

  late final _BackgroundSubtractorKNN_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<BackgroundSubtractorKNN>)>>(
      'BackgroundSubtractorKNN_Create');
  late final _BackgroundSubtractorKNN_Create =
      _BackgroundSubtractorKNN_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<BackgroundSubtractorKNN>)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorKNN_CreateWithParams(
    int history,
    double dist2Threshold,
    bool detectShadows,
    ffi.Pointer<BackgroundSubtractorKNN> rval,
  ) {
    return _BackgroundSubtractorKNN_CreateWithParams(
      history,
      dist2Threshold,
      detectShadows,
      rval,
    );
  }

  late final _BackgroundSubtractorKNN_CreateWithParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Double, ffi.Bool,
                  ffi.Pointer<BackgroundSubtractorKNN>)>>(
      'BackgroundSubtractorKNN_CreateWithParams');
  late final _BackgroundSubtractorKNN_CreateWithParams =
      _BackgroundSubtractorKNN_CreateWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, double, bool, ffi.Pointer<BackgroundSubtractorKNN>)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorKNN_CreateWithParams_Async(
    int history,
    double dist2Threshold,
    bool detectShadows,
    imp1.CvCallback_1 callback,
  ) {
    return _BackgroundSubtractorKNN_CreateWithParams_Async(
      history,
      dist2Threshold,
      detectShadows,
      callback,
    );
  }

  late final _BackgroundSubtractorKNN_CreateWithParams_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Int, ffi.Double, ffi.Bool, imp1.CvCallback_1)>>(
      'BackgroundSubtractorKNN_CreateWithParams_Async');
  late final _BackgroundSubtractorKNN_CreateWithParams_Async =
      _BackgroundSubtractorKNN_CreateWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, double, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _BackgroundSubtractorKNN_Create_Async(
      callback,
    );
  }

  late final _BackgroundSubtractorKNN_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'BackgroundSubtractorKNN_Create_Async');
  late final _BackgroundSubtractorKNN_Create_Async =
      _BackgroundSubtractorKNN_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Apply(
    BackgroundSubtractorMOG2 self,
    Mat src,
    Mat dst,
  ) {
    return _BackgroundSubtractorMOG2_Apply(
      self,
      src,
      dst,
    );
  }

  late final _BackgroundSubtractorMOG2_ApplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BackgroundSubtractorMOG2, Mat,
              Mat)>>('BackgroundSubtractorMOG2_Apply');
  late final _BackgroundSubtractorMOG2_Apply =
      _BackgroundSubtractorMOG2_ApplyPtr.asFunction<
          ffi.Pointer<CvStatus> Function(BackgroundSubtractorMOG2, Mat, Mat)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Apply_Async(
    BackgroundSubtractorMOG2 self,
    Mat src,
    imp1.CvCallback_1 callback,
  ) {
    return _BackgroundSubtractorMOG2_Apply_Async(
      self,
      src,
      callback,
    );
  }

  late final _BackgroundSubtractorMOG2_Apply_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BackgroundSubtractorMOG2, Mat,
              imp1.CvCallback_1)>>('BackgroundSubtractorMOG2_Apply_Async');
  late final _BackgroundSubtractorMOG2_Apply_Async =
      _BackgroundSubtractorMOG2_Apply_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              BackgroundSubtractorMOG2, Mat, imp1.CvCallback_1)>();

  void BackgroundSubtractorMOG2_Close(
    BackgroundSubtractorMOG2Ptr self,
  ) {
    return _BackgroundSubtractorMOG2_Close(
      self,
    );
  }

  late final _BackgroundSubtractorMOG2_ClosePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>>(
      'BackgroundSubtractorMOG2_Close');
  late final _BackgroundSubtractorMOG2_Close =
      _BackgroundSubtractorMOG2_ClosePtr.asFunction<
          void Function(BackgroundSubtractorMOG2Ptr)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Create(
    ffi.Pointer<BackgroundSubtractorMOG2> rval,
  ) {
    return _BackgroundSubtractorMOG2_Create(
      rval,
    );
  }

  late final _BackgroundSubtractorMOG2_CreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Pointer<BackgroundSubtractorMOG2>)>>(
      'BackgroundSubtractorMOG2_Create');
  late final _BackgroundSubtractorMOG2_Create =
      _BackgroundSubtractorMOG2_CreatePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<BackgroundSubtractorMOG2>)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_CreateWithParams(
    int history,
    double varThreshold,
    bool detectShadows,
    ffi.Pointer<BackgroundSubtractorMOG2> rval,
  ) {
    return _BackgroundSubtractorMOG2_CreateWithParams(
      history,
      varThreshold,
      detectShadows,
      rval,
    );
  }

  late final _BackgroundSubtractorMOG2_CreateWithParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Double, ffi.Bool,
                  ffi.Pointer<BackgroundSubtractorMOG2>)>>(
      'BackgroundSubtractorMOG2_CreateWithParams');
  late final _BackgroundSubtractorMOG2_CreateWithParams =
      _BackgroundSubtractorMOG2_CreateWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, double, bool, ffi.Pointer<BackgroundSubtractorMOG2>)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_CreateWithParams_Async(
    int history,
    double varThreshold,
    bool detectShadows,
    imp1.CvCallback_1 callback,
  ) {
    return _BackgroundSubtractorMOG2_CreateWithParams_Async(
      history,
      varThreshold,
      detectShadows,
      callback,
    );
  }

  late final _BackgroundSubtractorMOG2_CreateWithParams_AsyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  ffi.Int, ffi.Double, ffi.Bool, imp1.CvCallback_1)>>(
      'BackgroundSubtractorMOG2_CreateWithParams_Async');
  late final _BackgroundSubtractorMOG2_CreateWithParams_Async =
      _BackgroundSubtractorMOG2_CreateWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              int, double, bool, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _BackgroundSubtractorMOG2_Create_Async(
      callback,
    );
  }

  late final _BackgroundSubtractorMOG2_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'BackgroundSubtractorMOG2_Create_Async');
  late final _BackgroundSubtractorMOG2_Create_Async =
      _BackgroundSubtractorMOG2_Create_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> CalcOpticalFlowFarneback(
    Mat prevImg,
    Mat nextImg,
    Mat flow,
    double pyrScale,
    int levels,
    int winsize,
    int iterations,
    int polyN,
    double polySigma,
    int flags,
  ) {
    return _CalcOpticalFlowFarneback(
      prevImg,
      nextImg,
      flow,
      pyrScale,
      levels,
      winsize,
      iterations,
      polyN,
      polySigma,
      flags,
    );
  }

  late final _CalcOpticalFlowFarnebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int)>>('CalcOpticalFlowFarneback');
  late final _CalcOpticalFlowFarneback =
      _CalcOpticalFlowFarnebackPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, double, int, int, int, int, double, int)>();

  ffi.Pointer<CvStatus> CalcOpticalFlowFarneback_Async(
    Mat prevImg,
    Mat nextImg,
    Mat flow,
    double pyrScale,
    int levels,
    int winsize,
    int iterations,
    int polyN,
    double polySigma,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _CalcOpticalFlowFarneback_Async(
      prevImg,
      nextImg,
      flow,
      pyrScale,
      levels,
      winsize,
      iterations,
      polyN,
      polySigma,
      flags,
      callback,
    );
  }

  late final _CalcOpticalFlowFarneback_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              imp1.CvCallback_0)>>('CalcOpticalFlowFarneback_Async');
  late final _CalcOpticalFlowFarneback_Async =
      _CalcOpticalFlowFarneback_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, int, int, int,
              int, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> CalcOpticalFlowPyrLK(
    Mat prevImg,
    Mat nextImg,
    VecPoint2f prevPts,
    ffi.Pointer<VecPoint2f> nextPts,
    ffi.Pointer<VecUChar> status,
    ffi.Pointer<VecF32> err,
  ) {
    return _CalcOpticalFlowPyrLK(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      status,
      err,
    );
  }

  late final _CalcOpticalFlowPyrLKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              VecPoint2f,
              ffi.Pointer<VecPoint2f>,
              ffi.Pointer<VecUChar>,
              ffi.Pointer<VecF32>)>>('CalcOpticalFlowPyrLK');
  late final _CalcOpticalFlowPyrLK = _CalcOpticalFlowPyrLKPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat,
          Mat,
          VecPoint2f,
          ffi.Pointer<VecPoint2f>,
          ffi.Pointer<VecUChar>,
          ffi.Pointer<VecF32>)>();

  ffi.Pointer<CvStatus> CalcOpticalFlowPyrLKWithParams(
    Mat prevImg,
    Mat nextImg,
    VecPoint2f prevPts,
    ffi.Pointer<VecPoint2f> nextPts,
    ffi.Pointer<VecUChar> status,
    ffi.Pointer<VecF32> err,
    CvSize winSize,
    int maxLevel,
    TermCriteria criteria,
    int flags,
    double minEigThreshold,
  ) {
    return _CalcOpticalFlowPyrLKWithParams(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      status,
      err,
      winSize,
      maxLevel,
      criteria,
      flags,
      minEigThreshold,
    );
  }

  late final _CalcOpticalFlowPyrLKWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              VecPoint2f,
              ffi.Pointer<VecPoint2f>,
              ffi.Pointer<VecUChar>,
              ffi.Pointer<VecF32>,
              CvSize,
              ffi.Int,
              TermCriteria,
              ffi.Int,
              ffi.Double)>>('CalcOpticalFlowPyrLKWithParams');
  late final _CalcOpticalFlowPyrLKWithParams =
      _CalcOpticalFlowPyrLKWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              VecPoint2f,
              ffi.Pointer<VecPoint2f>,
              ffi.Pointer<VecUChar>,
              ffi.Pointer<VecF32>,
              CvSize,
              int,
              TermCriteria,
              int,
              double)>();

  ffi.Pointer<CvStatus> CalcOpticalFlowPyrLK_Async(
    Mat prevImg,
    Mat nextImg,
    VecPoint2f prevPts,
    ffi.Pointer<VecPoint2f> nextPts,
    CvSize winSize,
    int maxLevel,
    TermCriteria criteria,
    int flags,
    double minEigThreshold,
    imp1.CvCallback_2 callback,
  ) {
    return _CalcOpticalFlowPyrLK_Async(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      winSize,
      maxLevel,
      criteria,
      flags,
      minEigThreshold,
      callback,
    );
  }

  late final _CalcOpticalFlowPyrLK_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              VecPoint2f,
              ffi.Pointer<VecPoint2f>,
              CvSize,
              ffi.Int,
              TermCriteria,
              ffi.Int,
              ffi.Double,
              imp1.CvCallback_2)>>('CalcOpticalFlowPyrLK_Async');
  late final _CalcOpticalFlowPyrLK_Async =
      _CalcOpticalFlowPyrLK_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              VecPoint2f,
              ffi.Pointer<VecPoint2f>,
              CvSize,
              int,
              TermCriteria,
              int,
              double,
              imp1.CvCallback_2)>();

  ffi.Pointer<CvStatus> FindTransformECC(
    Mat templateImage,
    Mat inputImage,
    Mat warpMatrix,
    int motionType,
    TermCriteria criteria,
    Mat inputMask,
    int gaussFiltSize,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _FindTransformECC(
      templateImage,
      inputImage,
      warpMatrix,
      motionType,
      criteria,
      inputMask,
      gaussFiltSize,
      rval,
    );
  }

  late final _FindTransformECCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria,
              Mat, ffi.Int, ffi.Pointer<ffi.Double>)>>('FindTransformECC');
  late final _FindTransformECC = _FindTransformECCPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, TermCriteria, Mat, int,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> FindTransformECC_Async(
    Mat templateImage,
    Mat inputImage,
    Mat warpMatrix,
    int motionType,
    TermCriteria criteria,
    Mat inputMask,
    int gaussFiltSize,
    imp1.CvCallback_1 callback,
  ) {
    return _FindTransformECC_Async(
      templateImage,
      inputImage,
      warpMatrix,
      motionType,
      criteria,
      inputMask,
      gaussFiltSize,
      callback,
    );
  }

  late final _FindTransformECC_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria,
              Mat, ffi.Int, imp1.CvCallback_1)>>('FindTransformECC_Async');
  late final _FindTransformECC_Async = _FindTransformECC_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, TermCriteria, Mat, int, imp1.CvCallback_1)>();

  void KalmanFilter_Close(
    KalmanFilterPtr self,
  ) {
    return _KalmanFilter_Close(
      self,
    );
  }

  late final _KalmanFilter_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilterPtr)>>(
          'KalmanFilter_Close');
  late final _KalmanFilter_Close =
      _KalmanFilter_ClosePtr.asFunction<void Function(KalmanFilterPtr)>();

  ffi.Pointer<CvStatus> KalmanFilter_Correct(
    KalmanFilter self,
    Mat measurement,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_Correct(
      self,
      measurement,
      rval,
    );
  }

  late final _KalmanFilter_CorrectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, ffi.Pointer<Mat>)>>('KalmanFilter_Correct');
  late final _KalmanFilter_Correct = _KalmanFilter_CorrectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_Correct_Async(
    KalmanFilter self,
    Mat measurement,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_Correct_Async(
      self,
      measurement,
      callback,
    );
  }

  late final _KalmanFilter_Correct_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_1)>>('KalmanFilter_Correct_Async');
  late final _KalmanFilter_Correct_Async =
      _KalmanFilter_Correct_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetControlMatrix(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetControlMatrix(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetControlMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              ffi.Pointer<Mat>)>>('KalmanFilter_GetControlMatrix');
  late final _KalmanFilter_GetControlMatrix =
      _KalmanFilter_GetControlMatrixPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetControlMatrix_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetControlMatrix_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetControlMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetControlMatrix_Async');
  late final _KalmanFilter_GetControlMatrix_Async =
      _KalmanFilter_GetControlMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPost(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetErrorCovPost(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetErrorCovPostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetErrorCovPost');
  late final _KalmanFilter_GetErrorCovPost =
      _KalmanFilter_GetErrorCovPostPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPost_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetErrorCovPost_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetErrorCovPost_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetErrorCovPost_Async');
  late final _KalmanFilter_GetErrorCovPost_Async =
      _KalmanFilter_GetErrorCovPost_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPre(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetErrorCovPre(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetErrorCovPrePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetErrorCovPre');
  late final _KalmanFilter_GetErrorCovPre =
      _KalmanFilter_GetErrorCovPrePtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPre_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetErrorCovPre_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetErrorCovPre_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetErrorCovPre_Async');
  late final _KalmanFilter_GetErrorCovPre_Async =
      _KalmanFilter_GetErrorCovPre_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetGain(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetGain(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetGainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetGain');
  late final _KalmanFilter_GetGain = _KalmanFilter_GetGainPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetGain_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetGain_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetGain_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_GetGain_Async');
  late final _KalmanFilter_GetGain_Async =
      _KalmanFilter_GetGain_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementMatrix(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetMeasurementMatrix(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetMeasurementMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              ffi.Pointer<Mat>)>>('KalmanFilter_GetMeasurementMatrix');
  late final _KalmanFilter_GetMeasurementMatrix =
      _KalmanFilter_GetMeasurementMatrixPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementMatrix_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetMeasurementMatrix_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetMeasurementMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetMeasurementMatrix_Async');
  late final _KalmanFilter_GetMeasurementMatrix_Async =
      _KalmanFilter_GetMeasurementMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementNoiseCov(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetMeasurementNoiseCov(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetMeasurementNoiseCovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              ffi.Pointer<Mat>)>>('KalmanFilter_GetMeasurementNoiseCov');
  late final _KalmanFilter_GetMeasurementNoiseCov =
      _KalmanFilter_GetMeasurementNoiseCovPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementNoiseCov_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetMeasurementNoiseCov_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetMeasurementNoiseCov_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetMeasurementNoiseCov_Async');
  late final _KalmanFilter_GetMeasurementNoiseCov_Async =
      _KalmanFilter_GetMeasurementNoiseCov_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetProcessNoiseCov(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetProcessNoiseCov(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetProcessNoiseCovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              ffi.Pointer<Mat>)>>('KalmanFilter_GetProcessNoiseCov');
  late final _KalmanFilter_GetProcessNoiseCov =
      _KalmanFilter_GetProcessNoiseCovPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetProcessNoiseCov_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetProcessNoiseCov_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetProcessNoiseCov_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetProcessNoiseCov_Async');
  late final _KalmanFilter_GetProcessNoiseCov_Async =
      _KalmanFilter_GetProcessNoiseCov_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetStatePost(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetStatePost(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetStatePostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetStatePost');
  late final _KalmanFilter_GetStatePost =
      _KalmanFilter_GetStatePostPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetStatePost_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetStatePost_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetStatePost_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetStatePost_Async');
  late final _KalmanFilter_GetStatePost_Async =
      _KalmanFilter_GetStatePost_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetStatePre(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetStatePre(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetStatePrePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetStatePre');
  late final _KalmanFilter_GetStatePre =
      _KalmanFilter_GetStatePrePtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetStatePre_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetStatePre_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetStatePre_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetStatePre_Async');
  late final _KalmanFilter_GetStatePre_Async =
      _KalmanFilter_GetStatePre_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp1(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetTemp1(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetTemp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetTemp1');
  late final _KalmanFilter_GetTemp1 = _KalmanFilter_GetTemp1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp1_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetTemp1_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetTemp1_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_GetTemp1_Async');
  late final _KalmanFilter_GetTemp1_Async =
      _KalmanFilter_GetTemp1_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp2(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetTemp2(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetTemp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetTemp2');
  late final _KalmanFilter_GetTemp2 = _KalmanFilter_GetTemp2Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp2_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetTemp2_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetTemp2_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_GetTemp2_Async');
  late final _KalmanFilter_GetTemp2_Async =
      _KalmanFilter_GetTemp2_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp3(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetTemp3(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetTemp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetTemp3');
  late final _KalmanFilter_GetTemp3 = _KalmanFilter_GetTemp3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp3_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetTemp3_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetTemp3_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_GetTemp3_Async');
  late final _KalmanFilter_GetTemp3_Async =
      _KalmanFilter_GetTemp3_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp4(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetTemp4(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetTemp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetTemp4');
  late final _KalmanFilter_GetTemp4 = _KalmanFilter_GetTemp4Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp4_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetTemp4_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetTemp4_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_GetTemp4_Async');
  late final _KalmanFilter_GetTemp4_Async =
      _KalmanFilter_GetTemp4_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp5(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetTemp5(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetTemp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_GetTemp5');
  late final _KalmanFilter_GetTemp5 = _KalmanFilter_GetTemp5Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTemp5_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetTemp5_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetTemp5_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_GetTemp5_Async');
  late final _KalmanFilter_GetTemp5_Async =
      _KalmanFilter_GetTemp5_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTransitionMatrix(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_GetTransitionMatrix(
      self,
      rval,
    );
  }

  late final _KalmanFilter_GetTransitionMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              ffi.Pointer<Mat>)>>('KalmanFilter_GetTransitionMatrix');
  late final _KalmanFilter_GetTransitionMatrix =
      _KalmanFilter_GetTransitionMatrixPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_GetTransitionMatrix_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_GetTransitionMatrix_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_GetTransitionMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter,
              imp1.CvCallback_1)>>('KalmanFilter_GetTransitionMatrix_Async');
  late final _KalmanFilter_GetTransitionMatrix_Async =
      _KalmanFilter_GetTransitionMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_Init(
    KalmanFilter self,
    int dynamParams,
    int measureParams,
  ) {
    return _KalmanFilter_Init(
      self,
      dynamParams,
      measureParams,
    );
  }

  late final _KalmanFilter_InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Int, ffi.Int)>>('KalmanFilter_Init');
  late final _KalmanFilter_Init = _KalmanFilter_InitPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, int, int)>();

  ffi.Pointer<CvStatus> KalmanFilter_InitWithParams(
    KalmanFilter self,
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
  ) {
    return _KalmanFilter_InitWithParams(
      self,
      dynamParams,
      measureParams,
      controlParams,
      type,
    );
  }

  late final _KalmanFilter_InitWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('KalmanFilter_InitWithParams');
  late final _KalmanFilter_InitWithParams =
      _KalmanFilter_InitWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, int, int, int, int)>();

  ffi.Pointer<CvStatus> KalmanFilter_InitWithParams_Async(
    KalmanFilter self,
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_InitWithParams_Async(
      self,
      dynamParams,
      measureParams,
      controlParams,
      type,
      callback,
    );
  }

  late final _KalmanFilter_InitWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              imp1.CvCallback_0)>>('KalmanFilter_InitWithParams_Async');
  late final _KalmanFilter_InitWithParams_Async =
      _KalmanFilter_InitWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, int, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_Init_Async(
    KalmanFilter self,
    int dynamParams,
    int measureParams,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_Init_Async(
      self,
      dynamParams,
      measureParams,
      callback,
    );
  }

  late final _KalmanFilter_Init_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Int, ffi.Int,
              imp1.CvCallback_0)>>('KalmanFilter_Init_Async');
  late final _KalmanFilter_Init_Async = _KalmanFilter_Init_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          KalmanFilter, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_New(
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
    ffi.Pointer<KalmanFilter> rval,
  ) {
    return _KalmanFilter_New(
      dynamParams,
      measureParams,
      controlParams,
      type,
      rval,
    );
  }

  late final _KalmanFilter_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<KalmanFilter>)>>('KalmanFilter_New');
  late final _KalmanFilter_New = _KalmanFilter_NewPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, int, ffi.Pointer<KalmanFilter>)>();

  ffi.Pointer<CvStatus> KalmanFilter_New_Async(
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_New_Async(
      dynamParams,
      measureParams,
      controlParams,
      type,
      callback,
    );
  }

  late final _KalmanFilter_New_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_1)>>('KalmanFilter_New_Async');
  late final _KalmanFilter_New_Async = _KalmanFilter_New_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(int, int, int, int, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_Predict(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_Predict(
      self,
      rval,
    );
  }

  late final _KalmanFilter_PredictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, ffi.Pointer<Mat>)>>('KalmanFilter_Predict');
  late final _KalmanFilter_Predict = _KalmanFilter_PredictPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_PredictWithParams(
    KalmanFilter self,
    Mat control,
    ffi.Pointer<Mat> rval,
  ) {
    return _KalmanFilter_PredictWithParams(
      self,
      control,
      rval,
    );
  }

  late final _KalmanFilter_PredictWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              ffi.Pointer<Mat>)>>('KalmanFilter_PredictWithParams');
  late final _KalmanFilter_PredictWithParams =
      _KalmanFilter_PredictWithParamsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> KalmanFilter_PredictWithParams_Async(
    KalmanFilter self,
    Mat control,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_PredictWithParams_Async(
      self,
      control,
      callback,
    );
  }

  late final _KalmanFilter_PredictWithParams_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_1)>>('KalmanFilter_PredictWithParams_Async');
  late final _KalmanFilter_PredictWithParams_Async =
      _KalmanFilter_PredictWithParams_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_Predict_Async(
    KalmanFilter self,
    imp1.CvCallback_1 callback,
  ) {
    return _KalmanFilter_Predict_Async(
      self,
      callback,
    );
  }

  late final _KalmanFilter_Predict_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, imp1.CvCallback_1)>>('KalmanFilter_Predict_Async');
  late final _KalmanFilter_Predict_Async =
      _KalmanFilter_Predict_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetControlMatrix(
    KalmanFilter self,
    Mat controlMatrix,
  ) {
    return _KalmanFilter_SetControlMatrix(
      self,
      controlMatrix,
    );
  }

  late final _KalmanFilter_SetControlMatrixPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetControlMatrix');
  late final _KalmanFilter_SetControlMatrix = _KalmanFilter_SetControlMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetControlMatrix_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetControlMatrix_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetControlMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetControlMatrix_Async');
  late final _KalmanFilter_SetControlMatrix_Async =
      _KalmanFilter_SetControlMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPost(
    KalmanFilter self,
    Mat errorCovPost,
  ) {
    return _KalmanFilter_SetErrorCovPost(
      self,
      errorCovPost,
    );
  }

  late final _KalmanFilter_SetErrorCovPostPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetErrorCovPost');
  late final _KalmanFilter_SetErrorCovPost = _KalmanFilter_SetErrorCovPostPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPost_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetErrorCovPost_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetErrorCovPost_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetErrorCovPost_Async');
  late final _KalmanFilter_SetErrorCovPost_Async =
      _KalmanFilter_SetErrorCovPost_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPre(
    KalmanFilter self,
    Mat errorCovPre,
  ) {
    return _KalmanFilter_SetErrorCovPre(
      self,
      errorCovPre,
    );
  }

  late final _KalmanFilter_SetErrorCovPrePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetErrorCovPre');
  late final _KalmanFilter_SetErrorCovPre = _KalmanFilter_SetErrorCovPrePtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPre_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetErrorCovPre_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetErrorCovPre_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetErrorCovPre_Async');
  late final _KalmanFilter_SetErrorCovPre_Async =
      _KalmanFilter_SetErrorCovPre_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetGain(
    KalmanFilter self,
    Mat gain,
  ) {
    return _KalmanFilter_SetGain(
      self,
      gain,
    );
  }

  late final _KalmanFilter_SetGainPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetGain');
  late final _KalmanFilter_SetGain = _KalmanFilter_SetGainPtr.asFunction<
      ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetGain_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetGain_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetGain_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetGain_Async');
  late final _KalmanFilter_SetGain_Async =
      _KalmanFilter_SetGain_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementMatrix(
    KalmanFilter self,
    Mat measurementMatrix,
  ) {
    return _KalmanFilter_SetMeasurementMatrix(
      self,
      measurementMatrix,
    );
  }

  late final _KalmanFilter_SetMeasurementMatrixPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetMeasurementMatrix');
  late final _KalmanFilter_SetMeasurementMatrix =
      _KalmanFilter_SetMeasurementMatrixPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementMatrix_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetMeasurementMatrix_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetMeasurementMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetMeasurementMatrix_Async');
  late final _KalmanFilter_SetMeasurementMatrix_Async =
      _KalmanFilter_SetMeasurementMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementNoiseCov(
    KalmanFilter self,
    Mat measurementNoiseCov,
  ) {
    return _KalmanFilter_SetMeasurementNoiseCov(
      self,
      measurementNoiseCov,
    );
  }

  late final _KalmanFilter_SetMeasurementNoiseCovPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetMeasurementNoiseCov');
  late final _KalmanFilter_SetMeasurementNoiseCov =
      _KalmanFilter_SetMeasurementNoiseCovPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementNoiseCov_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetMeasurementNoiseCov_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetMeasurementNoiseCov_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetMeasurementNoiseCov_Async');
  late final _KalmanFilter_SetMeasurementNoiseCov_Async =
      _KalmanFilter_SetMeasurementNoiseCov_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetProcessNoiseCov(
    KalmanFilter self,
    Mat processNoiseCov,
  ) {
    return _KalmanFilter_SetProcessNoiseCov(
      self,
      processNoiseCov,
    );
  }

  late final _KalmanFilter_SetProcessNoiseCovPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetProcessNoiseCov');
  late final _KalmanFilter_SetProcessNoiseCov =
      _KalmanFilter_SetProcessNoiseCovPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetProcessNoiseCov_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetProcessNoiseCov_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetProcessNoiseCov_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetProcessNoiseCov_Async');
  late final _KalmanFilter_SetProcessNoiseCov_Async =
      _KalmanFilter_SetProcessNoiseCov_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetStatePost(
    KalmanFilter self,
    Mat statePost,
  ) {
    return _KalmanFilter_SetStatePost(
      self,
      statePost,
    );
  }

  late final _KalmanFilter_SetStatePostPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetStatePost');
  late final _KalmanFilter_SetStatePost = _KalmanFilter_SetStatePostPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetStatePost_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetStatePost_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetStatePost_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetStatePost_Async');
  late final _KalmanFilter_SetStatePost_Async =
      _KalmanFilter_SetStatePost_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetStatePre(
    KalmanFilter self,
    Mat statePre,
  ) {
    return _KalmanFilter_SetStatePre(
      self,
      statePre,
    );
  }

  late final _KalmanFilter_SetStatePrePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetStatePre');
  late final _KalmanFilter_SetStatePre = _KalmanFilter_SetStatePrePtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetStatePre_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetStatePre_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetStatePre_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetStatePre_Async');
  late final _KalmanFilter_SetStatePre_Async =
      _KalmanFilter_SetStatePre_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetTransitionMatrix(
    KalmanFilter self,
    Mat transitionMatrix,
  ) {
    return _KalmanFilter_SetTransitionMatrix(
      self,
      transitionMatrix,
    );
  }

  late final _KalmanFilter_SetTransitionMatrixPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
      'KalmanFilter_SetTransitionMatrix');
  late final _KalmanFilter_SetTransitionMatrix =
      _KalmanFilter_SetTransitionMatrixPtr.asFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> KalmanFilter_SetTransitionMatrix_Async(
    KalmanFilter self,
    Mat value,
    imp1.CvCallback_0 callback,
  ) {
    return _KalmanFilter_SetTransitionMatrix_Async(
      self,
      value,
      callback,
    );
  }

  late final _KalmanFilter_SetTransitionMatrix_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, Mat,
              imp1.CvCallback_0)>>('KalmanFilter_SetTransitionMatrix_Async');
  late final _KalmanFilter_SetTransitionMatrix_Async =
      _KalmanFilter_SetTransitionMatrix_AsyncPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, imp1.CvCallback_0)>();

  void TrackerMIL_Close(
    TrackerMILPtr self,
  ) {
    return _TrackerMIL_Close(
      self,
    );
  }

  late final _TrackerMIL_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TrackerMILPtr)>>(
          'TrackerMIL_Close');
  late final _TrackerMIL_Close =
      _TrackerMIL_ClosePtr.asFunction<void Function(TrackerMILPtr)>();

  ffi.Pointer<CvStatus> TrackerMIL_Create(
    ffi.Pointer<TrackerMIL> rval,
  ) {
    return _TrackerMIL_Create(
      rval,
    );
  }

  late final _TrackerMIL_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<TrackerMIL>)>>('TrackerMIL_Create');
  late final _TrackerMIL_Create = _TrackerMIL_CreatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<TrackerMIL>)>();

  ffi.Pointer<CvStatus> TrackerMIL_Create_Async(
    imp1.CvCallback_1 callback,
  ) {
    return _TrackerMIL_Create_Async(
      callback,
    );
  }

  late final _TrackerMIL_Create_AsyncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>>(
      'TrackerMIL_Create_Async');
  late final _TrackerMIL_Create_Async = _TrackerMIL_Create_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> TrackerMIL_Init(
    TrackerMIL self,
    Mat image,
    CvRect bbox,
  ) {
    return _TrackerMIL_Init(
      self,
      image,
      bbox,
    );
  }

  late final _TrackerMIL_InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              TrackerMIL, Mat, CvRect)>>('TrackerMIL_Init');
  late final _TrackerMIL_Init = _TrackerMIL_InitPtr.asFunction<
      ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, CvRect)>();

  ffi.Pointer<CvStatus> TrackerMIL_Init_Async(
    TrackerMIL self,
    Mat image,
    CvRect bbox,
    imp1.CvCallback_0 callback,
  ) {
    return _TrackerMIL_Init_Async(
      self,
      image,
      bbox,
      callback,
    );
  }

  late final _TrackerMIL_Init_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, CvRect,
              imp1.CvCallback_0)>>('TrackerMIL_Init_Async');
  late final _TrackerMIL_Init_Async = _TrackerMIL_Init_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          TrackerMIL, Mat, CvRect, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> TrackerMIL_Update(
    TrackerMIL self,
    Mat image,
    ffi.Pointer<CvRect> boundingBox,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _TrackerMIL_Update(
      self,
      image,
      boundingBox,
      rval,
    );
  }

  late final _TrackerMIL_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, ffi.Pointer<CvRect>,
              ffi.Pointer<ffi.Bool>)>>('TrackerMIL_Update');
  late final _TrackerMIL_Update = _TrackerMIL_UpdatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          TrackerMIL, Mat, ffi.Pointer<CvRect>, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> TrackerMIL_Update_Async(
    TrackerMIL self,
    Mat image,
    imp1.CvCallback_2 callback,
  ) {
    return _TrackerMIL_Update_Async(
      self,
      image,
      callback,
    );
  }

  late final _TrackerMIL_Update_AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              TrackerMIL, Mat, imp1.CvCallback_2)>>('TrackerMIL_Update_Async');
  late final _TrackerMIL_Update_Async = _TrackerMIL_Update_AsyncPtr.asFunction<
      ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, imp1.CvCallback_2)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeVideo _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNNPtr)>>
      get BackgroundSubtractorKNN_Close =>
          _library._BackgroundSubtractorKNN_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>>
      get BackgroundSubtractorMOG2_Close =>
          _library._BackgroundSubtractorMOG2_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilterPtr)>>
      get KalmanFilter_Close => _library._KalmanFilter_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(TrackerMILPtr)>>
      get TrackerMIL_Close => _library._TrackerMIL_ClosePtr;
}

final class BackgroundSubtractorKNN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorKNNPtr = ffi.Pointer<BackgroundSubtractorKNN>;

final class BackgroundSubtractorMOG2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorMOG2Ptr = ffi.Pointer<BackgroundSubtractorMOG2>;
typedef CvRect = imp1.CvRect;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class KalmanFilter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KalmanFilterPtr = ffi.Pointer<KalmanFilter>;
typedef Mat = imp1.Mat;
typedef TermCriteria = imp1.TermCriteria;

final class Tracker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerGOTURN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerGOTURNPtr = ffi.Pointer<TrackerGOTURN>;

final class TrackerMIL extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerMILPtr = ffi.Pointer<TrackerMIL>;
typedef TrackerPtr = ffi.Pointer<Tracker>;
typedef VecF32 = imp1.VecF32;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecUChar = imp1.VecUChar;
