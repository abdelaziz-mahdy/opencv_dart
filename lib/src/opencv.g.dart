// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/04/15

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function(ffi.Pointer<AKAZE>)>(
    symbol: 'AKAZE_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void AKAZE_Close(
  ffi.Pointer<AKAZE> a,
);

@ffi.Native<CvStatus Function(ffi.Pointer<AKAZE>)>(
    symbol: 'AKAZE_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AKAZE_Create(
  ffi.Pointer<AKAZE> rval,
);

@ffi.Native<CvStatus Function(AKAZE, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'AKAZE_Detect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AKAZE_Detect(
  AKAZE a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'AKAZE_DetectAndCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AKAZE_DetectAndCompute(
  AKAZE a,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>(
    symbol: 'AdaptiveThreshold',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AdaptiveThreshold(
  Mat src,
  Mat dst,
  double maxValue,
  int adaptiveTyp,
  int typ,
  int blockSize,
  double c,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<AgastFeatureDetector>)>(
    symbol: 'AgastFeatureDetector_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void AgastFeatureDetector_Close(
  ffi.Pointer<AgastFeatureDetector> a,
);

@ffi.Native<CvStatus Function(ffi.Pointer<AgastFeatureDetector>)>(
    symbol: 'AgastFeatureDetector_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AgastFeatureDetector_Create(
  ffi.Pointer<AgastFeatureDetector> rval,
);

@ffi.Native<
        CvStatus Function(AgastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'AgastFeatureDetector_Detect',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AgastFeatureDetector_Detect(
  AgastFeatureDetector a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<AlignMTB>)>(
    symbol: 'AlignMTB_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void AlignMTB_Close(
  ffi.Pointer<AlignMTB> b,
);

@ffi.Native<CvStatus Function(ffi.Pointer<AlignMTB>)>(
    symbol: 'AlignMTB_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AlignMTB_Create(
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Int, ffi.Int, ffi.Bool, ffi.Pointer<AlignMTB>)>(
    symbol: 'AlignMTB_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AlignMTB_CreateWithParams(
  int max_bits,
  int exclude_range,
  bool cut,
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<CvStatus Function(AlignMTB, VecMat, ffi.Pointer<VecMat>)>(
    symbol: 'AlignMTB_Process', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AlignMTB_Process(
  AlignMTB b,
  VecMat src,
  ffi.Pointer<VecMat> dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'ApplyColorMap', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ApplyColorMap(
  Mat src,
  Mat dst,
  int colormap,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'ApplyCustomColorMap',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ApplyCustomColorMap(
  Mat src,
  Mat dst,
  Mat colormap,
);

@ffi.Native<
        CvStatus Function(
            VecPoint, ffi.Double, ffi.Bool, ffi.Pointer<VecPoint>)>(
    symbol: 'ApproxPolyDP', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ApproxPolyDP(
  VecPoint curve,
  double epsilon,
  bool closed,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Bool, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArcLength', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArcLength(
  VecPoint curve,
  bool is_closed,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Point, Point, Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>(
    symbol: 'ArrowedLine', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArrowedLine(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int line_type,
  int shift,
  double tipLength,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ArucoDetectorParameters>)>(
    symbol: 'ArucoDetectorParameters_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void ArucoDetectorParameters_Close(
  ffi.Pointer<ArucoDetectorParameters> ap,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ArucoDetectorParameters>)>(
    symbol: 'ArucoDetectorParameters_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_Create(
  ffi.Pointer<ArucoDetectorParameters> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetAdaptiveThreshConstant',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAdaptiveThreshConstant(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagCriticalRad',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagCriticalRad(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagDeglitch',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagDeglitch(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagMaxLineFitMse',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagMaxLineFitMse(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagMaxNmaxima',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagMaxNmaxima(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagMinClusterPixels',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagMinClusterPixels(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagQuadDecimate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagQuadDecimate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>(
    symbol: 'ArucoDetectorParameters_GetAprilTagQuadSigma',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetAprilTagQuadSigma(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetCornerRefinementMaxIterations',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetCornerRefinementMaxIterations(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetCornerRefinementMethod',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetCornerRefinementMethod(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetCornerRefinementMinAccuracy',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetCornerRefinementMinAccuracy(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetCornerRefinementWinSize',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetCornerRefinementWinSize(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Bool>)>(
    symbol: 'ArucoDetectorParameters_GetDetectInvertedMarker',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetDetectInvertedMarker(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetErrorCorrectionRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetErrorCorrectionRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetMarkerBorderBits',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMarkerBorderBits(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetMaxMarkerPerimeterRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMaxMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetMinCornerDistanceRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMinCornerDistanceRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetMinDistanceToBorder',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMinDistanceToBorder(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetMinMarkerDistanceRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMinMarkerDistanceRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetMinMarkerPerimeterRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMinMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetMinOtsuStdDev',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetMinOtsuStdDev(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus
    ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>(
    symbol: 'ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>(
    symbol: 'ArucoDetectorParameters_GetPolygonalApproxAccuracyRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_GetPolygonalApproxAccuracyRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetAdaptiveThreshConstant',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAdaptiveThreshConstant(
  ArucoDetectorParameters ap,
  double adaptiveThreshConstant,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax(
  ArucoDetectorParameters ap,
  int adaptiveThreshWinSizeMax,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin(
  ArucoDetectorParameters ap,
  int adaptiveThreshWinSizeMin,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep(
  ArucoDetectorParameters ap,
  int adaptiveThreshWinSizeStep,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Float)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagCriticalRad',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagCriticalRad(
  ArucoDetectorParameters ap,
  double aprilTagCriticalRad,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagDeglitch',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagDeglitch(
  ArucoDetectorParameters ap,
  int aprilTagDeglitch,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Float)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagMaxLineFitMse',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagMaxLineFitMse(
  ArucoDetectorParameters ap,
  double aprilTagMaxLineFitMse,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagMaxNmaxima',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagMaxNmaxima(
  ArucoDetectorParameters ap,
  int aprilTagMaxNmaxima,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagMinClusterPixels',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagMinClusterPixels(
  ArucoDetectorParameters ap,
  int aprilTagMinClusterPixels,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff(
  ArucoDetectorParameters ap,
  int aprilTagMinWhiteBlackDiff,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Float)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagQuadDecimate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagQuadDecimate(
  ArucoDetectorParameters ap,
  double aprilTagQuadDecimate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Float)>(
    symbol: 'ArucoDetectorParameters_SetAprilTagQuadSigma',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetAprilTagQuadSigma(
  ArucoDetectorParameters ap,
  double aprilTagQuadSigma,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetCornerRefinementMaxIterations',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetCornerRefinementMaxIterations(
  ArucoDetectorParameters ap,
  int cornerRefinementMaxIterations,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetCornerRefinementMethod',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetCornerRefinementMethod(
  ArucoDetectorParameters ap,
  int cornerRefinementMethod,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetCornerRefinementMinAccuracy',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetCornerRefinementMinAccuracy(
  ArucoDetectorParameters ap,
  double cornerRefinementMinAccuracy,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetCornerRefinementWinSize',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetCornerRefinementWinSize(
  ArucoDetectorParameters ap,
  int cornerRefinementWinSize,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Bool)>(
    symbol: 'ArucoDetectorParameters_SetDetectInvertedMarker',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetDetectInvertedMarker(
  ArucoDetectorParameters ap,
  bool detectInvertedMarker,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetErrorCorrectionRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetErrorCorrectionRate(
  ArucoDetectorParameters ap,
  double errorCorrectionRate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetMarkerBorderBits',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMarkerBorderBits(
  ArucoDetectorParameters ap,
  int markerBorderBits,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate(
  ArucoDetectorParameters ap,
  double maxErroneousBitsInBorderRate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetMaxMarkerPerimeterRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMaxMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  double maxMarkerPerimeterRate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetMinCornerDistanceRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMinCornerDistanceRate(
  ArucoDetectorParameters ap,
  double minCornerDistanceRate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetMinDistanceToBorder',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMinDistanceToBorder(
  ArucoDetectorParameters ap,
  int minDistanceToBorder,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetMinMarkerDistanceRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMinMarkerDistanceRate(
  ArucoDetectorParameters ap,
  double minMarkerDistanceRate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetMinMarkerPerimeterRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMinMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  double minMarkerPerimeterRate,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetMinOtsuStdDev',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetMinOtsuStdDev(
  ArucoDetectorParameters ap,
  double minOtsuStdDev,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus
    ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell(
  ArucoDetectorParameters ap,
  double perspectiveRemoveIgnoredMarginPerCell,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Int)>(
    symbol: 'ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell(
  ArucoDetectorParameters ap,
  int perspectiveRemovePixelPerCell,
);

@ffi.Native<CvStatus Function(ArucoDetectorParameters, ffi.Double)>(
    symbol: 'ArucoDetectorParameters_SetPolygonalApproxAccuracyRate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetectorParameters_SetPolygonalApproxAccuracyRate(
  ArucoDetectorParameters ap,
  double polygonalApproxAccuracyRate,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ArucoDetector>)>(
    symbol: 'ArucoDetector_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void ArucoDetector_Close(
  ffi.Pointer<ArucoDetector> ad,
);

@ffi.Native<
        CvStatus Function(ArucoDetector, Mat, ffi.Pointer<VecVecPoint2f>,
            ffi.Pointer<VecInt>, ffi.Pointer<VecVecPoint2f>)>(
    symbol: 'ArucoDetector_DetectMarkers',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetector_DetectMarkers(
  ArucoDetector ad,
  Mat inputArr,
  ffi.Pointer<VecVecPoint2f> markerCorners,
  ffi.Pointer<VecInt> markerIds,
  ffi.Pointer<VecVecPoint2f> rejectedCandidates,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ArucoDetector>)>(
    symbol: 'ArucoDetector_New',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetector_New(
  ffi.Pointer<ArucoDetector> rval,
);

@ffi.Native<
        CvStatus Function(ArucoDictionary, ArucoDetectorParameters,
            ffi.Pointer<ArucoDetector>)>(
    symbol: 'ArucoDetector_NewWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDetector_NewWithParams(
  ArucoDictionary dictionary,
  ArucoDetectorParameters params,
  ffi.Pointer<ArucoDetector> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ArucoDictionary>)>(
    symbol: 'ArucoDictionary_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void ArucoDictionary_Close(
  ffi.Pointer<ArucoDictionary> self,
);

@ffi.Native<CvStatus Function(Mat, VecVecPoint2f, VecInt, Scalar)>(
    symbol: 'ArucoDrawDetectedMarkers',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoDrawDetectedMarkers(
  Mat image,
  VecVecPoint2f markerCorners,
  VecInt markerIds,
  Scalar borderColor,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Int, Mat, ffi.Int)>(
    symbol: 'ArucoGenerateImageMarker',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ArucoGenerateImageMarker(
  int dictionaryId,
  int id,
  int sidePixels,
  Mat img,
  int borderBits,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<AsyncArray>)>(
    symbol: 'AsyncArray_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void AsyncArray_Close(
  ffi.Pointer<AsyncArray> a,
);

@ffi.Native<CvStatus Function(AsyncArray, Mat)>(
    symbol: 'AsyncArray_Get', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AsyncArray_Get(
  AsyncArray async_out,
  Mat out,
);

@ffi.Native<CvStatus Function(ffi.Pointer<AsyncArray>)>(
    symbol: 'AsyncArray_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus AsyncArray_New(
  ffi.Pointer<AsyncArray> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<BFMatcher>)>(
    symbol: 'BFMatcher_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void BFMatcher_Close(
  ffi.Pointer<BFMatcher> b,
);

@ffi.Native<CvStatus Function(ffi.Pointer<BFMatcher>)>(
    symbol: 'BFMatcher_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BFMatcher_Create(
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Bool, ffi.Pointer<BFMatcher>)>(
    symbol: 'BFMatcher_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BFMatcher_CreateWithParams(
  int normType,
  bool crossCheck,
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
        CvStatus Function(
            BFMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>)>(
    symbol: 'BFMatcher_KnnMatch',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BFMatcher_KnnMatch(
  BFMatcher b,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<CvStatus Function(BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>)>(
    symbol: 'BFMatcher_Match', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BFMatcher_Match(
  BFMatcher b,
  Mat query,
  Mat train,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<BRISK>)>(
    symbol: 'BRISK_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void BRISK_Close(
  ffi.Pointer<BRISK> b,
);

@ffi.Native<CvStatus Function(ffi.Pointer<BRISK>)>(
    symbol: 'BRISK_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BRISK_Create(
  ffi.Pointer<BRISK> rval,
);

@ffi.Native<CvStatus Function(BRISK, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'BRISK_Detect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BRISK_Detect(
  BRISK b,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'BRISK_DetectAndCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BRISK_DetectAndCompute(
  BRISK b,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(BackgroundSubtractorKNN, Mat, Mat)>(
    symbol: 'BackgroundSubtractorKNN_Apply',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BackgroundSubtractorKNN_Apply(
  BackgroundSubtractorKNN self,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<BackgroundSubtractorKNN>)>(
    symbol: 'BackgroundSubtractorKNN_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void BackgroundSubtractorKNN_Close(
  ffi.Pointer<BackgroundSubtractorKNN> self,
);

@ffi.Native<CvStatus Function(ffi.Pointer<BackgroundSubtractorKNN>)>(
    symbol: 'BackgroundSubtractorKNN_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BackgroundSubtractorKNN_Create(
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Int, ffi.Double, ffi.Bool,
            ffi.Pointer<BackgroundSubtractorKNN>)>(
    symbol: 'BackgroundSubtractorKNN_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BackgroundSubtractorKNN_CreateWithParams(
  int history,
  double dist2Threshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<CvStatus Function(BackgroundSubtractorMOG2, Mat, Mat)>(
    symbol: 'BackgroundSubtractorMOG2_Apply',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BackgroundSubtractorMOG2_Apply(
  BackgroundSubtractorMOG2 self,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<BackgroundSubtractorMOG2>)>(
    symbol: 'BackgroundSubtractorMOG2_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void BackgroundSubtractorMOG2_Close(
  ffi.Pointer<BackgroundSubtractorMOG2> self,
);

@ffi.Native<CvStatus Function(ffi.Pointer<BackgroundSubtractorMOG2>)>(
    symbol: 'BackgroundSubtractorMOG2_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BackgroundSubtractorMOG2_Create(
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Int, ffi.Double, ffi.Bool,
            ffi.Pointer<BackgroundSubtractorMOG2>)>(
    symbol: 'BackgroundSubtractorMOG2_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BackgroundSubtractorMOG2_CreateWithParams(
  int history,
  double varThreshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>(
    symbol: 'BilateralFilter', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BilateralFilter(
  Mat src,
  Mat dst,
  int d,
  double sc,
  double ss,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<BlockMeanHash>)>(
    symbol: 'BlockMeanHash_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void BlockMeanHash_Close(
  ffi.Pointer<BlockMeanHash> self,
);

@ffi.Native<
        CvStatus Function(BlockMeanHash, Mat, Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'BlockMeanHash_Compare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BlockMeanHash_Compare(
  BlockMeanHash self,
  Mat hashOne,
  Mat hashTwo,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(BlockMeanHash, Mat, Mat)>(
    symbol: 'BlockMeanHash_Compute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BlockMeanHash_Compute(
  BlockMeanHash self,
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Pointer<BlockMeanHash>)>(
    symbol: 'BlockMeanHash_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BlockMeanHash_Create(
  int mode,
  ffi.Pointer<BlockMeanHash> rval,
);

@ffi.Native<
        CvStatus Function(BlockMeanHash, ffi.Pointer<ffi.Pointer<ffi.Double>>,
            ffi.Pointer<ffi.Int>)>(
    symbol: 'BlockMeanHash_GetMean',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BlockMeanHash_GetMean(
  BlockMeanHash self,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<CvStatus Function(BlockMeanHash, ffi.Int)>(
    symbol: 'BlockMeanHash_SetMode',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BlockMeanHash_SetMode(
  BlockMeanHash self,
  int mode,
);

@ffi.Native<CvStatus Function(Mat, Mat, Size)>(
    symbol: 'Blur', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Blur(
  Mat src,
  Mat dst,
  Size ps,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<Rect>)>(
    symbol: 'BoundingRect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BoundingRect(
  VecPoint pts,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, Size)>(
    symbol: 'BoxFilter', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  Size ps,
);

@ffi.Native<CvStatus Function(RotatedRect, ffi.Pointer<VecPoint2f>)>(
    symbol: 'BoxPoints', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus BoxPoints(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> boxPts,
);

@ffi.Native<CvStatus Function(CLAHE, Mat, Mat)>(
    symbol: 'CLAHE_Apply', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_Apply(
  CLAHE c,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CLAHE>)>(
    symbol: 'CLAHE_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void CLAHE_Close(
  ffi.Pointer<CLAHE> c,
);

@ffi.Native<CvStatus Function(CLAHE)>(
    symbol: 'CLAHE_CollectGarbage',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_CollectGarbage(
  CLAHE c,
);

@ffi.Native<CvStatus Function(ffi.Pointer<CLAHE>)>(
    symbol: 'CLAHE_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_Create(
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<CvStatus Function(ffi.Double, Size, ffi.Pointer<CLAHE>)>(
    symbol: 'CLAHE_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_CreateWithParams(
  double clipLimit,
  Size tileGridSize,
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<CvStatus Function(CLAHE, ffi.Pointer<ffi.Double>)>(
    symbol: 'CLAHE_GetClipLimit',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_GetClipLimit(
  CLAHE c,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(CLAHE, ffi.Pointer<Size>)>(
    symbol: 'CLAHE_GetTilesGridSize',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_GetTilesGridSize(
  CLAHE c,
  ffi.Pointer<Size> rval,
);

@ffi.Native<CvStatus Function(CLAHE, ffi.Double)>(
    symbol: 'CLAHE_SetClipLimit',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_SetClipLimit(
  CLAHE c,
  double clipLimit,
);

@ffi.Native<CvStatus Function(CLAHE, Size)>(
    symbol: 'CLAHE_SetTilesGridSize',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CLAHE_SetTilesGridSize(
  CLAHE c,
  Size size,
);

@ffi.Native<CvStatus Function(VecMat, VecInt, Mat, Mat, VecFloat, ffi.Bool)>(
    symbol: 'CalcBackProject', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CalcBackProject(
  VecMat mats,
  VecInt chans,
  Mat hist,
  Mat backProject,
  VecFloat rng,
  bool uniform,
);

@ffi.Native<
        CvStatus Function(
            VecMat, VecInt, Mat, Mat, VecInt, VecFloat, ffi.Bool)>(
    symbol: 'CalcHist', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CalcHist(
  VecMat mats,
  VecInt chans,
  Mat mask,
  Mat hist,
  VecInt sz,
  VecFloat rng,
  bool acc,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int,
            ffi.Int, ffi.Double, ffi.Int)>(
    symbol: 'CalcOpticalFlowFarneback',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CalcOpticalFlowFarneback(
  Mat prevImg,
  Mat nextImg,
  Mat flow,
  double pyrScale,
  int levels,
  int winsize,
  int iterations,
  int polyN,
  double polySigma,
  int flags,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, VecPoint2f, VecPoint2f, VecUChar, VecFloat)>(
    symbol: 'CalcOpticalFlowPyrLK',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CalcOpticalFlowPyrLK(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  VecPoint2f nextPts,
  VecUChar status,
  VecFloat err,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, VecPoint2f, VecPoint2f, VecUChar, VecFloat,
            Size, ffi.Int, TermCriteria, ffi.Int, ffi.Double)>(
    symbol: 'CalcOpticalFlowPyrLKWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CalcOpticalFlowPyrLKWithParams(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  VecPoint2f nextPts,
  VecUChar status,
  VecFloat err,
  Size winSize,
  int maxLevel,
  TermCriteria criteria,
  int flags,
  double minEigThreshold,
);

@ffi.Native<
        CvStatus Function(VecVecPoint3f, VecVecPoint2f, Size, Mat, Mat, Mat,
            Mat, ffi.Int, TermCriteria, ffi.Pointer<ffi.Double>)>(
    symbol: 'CalibrateCamera', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CalibrateCamera(
  VecVecPoint3f objectPoints,
  VecVecPoint2f imagePoints,
  Size imageSize,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvecs,
  Mat tvecs,
  int flag,
  TermCriteria criteria,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool)>(
    symbol: 'Canny', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Canny(
  Mat src,
  Mat edges,
  double t1,
  double t2,
  int apertureSize,
  bool l2gradient,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CascadeClassifier>)>(
    symbol: 'CascadeClassifier_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void CascadeClassifier_Close(
  ffi.Pointer<CascadeClassifier> cs,
);

@ffi.Native<CvStatus Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>)>(
    symbol: 'CascadeClassifier_DetectMultiScale',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CascadeClassifier_DetectMultiScale(
  CascadeClassifier cs,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
        CvStatus Function(CascadeClassifier, Mat, ffi.Double, ffi.Int, ffi.Int,
            Size, Size, ffi.Pointer<VecRect>)>(
    symbol: 'CascadeClassifier_DetectMultiScaleWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CascadeClassifier_DetectMultiScaleWithParams(
  CascadeClassifier cs,
  Mat img,
  double scale,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
        CvStatus Function(
            CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>(
    symbol: 'CascadeClassifier_Load',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CascadeClassifier_Load(
  CascadeClassifier cs,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<CascadeClassifier>)>(
    symbol: 'CascadeClassifier_New',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CascadeClassifier_New(
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<CvStatus Function(Mat, Point, ffi.Int, Scalar, ffi.Int)>(
    symbol: 'Circle', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Circle(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
);

@ffi.Native<
        CvStatus Function(
            Mat, Point, ffi.Int, Scalar, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'CircleWithParams', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CircleWithParams(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<CvStatus Function(Rect, Point, Point, ffi.Pointer<ffi.Bool>)>(
    symbol: 'ClipLine', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ClipLine(
  Rect imgRect,
  Point pt1,
  Point pt2,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'ColorChange', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ColorChange(
  Mat src,
  Mat mask,
  Mat dst,
  double red_mul,
  double green_mul,
  double blue_mul,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'CompareHist', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CompareHist(
  Mat hist1,
  Mat hist2,
  int method,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'ConnectedComponents',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ConnectedComponents(
  Mat src,
  Mat dst,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
            ffi.Pointer<ffi.Int>)>(
    symbol: 'ConnectedComponentsWithStats',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ConnectedComponentsWithStats(
  Mat src,
  Mat labels,
  Mat stats,
  Mat centroids,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<ffi.Double>)>(
    symbol: 'ContourArea', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ContourArea(
  VecPoint pts,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(VecPoint, Mat, ffi.Bool, ffi.Bool)>(
    symbol: 'ConvexHull', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ConvexHull(
  VecPoint points,
  Mat hull,
  bool clockwise,
  bool returnPoints,
);

@ffi.Native<CvStatus Function(VecPoint, Mat, Mat)>(
    symbol: 'ConvexityDefects', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ConvexityDefects(
  VecPoint points,
  Mat hull,
  Mat result,
);

@ffi.Native<CvStatus Function(Mat, VecPoint2f, Size, Size, TermCriteria)>(
    symbol: 'CornerSubPix', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CornerSubPix(
  Mat img,
  VecPoint2f corners,
  Size winSize,
  Size zeroZone,
  TermCriteria criteria,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'CvtColor', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus CvtColor(
  Mat src,
  Mat dst,
  int code,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Float, ffi.Float)>(
    symbol: 'DetailEnhance', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DetailEnhance(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Dilate', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Dilate(
  Mat src,
  Mat dst,
  Mat kernel,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'DilateWithParams', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DilateWithParams(
  Mat src,
  Mat dst,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'DistanceTransform',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DistanceTransform(
  Mat src,
  Mat dst,
  Mat labels,
  int distanceType,
  int maskSize,
  int labelType,
);

@ffi.Native<CvStatus Function(Mat, Size, Mat, ffi.Bool)>(
    symbol: 'DrawChessboardCorners',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DrawChessboardCorners(
  Mat image,
  Size patternSize,
  Mat corners,
  bool patternWasFound,
);

@ffi.Native<CvStatus Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int)>(
    symbol: 'DrawContours', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DrawContours(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
);

@ffi.Native<
        CvStatus Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int, ffi.Int,
            Mat, ffi.Int, Point)>(
    symbol: 'DrawContoursWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DrawContoursWithParams(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  int lineType,
  Mat hierarchy,
  int maxLevel,
  Point offset,
);

@ffi.Native<CvStatus Function(Mat, VecKeyPoint, Mat, Scalar, ffi.Int)>(
    symbol: 'DrawKeyPoints', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DrawKeyPoints(
  Mat src,
  VecKeyPoint kp,
  Mat dst,
  Scalar color,
  int flags,
);

@ffi.Native<
        CvStatus Function(Mat, VecKeyPoint, Mat, VecKeyPoint, VecDMatch, Mat,
            Scalar, Scalar, VecChar, ffi.Int)>(
    symbol: 'DrawMatches', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus DrawMatches(
  Mat img1,
  VecKeyPoint kp1,
  Mat img2,
  VecKeyPoint kp2,
  VecDMatch matches1to2,
  Mat outImg,
  Scalar matchesColor,
  Scalar pointColor,
  VecChar matchesMask,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>(
    symbol: 'EdgePreservingFilter',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EdgePreservingFilter(
  Mat src,
  Mat dst,
  int filter,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<
        CvStatus Function(Mat, Point, Point, ffi.Double, ffi.Double, ffi.Double,
            Scalar, ffi.Int)>(
    symbol: 'Ellipse', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Ellipse(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
);

@ffi.Native<
        CvStatus Function(Mat, Point, Point, ffi.Double, ffi.Double, ffi.Double,
            Scalar, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'EllipseWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EllipseWithParams(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'EqualizeHist', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EqualizeHist(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Erode', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Erode(
  Mat src,
  Mat dst,
  Mat kernel,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'ErodeWithParams', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ErodeWithParams(
  Mat src,
  Mat dst,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<CvStatus Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>(
    symbol: 'EstimateAffine2D', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EstimateAffine2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(VecPoint2f, VecPoint2f, Mat, ffi.Int, ffi.Double,
            ffi.Size, ffi.Double, ffi.Size, ffi.Pointer<Mat>)>(
    symbol: 'EstimateAffine2DWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EstimateAffine2DWithParams(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>(
    symbol: 'EstimateAffinePartial2D',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EstimateAffinePartial2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(VecPoint2f, VecPoint2f, Mat, ffi.Int, ffi.Double,
            ffi.Size, ffi.Double, ffi.Size, ffi.Pointer<Mat>)>(
    symbol: 'EstimateAffinePartial2DWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus EstimateAffinePartial2DWithParams(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Eye', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Eye(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FastFeatureDetector>)>(
    symbol: 'FastFeatureDetector_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void FastFeatureDetector_Close(
  ffi.Pointer<FastFeatureDetector> f,
);

@ffi.Native<CvStatus Function(ffi.Pointer<FastFeatureDetector>)>(
    symbol: 'FastFeatureDetector_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastFeatureDetector_Create(
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Int, ffi.Bool, ffi.Int, ffi.Pointer<FastFeatureDetector>)>(
    symbol: 'FastFeatureDetector_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastFeatureDetector_CreateWithParams(
  int threshold,
  bool nonmaxSuppression,
  int type,
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
        CvStatus Function(FastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'FastFeatureDetector_Detect',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastFeatureDetector_Detect(
  FastFeatureDetector f,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'FastNlMeansDenoising',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastNlMeansDenoising(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'FastNlMeansDenoisingColored',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastNlMeansDenoisingColored(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(VecMat, Mat, ffi.Int, ffi.Int)>(
    symbol: 'FastNlMeansDenoisingColoredMulti',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastNlMeansDenoisingColoredMulti(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
);

@ffi.Native<
        CvStatus Function(VecMat, Mat, ffi.Int, ffi.Int, ffi.Float, ffi.Float,
            ffi.Int, ffi.Int)>(
    symbol: 'FastNlMeansDenoisingColoredMultiWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastNlMeansDenoisingColoredMultiWithParams(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int)>(
    symbol: 'FastNlMeansDenoisingColoredWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastNlMeansDenoisingColoredWithParams(
  Mat src,
  Mat dst,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Float, ffi.Int, ffi.Int)>(
    symbol: 'FastNlMeansDenoisingWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FastNlMeansDenoisingWithParams(
  Mat src,
  Mat dst,
  double h,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<CvStatus Function(Mat, VecVecPoint, Scalar)>(
    symbol: 'FillPoly', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FillPoly(
  Mat img,
  VecVecPoint points,
  Scalar color,
);

@ffi.Native<
        CvStatus Function(Mat, VecVecPoint, Scalar, ffi.Int, ffi.Int, Point)>(
    symbol: 'FillPolyWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FillPolyWithParams(
  Mat img,
  VecVecPoint points,
  Scalar color,
  int lineType,
  int shift,
  Point offset,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Int, Mat, Point, ffi.Double, ffi.Int)>(
    symbol: 'Filter2D', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Filter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernel,
  Point anchor,
  double delta,
  int borderType,
);

@ffi.Native<CvStatus Function(Mat, Size, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>(
    symbol: 'FindChessboardCorners',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FindChessboardCorners(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Size, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>(
    symbol: 'FindChessboardCornersSB',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FindChessboardCornersSB(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Size, Mat, ffi.Int, Mat, ffi.Pointer<ffi.Bool>)>(
    symbol: 'FindChessboardCornersSBWithMeta',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FindChessboardCornersSBWithMeta(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  Mat meta,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Int, ffi.Int, ffi.Pointer<VecVecPoint>)>(
    symbol: 'FindContours', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FindContours(
  Mat src,
  Mat hierarchy,
  int mode,
  int method,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Int, ffi.Double, Mat, ffi.Int,
            ffi.Double, ffi.Pointer<Mat>)>(
    symbol: 'FindHomography', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FindHomography(
  Mat src,
  Mat dst,
  int method,
  double ransacReprojThreshold,
  Mat mask,
  int maxIters,
  double confidence,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat, ffi.Int,
            ffi.Pointer<ffi.Double>)>(
    symbol: 'FindTransformECC', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FindTransformECC(
  Mat templateImage,
  Mat inputImage,
  Mat warpMatrix,
  int motionType,
  TermCriteria criteria,
  Mat inputMask,
  int gaussFiltSize,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, Size, Mat, Mat, ffi.Double, Size, ffi.Double)>(
    symbol: 'Fisheye_EstimateNewCameraMatrixForUndistortRectify',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Fisheye_EstimateNewCameraMatrixForUndistortRectify(
  Mat k,
  Mat d,
  Size imgSize,
  Mat r,
  Mat p,
  double balance,
  Size newSize,
  double fovScale,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat)>(
    symbol: 'Fisheye_UndistortImage',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Fisheye_UndistortImage(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, Mat, Size)>(
    symbol: 'Fisheye_UndistortImageWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Fisheye_UndistortImageWithParams(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat knew,
  Size size,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, Mat, Mat)>(
    symbol: 'Fisheye_UndistortPoints',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Fisheye_UndistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat R,
  Mat P,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<RotatedRect>)>(
    symbol: 'FitEllipse', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FitEllipse(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
);

@ffi.Native<
        CvStatus Function(
            VecPoint, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Double)>(
    symbol: 'FitLine', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FitLine(
  VecPoint pts,
  Mat line,
  int distType,
  double param,
  double reps,
  double aeps,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FlannBasedMatcher>)>(
    symbol: 'FlannBasedMatcher_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void FlannBasedMatcher_Close(
  ffi.Pointer<FlannBasedMatcher> f,
);

@ffi.Native<CvStatus Function(ffi.Pointer<FlannBasedMatcher>)>(
    symbol: 'FlannBasedMatcher_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FlannBasedMatcher_Create(
  ffi.Pointer<FlannBasedMatcher> rval,
);

@ffi.Native<
        CvStatus Function(
            FlannBasedMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>)>(
    symbol: 'FlannBasedMatcher_KnnMatch',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus FlannBasedMatcher_KnnMatch(
  FlannBasedMatcher f,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<GFTTDetector>)>(
    symbol: 'GFTTDetector_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void GFTTDetector_Close(
  ffi.Pointer<GFTTDetector> a,
);

@ffi.Native<CvStatus Function(ffi.Pointer<GFTTDetector>)>(
    symbol: 'GFTTDetector_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GFTTDetector_Create(
  ffi.Pointer<GFTTDetector> rval,
);

@ffi.Native<CvStatus Function(GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'GFTTDetector_Detect',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GFTTDetector_Detect(
  GFTTDetector a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>(
    symbol: 'GaussianBlur', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GaussianBlur(
  Mat src,
  Mat dst,
  Size ps,
  double sX,
  double sY,
  int bt,
);

@ffi.Native<CvStatus Function(VecPoint, VecPoint, ffi.Pointer<Mat>)>(
    symbol: 'GetAffineTransform',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetAffineTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>(
    symbol: 'GetAffineTransform2f',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetAffineTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Int64>)>(
    symbol: 'GetCVTickCount', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetCVTickCount(
  ffi.Pointer<ffi.Int64> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Double, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'GetGaussianKernel',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetGaussianKernel(
  int ksize,
  double sigma,
  int ktype,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Int>)>(
    symbol: 'GetNumThreads', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetNumThreads(
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, Size, ffi.Double, Size, ffi.Pointer<Rect>,
            ffi.Bool, ffi.Pointer<Mat>)>(
    symbol: 'GetOptimalNewCameraMatrixWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetOptimalNewCameraMatrixWithParams(
  Mat cameraMatrix,
  Mat distCoeffs,
  Size size,
  double alpha,
  Size newImgSize,
  ffi.Pointer<Rect> validPixROI,
  bool centerPrincipalPoint,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecPoint, VecPoint, ffi.Pointer<Mat>, ffi.Int)>(
    symbol: 'GetPerspectiveTransform',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetPerspectiveTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
);

@ffi.Native<
        CvStatus Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, ffi.Int)>(
    symbol: 'GetPerspectiveTransform2f',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetPerspectiveTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
);

@ffi.Native<CvStatus Function(Mat, Size, Point2f, Mat)>(
    symbol: 'GetRectSubPix', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetRectSubPix(
  Mat src,
  Size patchSize,
  Point2f center,
  Mat dst,
);

@ffi.Native<
        CvStatus Function(Point2f, ffi.Double, ffi.Double, ffi.Pointer<Mat>)>(
    symbol: 'GetRotationMatrix2D',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetRotationMatrix2D(
  Point2f center,
  double angle,
  double scale,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, Size, ffi.Pointer<Mat>)>(
    symbol: 'GetStructuringElement',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetStructuringElement(
  int shape,
  Size ksize,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double, ffi.Int,
            ffi.Pointer<ffi.Int>, ffi.Pointer<Size>)>(
    symbol: 'GetTextSizeWithBaseline',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetTextSizeWithBaseline(
  ffi.Pointer<ffi.Char> text,
  int fontFace,
  double fontScale,
  int thickness,
  ffi.Pointer<ffi.Int> baseline,
  ffi.Pointer<Size> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Double>)>(
    symbol: 'GetTickFrequency', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GetTickFrequency(
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(Mat, VecPoint2f, ffi.Int, ffi.Double, ffi.Double, Mat,
            ffi.Int, ffi.Bool, ffi.Double)>(
    symbol: 'GoodFeaturesToTrack',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GoodFeaturesToTrack(
  Mat img,
  VecPoint2f corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  bool useHarrisDetector,
  double k,
);

@ffi.Native<
        CvStatus Function(Mat, VecPoint2f, ffi.Int, ffi.Double, ffi.Double, Mat,
            ffi.Int, ffi.Int, ffi.Bool, ffi.Double)>(
    symbol: 'GoodFeaturesToTrackWithGradient',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GoodFeaturesToTrackWithGradient(
  Mat img,
  VecPoint2f corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  int gradientSize,
  bool useHarrisDetector,
  double k,
);

@ffi.Native<CvStatus Function(Mat, Mat, Rect, Mat, Mat, ffi.Int, ffi.Int)>(
    symbol: 'GrabCut', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GrabCut(
  Mat img,
  Mat mask,
  Rect rect,
  Mat bgdModel,
  Mat fgdModel,
  int iterCount,
  int mode,
);

@ffi.Native<CvStatus Function(VecRect, ffi.Int, ffi.Double)>(
    symbol: 'GroupRectangles', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus GroupRectangles(
  VecRect rects,
  int groupThreshold,
  double eps,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<HOGDescriptor>)>(
    symbol: 'HOGDescriptor_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void HOGDescriptor_Close(
  ffi.Pointer<HOGDescriptor> hog,
);

@ffi.Native<CvStatus Function(HOGDescriptor, Mat, ffi.Pointer<VecRect>)>(
    symbol: 'HOGDescriptor_DetectMultiScale',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HOGDescriptor_DetectMultiScale(
  HOGDescriptor hog,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
        CvStatus Function(HOGDescriptor, Mat, ffi.Double, Size, Size,
            ffi.Double, ffi.Double, ffi.Bool, ffi.Pointer<VecRect>)>(
    symbol: 'HOGDescriptor_DetectMultiScaleWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HOGDescriptor_DetectMultiScaleWithParams(
  HOGDescriptor hog,
  Mat img,
  double hitThresh,
  Size winStride,
  Size padding,
  double scale,
  double finalThreshold,
  bool useMeanshiftGrouping,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
        CvStatus Function(
            HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>(
    symbol: 'HOGDescriptor_Load',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HOGDescriptor_Load(
  HOGDescriptor hog,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<HOGDescriptor>)>(
    symbol: 'HOGDescriptor_New',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HOGDescriptor_New(
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<CvStatus Function(HOGDescriptor, VecFloat)>(
    symbol: 'HOGDescriptor_SetSVMDetector',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HOGDescriptor_SetSVMDetector(
  HOGDescriptor hog,
  VecFloat det,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecFloat>)>(
    symbol: 'HOG_GetDefaultPeopleDetector',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HOG_GetDefaultPeopleDetector(
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>(
    symbol: 'HoughCircles', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HoughCircles(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
            ffi.Double, ffi.Int, ffi.Int)>(
    symbol: 'HoughCirclesWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HoughCirclesWithParams(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
  double param1,
  double param2,
  int minRadius,
  int maxRadius,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Double,
            ffi.Double, ffi.Double, ffi.Double)>(
    symbol: 'HoughLines', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HoughLines(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double srn,
  double stn,
  double min_theta,
  double max_theta,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>(
    symbol: 'HoughLinesP', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HoughLinesP(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Double, ffi.Double)>(
    symbol: 'HoughLinesPWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HoughLinesPWithParams(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double minLineLength,
  double maxLineGap,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double,
            ffi.Double, ffi.Double, ffi.Double, ffi.Double)>(
    symbol: 'HoughLinesPointSet',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus HoughLinesPointSet(
  Mat points,
  Mat lines,
  int lines_max,
  int threshold,
  double min_rho,
  double max_rho,
  double rho_step,
  double min_theta,
  double max_theta,
  double theta_step,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Float, ffi.Float)>(
    symbol: 'IlluminationChange',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus IlluminationChange(
  Mat src,
  Mat mask,
  Mat dst,
  double alpha,
  double beta,
);

@ffi.Native<CvStatus Function(VecUChar, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Image_IMDecode', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Image_IMDecode(
  VecUChar buf,
  int flags,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecUChar>)>(
    symbol: 'Image_IMEncode', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Image_IMEncode(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, Mat, VecInt, ffi.Pointer<VecUChar>)>(
    symbol: 'Image_IMEncode_WithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Image_IMEncode_WithParams(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  VecInt params,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Image_IMRead', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Image_IMRead(
  ffi.Pointer<ffi.Char> filename,
  int flags,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Image_IMWrite', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Image_IMWrite(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, Mat, VecInt, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Image_IMWrite_WithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Image_IMWrite_WithParams(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  VecInt params,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, Size, ffi.Int, Mat, Mat)>(
    symbol: 'InitUndistortRectifyMap',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus InitUndistortRectifyMap(
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat r,
  Mat newCameraMatrix,
  Size size,
  int m1type,
  Mat map1,
  Mat map2,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int)>(
    symbol: 'Integral', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Integral(
  Mat src,
  Mat sum,
  Mat sqsum,
  Mat tilted,
  int sdepth,
  int sqdepth,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'InvertAffineTransform',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus InvertAffineTransform(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<KAZE>)>(
    symbol: 'KAZE_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void KAZE_Close(
  ffi.Pointer<KAZE> a,
);

@ffi.Native<CvStatus Function(ffi.Pointer<KAZE>)>(
    symbol: 'KAZE_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KAZE_Create(
  ffi.Pointer<KAZE> rval,
);

@ffi.Native<CvStatus Function(KAZE, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'KAZE_Detect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KAZE_Detect(
  KAZE a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'KAZE_DetectAndCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KAZE_DetectAndCompute(
  KAZE a,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Int, Mat, TermCriteria, ffi.Int, ffi.Int,
            Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'KMeans', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KMeans(
  Mat data,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(VecPoint2f, ffi.Int, Mat, TermCriteria, ffi.Int,
            ffi.Int, Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'KMeansPoints', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KMeansPoints(
  VecPoint2f pts,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<KalmanFilter>)>(
    symbol: 'KalmanFilter_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void KalmanFilter_Close(
  ffi.Pointer<KalmanFilter> self,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_Correct',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_Correct(
  KalmanFilter self,
  Mat measurement,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetControlMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetControlMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetErrorCovPost',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetErrorCovPost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetErrorCovPre',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetErrorCovPre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetGain',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetGain(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetMeasurementMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetMeasurementMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetMeasurementNoiseCov',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetMeasurementNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetProcessNoiseCov',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetProcessNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetStatePost',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetStatePost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetStatePre',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetStatePre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetTemp1',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetTemp1(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetTemp2',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetTemp2(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetTemp3',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetTemp3(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetTemp4',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetTemp4(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetTemp5',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetTemp5(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_GetTransitionMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_GetTransitionMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Int, ffi.Int)>(
    symbol: 'KalmanFilter_Init',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_Init(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
);

@ffi.Native<
        CvStatus Function(KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'KalmanFilter_InitWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_InitWithParams(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
);

@ffi.Native<
        CvStatus Function(
            ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<KalmanFilter>)>(
    symbol: 'KalmanFilter_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_New(
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  ffi.Pointer<KalmanFilter> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_Predict',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_Predict(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>(
    symbol: 'KalmanFilter_PredictWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_PredictWithParams(
  KalmanFilter self,
  Mat control,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetControlMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetControlMatrix(
  KalmanFilter self,
  Mat controlMatrix,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetErrorCovPost',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetErrorCovPost(
  KalmanFilter self,
  Mat errorCovPost,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetErrorCovPre',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetErrorCovPre(
  KalmanFilter self,
  Mat errorCovPre,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetGain',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetGain(
  KalmanFilter self,
  Mat gain,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetMeasurementMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetMeasurementMatrix(
  KalmanFilter self,
  Mat measurementMatrix,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetMeasurementNoiseCov',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetMeasurementNoiseCov(
  KalmanFilter self,
  Mat measurementNoiseCov,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetProcessNoiseCov',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetProcessNoiseCov(
  KalmanFilter self,
  Mat processNoiseCov,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetStatePost',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetStatePost(
  KalmanFilter self,
  Mat statePost,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetStatePre',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetStatePre(
  KalmanFilter self,
  Mat statePre,
);

@ffi.Native<CvStatus Function(KalmanFilter, Mat)>(
    symbol: 'KalmanFilter_SetTransitionMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus KalmanFilter_SetTransitionMatrix(
  KalmanFilter self,
  Mat transitionMatrix,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'LUT', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus LUT(
  Mat src,
  Mat lut,
  Mat dst,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int)>(
    symbol: 'Laplacian', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Laplacian(
  Mat src,
  Mat dst,
  int dDepth,
  int kSize,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Layer>)>(
    symbol: 'Layer_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Layer_Close(
  ffi.Pointer<Layer> layer,
);

@ffi.Native<CvStatus Function(Layer, ffi.Pointer<VecChar>)>(
    symbol: 'Layer_GetName', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Layer_GetName(
  Layer layer,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<CvStatus Function(Layer, ffi.Pointer<VecChar>)>(
    symbol: 'Layer_GetType', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Layer_GetType(
  Layer layer,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
        CvStatus Function(Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>(
    symbol: 'Layer_InputNameToIndex',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Layer_InputNameToIndex(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>(
    symbol: 'Layer_OutputNameToIndex',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Layer_OutputNameToIndex(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Point, Point, Scalar, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'Line', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Line(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<CvStatus Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>(
    symbol: 'LinearPolar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus LinearPolar(
  Mat src,
  Mat dst,
  Point2f center,
  double maxRadius,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>(
    symbol: 'LogPolar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus LogPolar(
  Mat src,
  Mat dst,
  Point2f center,
  double m,
  int flags,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<MSER>)>(
    symbol: 'MSER_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void MSER_Close(
  ffi.Pointer<MSER> a,
);

@ffi.Native<CvStatus Function(ffi.Pointer<MSER>)>(
    symbol: 'MSER_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MSER_Create(
  ffi.Pointer<MSER> rval,
);

@ffi.Native<CvStatus Function(MSER, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'MSER_Detect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MSER_Detect(
  MSER a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_AbsDiff', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AbsDiff(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_Accumulate', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Accumulate(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_AccumulateProduct',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulateProduct(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat)>(
    symbol: 'Mat_AccumulateProductWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulateProductWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_AccumulateSquare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulateSquare(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_AccumulateSquareWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulateSquareWithMask(
  Mat src,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_AccumulateWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulateWithMask(
  Mat src,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Double)>(
    symbol: 'Mat_AccumulatedWeighted',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulatedWeighted(
  Mat src,
  Mat dst,
  double alpha,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Double, Mat)>(
    symbol: 'Mat_AccumulatedWeightedWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AccumulatedWeightedWithMask(
  Mat src,
  Mat dst,
  double alpha,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Add', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Add(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, double_t)>(
    symbol: 'Mat_AddF64', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AddF64(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, float_t)>(
    symbol: 'Mat_AddFloat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AddFloat(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int32)>(
    symbol: 'Mat_AddI32', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AddI32(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int8)>(
    symbol: 'Mat_AddSChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AddSChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Uint8)>(
    symbol: 'Mat_AddUChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AddUChar(
  Mat m,
  int val,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Double, Mat, ffi.Double, ffi.Double, Mat)>(
    symbol: 'Mat_AddWeighted', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_AddWeighted(
  Mat src1,
  double alpha,
  Mat src2,
  double beta,
  double gamma,
  Mat dst,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int, ffi.Int, Mat,
            ffi.Int, ffi.Bool)>(
    symbol: 'Mat_BatchDistance',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BatchDistance(
  Mat src1,
  Mat src2,
  Mat dist,
  int dtype,
  Mat nidx,
  int normType,
  int K,
  Mat mask,
  int update,
  bool crosscheck,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseAnd', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseAnd(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseAndWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseAndWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_BitwiseNot', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseNot(
  Mat src1,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseNotWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseNotWithMask(
  Mat src1,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseOr', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseOr(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseOrWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseOrWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseXor', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseXor(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat)>(
    symbol: 'Mat_BitwiseXorWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BitwiseXorWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_BorderInterpolate',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_BorderInterpolate(
  int p,
  int len,
  int borderType,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>(
    symbol: 'Mat_CalcCovarMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CalcCovarMatrix(
  Mat samples,
  Mat covar,
  Mat mean,
  int flags,
  int ctype,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, ffi.Bool)>(
    symbol: 'Mat_CartToPolar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CartToPolar(
  Mat x,
  Mat y,
  Mat magnitude,
  Mat angle,
  bool angleInDegrees,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_Channels', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Channels(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Bool, ffi.Pointer<Point>, ffi.Double,
            ffi.Double, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Mat_CheckRange', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CheckRange(
  Mat m,
  bool quiet,
  ffi.Pointer<Point> pos,
  double minVal,
  double maxVal,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Mat>)>(
    symbol: 'Mat_Clone', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Clone(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Mat>)>(
    symbol: 'Mat_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Mat_Close(
  ffi.Pointer<Mat> m,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'Mat_CloseVoid', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Mat_CloseVoid(
  ffi.Pointer<ffi.Void> m,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_Cols', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Cols(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int)>(
    symbol: 'Mat_Compare', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Compare(
  Mat src1,
  Mat src2,
  Mat dst,
  int ct,
);

@ffi.Native<CvStatus Function(Mat, ffi.Bool)>(
    symbol: 'Mat_CompleteSymm', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CompleteSymm(
  Mat m,
  bool lowerToUpper,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Mat>)>(
    symbol: 'Mat_ConvertFp16', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ConvertFp16(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Double, ffi.Double)>(
    symbol: 'Mat_ConvertScaleAbs',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ConvertScaleAbs(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_ConvertTo', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ConvertTo(
  Mat m,
  Mat dst,
  int type,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>(
    symbol: 'Mat_ConvertToWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ConvertToWithParams(
  Mat m,
  Mat dst,
  int type,
  double alpha,
  double beta,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'Mat_CopyMakeBorder',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CopyMakeBorder(
  Mat src,
  Mat dst,
  int top,
  int bottom,
  int left,
  int right,
  int borderType,
  Scalar value,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_CopyTo', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CopyTo(
  Mat m,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_CopyToWithMask',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CopyToWithMask(
  Mat m,
  Mat dst,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_CountNonZero', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_CountNonZero(
  Mat src,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_DCT', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DCT(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_DFT', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DFT(
  Mat m,
  Mat dst,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecUChar>)>(
    symbol: 'Mat_Data', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Data(
  Mat m,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Pointer<ffi.Pointer<uchar>>, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_DataPtr', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DataPtr(
  Mat m,
  ffi.Pointer<ffi.Pointer<uchar>> data,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'Mat_Determinant', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Determinant(
  Mat m,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Divide', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Divide(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, double_t)>(
    symbol: 'Mat_DivideF64', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DivideF64(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, float_t)>(
    symbol: 'Mat_DivideFloat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DivideFloat(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int32)>(
    symbol: 'Mat_DivideI32', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DivideI32(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int8)>(
    symbol: 'Mat_DivideSChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DivideSChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Uint8)>(
    symbol: 'Mat_DivideUChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_DivideUChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Mat_Eigen', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Eigen(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_EigenNonSymmetric',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_EigenNonSymmetric(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_ElemSize', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ElemSize(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Mat_Empty', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Empty(
  Mat m,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_Exp', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Exp(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_ExtractChannel',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ExtractChannel(
  Mat src,
  Mat dst,
  int coi,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_FindNonZero', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_FindNonZero(
  Mat src,
  Mat idx,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_Flip', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Flip(
  Mat src,
  Mat dst,
  int flipCode,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Mat>)>(
    symbol: 'Mat_FromCMat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_FromCMat(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
            ffi.Pointer<Mat>)>(
    symbol: 'Mat_FromPtr', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_FromPtr(
  Mat m,
  int rows,
  int cols,
  int type,
  int prows,
  int pcols,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Double, Mat, ffi.Double, Mat, ffi.Int)>(
    symbol: 'Mat_Gemm', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Gemm(
  Mat src1,
  Mat src2,
  double alpha,
  Mat src3,
  double beta,
  Mat dst,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'Mat_GetDouble', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetDouble(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'Mat_GetDouble3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetDouble3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>(
    symbol: 'Mat_GetFloat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetFloat(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>(
    symbol: 'Mat_GetFloat3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetFloat3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>(
    symbol: 'Mat_GetInt', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetInt(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int32> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>(
    symbol: 'Mat_GetInt3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetInt3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int32> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_GetOptimalDFTSize',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetOptimalDFTSize(
  int vecsize,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>(
    symbol: 'Mat_GetSChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetSChar(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int8> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>(
    symbol: 'Mat_GetSChar3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetSChar3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int8> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>(
    symbol: 'Mat_GetShort', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetShort(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int16> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>(
    symbol: 'Mat_GetShort3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetShort3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int16> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'Mat_GetUChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetUChar(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Uint8> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'Mat_GetUChar3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetUChar3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Uint8> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint16>)>(
    symbol: 'Mat_GetUShort', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetUShort(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Uint16> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint16>)>(
    symbol: 'Mat_GetUShort3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetUShort3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Uint16> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2b>)>(
    symbol: 'Mat_GetVec2b', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec2b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2b> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2d>)>(
    symbol: 'Mat_GetVec2d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec2d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2d> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2f>)>(
    symbol: 'Mat_GetVec2f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec2f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2f> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2i>)>(
    symbol: 'Mat_GetVec2i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec2i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2i> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2s>)>(
    symbol: 'Mat_GetVec2s', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec2s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2s> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2w>)>(
    symbol: 'Mat_GetVec2w', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec2w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2w> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3b>)>(
    symbol: 'Mat_GetVec3b', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec3b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3b> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3d>)>(
    symbol: 'Mat_GetVec3d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec3d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3d> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3f>)>(
    symbol: 'Mat_GetVec3f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec3f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3f> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3i>)>(
    symbol: 'Mat_GetVec3i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec3i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3i> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3s>)>(
    symbol: 'Mat_GetVec3s', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec3s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3s> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3w>)>(
    symbol: 'Mat_GetVec3w', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec3w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3w> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4b>)>(
    symbol: 'Mat_GetVec4b', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec4b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4b> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4d>)>(
    symbol: 'Mat_GetVec4d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec4d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4d> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4f>)>(
    symbol: 'Mat_GetVec4f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec4f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4f> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4i>)>(
    symbol: 'Mat_GetVec4i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec4i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4i> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4s>)>(
    symbol: 'Mat_GetVec4s', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec4s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4s> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4w>)>(
    symbol: 'Mat_GetVec4w', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec4w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4w> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6d>)>(
    symbol: 'Mat_GetVec6d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec6d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6d> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6f>)>(
    symbol: 'Mat_GetVec6f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec6f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6f> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6i>)>(
    symbol: 'Mat_GetVec6i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec6i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6i> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec8i>)>(
    symbol: 'Mat_GetVec8i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_GetVec8i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec8i> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Hconcat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Hconcat(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_Idct', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Idct(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Int)>(
    symbol: 'Mat_Idft', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Idft(
  Mat src,
  Mat dst,
  int flags,
  int nonzeroRows,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat)>(
    symbol: 'Mat_InRange', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_InRange(
  Mat src,
  Mat lowerb,
  Mat upperb,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Scalar, Scalar, Mat)>(
    symbol: 'Mat_InRangeWithScalar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_InRangeWithScalar(
  Mat src,
  Scalar lowerb,
  Scalar upperb,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_InsertChannel',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_InsertChannel(
  Mat src,
  Mat dst,
  int coi,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'Mat_Invert', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Invert(
  Mat src,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Mat_IsContinuous', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_IsContinuous(
  Mat m,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_Log', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Log(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Magnitude', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Magnitude(
  Mat x,
  Mat y,
  Mat magnitude,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Max', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Max(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Scalar>)>(
    symbol: 'Mat_Mean', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Mean(
  Mat m,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_MeanStdDev', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MeanStdDev(
  Mat src,
  Mat dstMean,
  Mat dstStdDev,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Pointer<Scalar>)>(
    symbol: 'Mat_MeanWithMask', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MeanWithMask(
  Mat m,
  Mat mask,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<CvStatus Function(VecMat, Mat)>(
    symbol: 'Mat_Merge', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Merge(
  VecMat mats,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Min', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Min(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_MinMaxIdx', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MinMaxIdx(
  Mat m,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<ffi.Int> minIdx,
  ffi.Pointer<ffi.Int> maxIdx,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
            ffi.Pointer<Point>, ffi.Pointer<Point>)>(
    symbol: 'Mat_MinMaxLoc', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MinMaxLoc(
  Mat m,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<Point> minLoc,
  ffi.Pointer<Point> maxLoc,
);

@ffi.Native<CvStatus Function(VecMat, VecMat, VecInt)>(
    symbol: 'Mat_MixChannels', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MixChannels(
  VecMat src,
  VecMat dst,
  VecInt fromTo,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int)>(
    symbol: 'Mat_MulSpectrums', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MulSpectrums(
  Mat a,
  Mat b,
  Mat c,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Multiply', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Multiply(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, double_t)>(
    symbol: 'Mat_MultiplyF64', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplyF64(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, float_t)>(
    symbol: 'Mat_MultiplyFloat',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplyFloat(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int32)>(
    symbol: 'Mat_MultiplyI32', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplyI32(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Pointer<Mat>)>(
    symbol: 'Mat_MultiplyMatrix',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplyMatrix(
  Mat x,
  Mat y,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int8)>(
    symbol: 'Mat_MultiplySChar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplySChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Uint8)>(
    symbol: 'Mat_MultiplyUChar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplyUChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Double, ffi.Int)>(
    symbol: 'Mat_MultiplyWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_MultiplyWithParams(
  Mat src1,
  Mat src2,
  Mat dst,
  double scale,
  int dtype,
);

/// @brief Create empty Mat
///
/// ALL return values with a type of `Pointer of Struct`,
/// e.g., Mat, the internal pointer (Mat.ptr) MUST be NULL
/// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
/// Mat* mat = (Mat*)malloc(sizeof(Mat));
/// CvStatus status = Mat_New(mat);
/// Mat_Close(mat);
///
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<CvStatus Function(ffi.Pointer<Mat>)>(
    symbol: 'Mat_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_New(
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
            ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewFromBytes', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewFromBytes(
  int rows,
  int cols,
  int type,
  ffi.Pointer<ffi.Void> buf,
  int step,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Scalar, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewFromScalar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewFromScalar(
  Scalar ar,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewFromVecPoint',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewFromVecPoint(
  VecPoint vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecPoint2f, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewFromVecPoint2f',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewFromVecPoint2f(
  VecPoint2f vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecPoint3f, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewFromVecPoint3f',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewFromVecPoint3f(
  VecPoint3f vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewWithSize', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewWithSize(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewWithSizeFromScalar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewWithSizeFromScalar(
  Scalar ar,
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewWithSizes', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewWithSizes(
  VecInt sizes,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Int, VecChar, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewWithSizesFromBytes',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewWithSizesFromBytes(
  VecInt sizes,
  int type,
  VecChar buf,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Int, Scalar, ffi.Pointer<Mat>)>(
    symbol: 'Mat_NewWithSizesFromScalar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_NewWithSizesFromScalar(
  VecInt sizes,
  int type,
  Scalar ar,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>(
    symbol: 'Mat_Normalize', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Normalize(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  int typ,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, ffi.Int)>(
    symbol: 'Mat_PCACompute', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_PCACompute(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  Mat eigenvalues,
  int maxComponents,
);

@ffi.Native<CvStatus Function(Mat, ffi.Double)>(
    symbol: 'Mat_PatchNaNs', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_PatchNaNs(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_PerspectiveTransform',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_PerspectiveTransform(
  Mat src,
  Mat dst,
  Mat tm,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Bool)>(
    symbol: 'Mat_Phase', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Phase(
  Mat x,
  Mat y,
  Mat angle,
  bool angleInDegrees,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, ffi.Bool)>(
    symbol: 'Mat_PolarToCart', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_PolarToCart(
  Mat magnitude,
  Mat degree,
  Mat x,
  Mat y,
  bool angleInDegrees,
);

@ffi.Native<CvStatus Function(Mat, ffi.Double, Mat)>(
    symbol: 'Mat_Pow', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Pow(
  Mat src,
  double power,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'Mat_Reduce', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Reduce(
  Mat src,
  Mat dst,
  int dim,
  int rType,
  int dType,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Bool)>(
    symbol: 'Mat_ReduceArgMax', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ReduceArgMax(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Bool)>(
    symbol: 'Mat_ReduceArgMin', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ReduceArgMin(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
);

@ffi.Native<CvStatus Function(Mat, Rect, ffi.Pointer<Mat>)>(
    symbol: 'Mat_Region', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Region(
  Mat m,
  Rect r,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<Mat>)>(
    symbol: 'Mat_Release', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Release(
  ffi.Pointer<Mat> m,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Mat)>(
    symbol: 'Mat_Repeat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Repeat(
  Mat src,
  int nY,
  int nX,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_Reshape', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Reshape(
  Mat m,
  int cn,
  int rows,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_Rows', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Rows(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Double, Mat, Mat)>(
    symbol: 'Mat_ScaleAdd', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ScaleAdd(
  Mat src1,
  double alpha,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Double)>(
    symbol: 'Mat_SetDouble', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetDouble(
  Mat m,
  int row,
  int col,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>(
    symbol: 'Mat_SetDouble3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetDouble3(
  Mat m,
  int x,
  int y,
  int z,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Float)>(
    symbol: 'Mat_SetFloat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetFloat(
  Mat m,
  int row,
  int col,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Float)>(
    symbol: 'Mat_SetFloat3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetFloat3(
  Mat m,
  int x,
  int y,
  int z,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Double)>(
    symbol: 'Mat_SetIdentity', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetIdentity(
  Mat src,
  double scalar,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>(
    symbol: 'Mat_SetInt', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetInt(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>(
    symbol: 'Mat_SetInt3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetInt3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>(
    symbol: 'Mat_SetSChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetSChar(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>(
    symbol: 'Mat_SetSChar3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetSChar3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>(
    symbol: 'Mat_SetShort', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetShort(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>(
    symbol: 'Mat_SetShort3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetShort3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<CvStatus Function(Mat, Scalar)>(
    symbol: 'Mat_SetTo', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetTo(
  Mat m,
  Scalar value,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>(
    symbol: 'Mat_SetUChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetUChar(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>(
    symbol: 'Mat_SetUChar3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetUChar3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Uint16)>(
    symbol: 'Mat_SetUShort', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetUShort(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>(
    symbol: 'Mat_SetUShort3', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetUShort3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec2b)>(
    symbol: 'Mat_SetVec2b', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec2b(
  Mat m,
  int row,
  int col,
  Vec2b val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec2d)>(
    symbol: 'Mat_SetVec2d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec2d(
  Mat m,
  int row,
  int col,
  Vec2d val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec2f)>(
    symbol: 'Mat_SetVec2f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec2f(
  Mat m,
  int row,
  int col,
  Vec2f val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec2i)>(
    symbol: 'Mat_SetVec2i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec2i(
  Mat m,
  int row,
  int col,
  Vec2i val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec2s)>(
    symbol: 'Mat_SetVec2s', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec2s(
  Mat m,
  int row,
  int col,
  Vec2s val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec2w)>(
    symbol: 'Mat_SetVec2w', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec2w(
  Mat m,
  int row,
  int col,
  Vec2w val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec3b)>(
    symbol: 'Mat_SetVec3b', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec3b(
  Mat m,
  int row,
  int col,
  Vec3b val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec3d)>(
    symbol: 'Mat_SetVec3d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec3d(
  Mat m,
  int row,
  int col,
  Vec3d val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec3f)>(
    symbol: 'Mat_SetVec3f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec3f(
  Mat m,
  int row,
  int col,
  Vec3f val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec3i)>(
    symbol: 'Mat_SetVec3i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec3i(
  Mat m,
  int row,
  int col,
  Vec3i val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec3s)>(
    symbol: 'Mat_SetVec3s', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec3s(
  Mat m,
  int row,
  int col,
  Vec3s val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec3w)>(
    symbol: 'Mat_SetVec3w', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec3w(
  Mat m,
  int row,
  int col,
  Vec3w val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec4b)>(
    symbol: 'Mat_SetVec4b', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec4b(
  Mat m,
  int row,
  int col,
  Vec4b val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec4d)>(
    symbol: 'Mat_SetVec4d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec4d(
  Mat m,
  int row,
  int col,
  Vec4d val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec4f)>(
    symbol: 'Mat_SetVec4f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec4f(
  Mat m,
  int row,
  int col,
  Vec4f val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec4i)>(
    symbol: 'Mat_SetVec4i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec4i(
  Mat m,
  int row,
  int col,
  Vec4i val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec4s)>(
    symbol: 'Mat_SetVec4s', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec4s(
  Mat m,
  int row,
  int col,
  Vec4s val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec4w)>(
    symbol: 'Mat_SetVec4w', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec4w(
  Mat m,
  int row,
  int col,
  Vec4w val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec6d)>(
    symbol: 'Mat_SetVec6d', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec6d(
  Mat m,
  int row,
  int col,
  Vec6d val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec6f)>(
    symbol: 'Mat_SetVec6f', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec6f(
  Mat m,
  int row,
  int col,
  Vec6f val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec6i)>(
    symbol: 'Mat_SetVec6i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec6i(
  Mat m,
  int row,
  int col,
  Vec6i val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, Vec8i)>(
    symbol: 'Mat_SetVec8i', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SetVec8i(
  Mat m,
  int row,
  int col,
  Vec8i val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecInt>)>(
    symbol: 'Mat_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Size(
  Mat m,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Mat_Solve', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Solve(
  Mat src1,
  Mat src2,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_SolveCubic', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SolveCubic(
  Mat coeffs,
  Mat roots,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'Mat_SolvePoly', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SolvePoly(
  Mat coeffs,
  Mat roots,
  int maxIters,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_Sort', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Sort(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Mat_SortIdx', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SortIdx(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecMat>)>(
    symbol: 'Mat_Split', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Split(
  Mat src,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Mat>)>(
    symbol: 'Mat_Sqrt', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Sqrt(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_Step', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Step(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Subtract', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Subtract(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, double_t)>(
    symbol: 'Mat_SubtractF64', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SubtractF64(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, float_t)>(
    symbol: 'Mat_SubtractFloat',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SubtractFloat(
  Mat m,
  double val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int32)>(
    symbol: 'Mat_SubtractI32', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SubtractI32(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int8)>(
    symbol: 'Mat_SubtractSChar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SubtractSChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Uint8)>(
    symbol: 'Mat_SubtractUChar',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_SubtractUChar(
  Mat m,
  int val,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Scalar>)>(
    symbol: 'Mat_Sum', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Sum(
  Mat src,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Mat>)>(
    symbol: 'Mat_T', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_T(
  Mat x,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecChar>)>(
    symbol: 'Mat_ToVecChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ToVecChar(
  Mat m,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecUChar>)>(
    symbol: 'Mat_ToVecUChar', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_ToVecUChar(
  Mat m,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_Total', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Total(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Scalar>)>(
    symbol: 'Mat_Trace', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Trace(
  Mat src,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Transform', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Transform(
  Mat src,
  Mat dst,
  Mat tm,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Mat_Transpose', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Transpose(
  Mat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Mat_Type', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Type(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat)>(
    symbol: 'Mat_Vconcat', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_Vconcat(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_colRange', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_colRange(
  Mat m,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Mat_rowRange', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Mat_rowRange(
  Mat m,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
        CvStatus Function(
            VecPoint, VecPoint, ffi.Int, ffi.Double, ffi.Pointer<ffi.Double>)>(
    symbol: 'MatchShapes', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MatchShapes(
  VecPoint contour1,
  VecPoint contour2,
  int method,
  double parameter,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int, Mat)>(
    symbol: 'MatchTemplate', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MatchTemplate(
  Mat image,
  Mat templ,
  Mat result,
  int method,
  Mat mask,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'MedianBlur', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MedianBlur(
  Mat src,
  Mat dst,
  int ksize,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<MergeMertens>)>(
    symbol: 'MergeMertens_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void MergeMertens_Close(
  ffi.Pointer<MergeMertens> b,
);

@ffi.Native<CvStatus Function(ffi.Pointer<MergeMertens>)>(
    symbol: 'MergeMertens_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MergeMertens_Create(
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<MergeMertens>)>(
    symbol: 'MergeMertens_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MergeMertens_CreateWithParams(
  double contrast_weight,
  double saturation_weight,
  double exposure_weight,
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<CvStatus Function(MergeMertens, VecMat, Mat)>(
    symbol: 'MergeMertens_Process',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MergeMertens_Process(
  MergeMertens b,
  VecMat src,
  Mat dst,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<RotatedRect>)>(
    symbol: 'MinAreaRect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MinAreaRect(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
);

@ffi.Native<
        CvStatus Function(
            VecPoint, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Float>)>(
    symbol: 'MinEnclosingCircle',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MinEnclosingCircle(
  VecPoint pts,
  ffi.Pointer<Point2f> center,
  ffi.Pointer<ffi.Float> radius,
);

@ffi.Native<CvStatus Function(Mat, ffi.Bool, ffi.Pointer<Moment>)>(
    symbol: 'Moments', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Moments(
  Mat src,
  bool binaryImage,
  ffi.Pointer<Moment> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<Scalar>)>(
    symbol: 'MorphologyDefaultBorderValue',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MorphologyDefaultBorderValue(
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, Mat)>(
    symbol: 'MorphologyEx', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MorphologyEx(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Int, Mat, Point, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'MorphologyExWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus MorphologyExWithParams(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
  Point pt,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
        CvStatus Function(
            VecRect, VecFloat, ffi.Float, ffi.Float, ffi.Pointer<VecInt>)>(
    symbol: 'NMSBoxes', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus NMSBoxes(
  VecRect bboxes,
  VecFloat scores,
  double score_threshold,
  double nms_threshold,
  ffi.Pointer<VecInt> indices,
);

@ffi.Native<
        CvStatus Function(VecRect, VecFloat, ffi.Float, ffi.Float,
            ffi.Pointer<VecInt>, ffi.Float, ffi.Int)>(
    symbol: 'NMSBoxesWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus NMSBoxesWithParams(
  VecRect bboxes,
  VecFloat scores,
  double score_threshold,
  double nms_threshold,
  ffi.Pointer<VecInt> indices,
  double eta,
  int top_k,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Double, Size, Scalar, ffi.Bool, ffi.Bool, ffi.Int)>(
    symbol: 'Net_BlobFromImage',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_BlobFromImage(
  Mat image,
  Mat blob,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
);

@ffi.Native<
        CvStatus Function(VecMat, Mat, ffi.Double, Size, Scalar, ffi.Bool,
            ffi.Bool, ffi.Int)>(
    symbol: 'Net_BlobFromImages',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_BlobFromImages(
  VecMat images,
  Mat blob,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Net>)>(
    symbol: 'Net_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Net_Close(
  ffi.Pointer<Net> net,
);

@ffi.Native<CvStatus Function(ffi.Pointer<Net>)>(
    symbol: 'Net_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_Create(
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(Net, VecChar)>(
    symbol: 'Net_Dump', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_Dump(
  Net net,
  VecChar rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Net_Empty', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_Empty(
  Net net,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<ffi.Char>, ffi.Pointer<Mat>)>(
    symbol: 'Net_Forward', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_Forward(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<VecMat>, VecVecChar)>(
    symbol: 'Net_ForwardLayers',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ForwardLayers(
  Net net,
  ffi.Pointer<VecMat> outputBlobs,
  VecVecChar outBlobNames,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<Net>)>(
    symbol: 'Net_FromNet', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_FromNet(
  Net net,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Net_GetBlobChannel',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetBlobChannel(
  Mat blob,
  int imgidx,
  int chnidx,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<Scalar>)>(
    symbol: 'Net_GetBlobSize', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetBlobSize(
  Mat blob,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<VecFloat>, ffi.Pointer<VecInt>)>(
    symbol: 'Net_GetInputDetails',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetInputDetails(
  Net net,
  ffi.Pointer<VecFloat> scales,
  ffi.Pointer<VecInt> zeropoints,
);

@ffi.Native<CvStatus Function(Net, ffi.Int, ffi.Pointer<Layer>)>(
    symbol: 'Net_GetLayer', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetLayer(
  Net net,
  int layerid,
  ffi.Pointer<Layer> rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<VecVecChar>)>(
    symbol: 'Net_GetLayerNames',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetLayerNames(
  Net net,
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<ffi.Int64>)>(
    symbol: 'Net_GetPerfProfile',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetPerfProfile(
  Net net,
  ffi.Pointer<ffi.Int64> rval,
);

@ffi.Native<CvStatus Function(Net, ffi.Pointer<VecInt>)>(
    symbol: 'Net_GetUnconnectedOutLayers',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_GetUnconnectedOutLayers(
  Net net,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecMat>)>(
    symbol: 'Net_ImagesFromBlob',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ImagesFromBlob(
  Mat blob,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNet', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNet(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<ffi.Char> framework,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, VecUChar, VecUChar, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetBytes', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetBytes(
  ffi.Pointer<ffi.Char> framework,
  VecUChar model,
  VecUChar config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromCaffe',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromCaffe(
  ffi.Pointer<ffi.Char> prototxt,
  ffi.Pointer<ffi.Char> caffeModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(VecUChar, VecUChar, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromCaffeBytes',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromCaffeBytes(
  VecUChar prototxt,
  VecUChar caffeModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromONNX',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromONNX(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(VecUChar, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromONNXBytes',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromONNXBytes(
  VecUChar model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromTFLite',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromTFLite(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(VecUChar, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromTFLiteBytes',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromTFLiteBytes(
  VecUChar bufferModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromTensorflow',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromTensorflow(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(VecUChar, VecUChar, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromTensorflowBytes',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromTensorflowBytes(
  VecUChar model,
  VecUChar config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Bool, ffi.Pointer<Net>)>(
    symbol: 'Net_ReadNetFromTorch',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_ReadNetFromTorch(
  ffi.Pointer<ffi.Char> model,
  bool isBinary,
  bool evaluate,
  ffi.Pointer<Net> rval,
);

@ffi.Native<CvStatus Function(Net, Mat, ffi.Pointer<ffi.Char>)>(
    symbol: 'Net_SetInput', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_SetInput(
  Net net,
  Mat blob,
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<CvStatus Function(Net, ffi.Int)>(
    symbol: 'Net_SetPreferableBackend',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_SetPreferableBackend(
  Net net,
  int backend,
);

@ffi.Native<CvStatus Function(Net, ffi.Int)>(
    symbol: 'Net_SetPreferableTarget',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_SetPreferableTarget(
  Net net,
  int target,
);

@ffi.Native<
        CvStatus Function(Net, ffi.Pointer<ffi.Char>, ffi.Pointer<AsyncArray>)>(
    symbol: 'Net_forwardAsync', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Net_forwardAsync(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  ffi.Pointer<AsyncArray> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'Norm', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Norm(
  Mat src1,
  int normType,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'NormWithMats', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus NormWithMats(
  Mat src1,
  Mat src2,
  int normType,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ORB>)>(
    symbol: 'ORB_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void ORB_Close(
  ffi.Pointer<ORB> o,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ORB>)>(
    symbol: 'ORB_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ORB_Create(
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int, ffi.Int,
            ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ORB>)>(
    symbol: 'ORB_CreateWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ORB_CreateWithParams(
  int nfeatures,
  double scaleFactor,
  int nlevels,
  int edgeThreshold,
  int firstLevel,
  int WTA_K,
  int scoreType,
  int patchSize,
  int fastThreshold,
  ffi.Pointer<ORB> rval,
);

@ffi.Native<CvStatus Function(ORB, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'ORB_Detect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ORB_Detect(
  ORB o,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(ORB, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'ORB_DetectAndCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus ORB_DetectAndCompute(
  ORB o,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Ones', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Ones(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'PencilSketch', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PencilSketch(
  Mat src,
  Mat dst1,
  Mat dst2,
  double sigma_s,
  double sigma_r,
  double shade_factor,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<Point2f>)>(
    symbol: 'PhaseCorrelate', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PhaseCorrelate(
  Mat src1,
  Mat src2,
  Mat window,
  ffi.Pointer<ffi.Double> response,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Float, ffi.Int)>(
    symbol: 'PhotoInpaint', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PhotoInpaint(
  Mat src,
  Mat mask,
  Mat dst,
  double inpaint_radius,
  int algorithm_type,
);

@ffi.Native<
        CvStatus Function(
            VecPoint, Point2f, ffi.Bool, ffi.Pointer<ffi.Double>)>(
    symbol: 'PointPolygonTest', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PointPolygonTest(
  VecPoint pts,
  Point2f pt,
  bool measureDist,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int)>(
    symbol: 'Polylines', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Polylines(
  Mat img,
  VecVecPoint points,
  bool isClosed,
  Scalar color,
  int thickness,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
            ffi.Double, Scalar, ffi.Int)>(
    symbol: 'PutText', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PutText(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
);

@ffi.Native<
        CvStatus Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
            ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Bool)>(
    symbol: 'PutTextWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PutTextWithParams(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  int lineType,
  bool bottomLeftOrigin,
);

@ffi.Native<CvStatus Function(Mat, Mat, Size, ffi.Int)>(
    symbol: 'PyrDown', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PyrDown(
  Mat src,
  Mat dst,
  Size dstsize,
  int borderType,
);

@ffi.Native<CvStatus Function(Mat, Mat, Size, ffi.Int)>(
    symbol: 'PyrUp', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus PyrUp(
  Mat src,
  Mat dst,
  Size dstsize,
  int borderType,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<QRCodeDetector>)>(
    symbol: 'QRCodeDetector_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void QRCodeDetector_Close(
  ffi.Pointer<QRCodeDetector> qr,
);

@ffi.Native<
        CvStatus Function(
            QRCodeDetector, Mat, VecPoint, Mat, ffi.Pointer<VecChar>)>(
    symbol: 'QRCodeDetector_Decode',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus QRCodeDetector_Decode(
  QRCodeDetector qr,
  Mat input,
  VecPoint inputPoints,
  Mat straight_qrcode,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
        CvStatus Function(
            QRCodeDetector, Mat, VecPoint, ffi.Pointer<ffi.Bool>)>(
    symbol: 'QRCodeDetector_Detect',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus QRCodeDetector_Detect(
  QRCodeDetector qr,
  Mat input,
  VecPoint points,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
            ffi.Pointer<Mat>, ffi.Pointer<VecChar>)>(
    symbol: 'QRCodeDetector_DetectAndDecode',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus QRCodeDetector_DetectAndDecode(
  QRCodeDetector qr,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
        CvStatus Function(QRCodeDetector, Mat, ffi.Pointer<VecVecChar>,
            ffi.Pointer<VecPoint>, ffi.Pointer<VecMat>, ffi.Pointer<ffi.Bool>)>(
    symbol: 'QRCodeDetector_DetectAndDecodeMulti',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus QRCodeDetector_DetectAndDecodeMulti(
  QRCodeDetector qr,
  Mat input,
  ffi.Pointer<VecVecChar> decoded,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<VecMat> straight_code,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(
            QRCodeDetector, Mat, VecPoint, ffi.Pointer<ffi.Bool>)>(
    symbol: 'QRCodeDetector_DetectMulti',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus QRCodeDetector_DetectMulti(
  QRCodeDetector qr,
  Mat input,
  VecPoint points,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<QRCodeDetector>)>(
    symbol: 'QRCodeDetector_New',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus QRCodeDetector_New(
  ffi.Pointer<QRCodeDetector> rval,
);

@ffi.Native<
        CvStatus Function(RNG, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Bool)>(
    symbol: 'RNG_Fill', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RNG_Fill(
  RNG rng,
  Mat mat,
  int distType,
  double a,
  double b,
  bool saturateRange,
);

@ffi.Native<CvStatus Function(RNG, ffi.Double, ffi.Pointer<ffi.Double>)>(
    symbol: 'RNG_Gaussian', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RNG_Gaussian(
  RNG rng,
  double sigma,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(RNG, ffi.Pointer<ffi.Uint32>)>(
    symbol: 'RNG_Next', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RNG_Next(
  RNG rng,
  ffi.Pointer<ffi.Uint32> rval,
);

@ffi.Native<CvStatus Function(RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'RNG_Uniform', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RNG_Uniform(
  RNG rng,
  int a,
  int b,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(
            RNG, ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>(
    symbol: 'RNG_UniformDouble',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RNG_UniformDouble(
  RNG rng,
  double a,
  double b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Scalar, Scalar)>(
    symbol: 'RandN', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RandN(
  Mat mat,
  Scalar mean,
  Scalar stddev,
);

@ffi.Native<CvStatus Function(Mat)>(
    symbol: 'RandShuffle', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RandShuffle(
  Mat mat,
);

@ffi.Native<CvStatus Function(Mat, ffi.Double, RNG)>(
    symbol: 'RandShuffleWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RandShuffleWithParams(
  Mat mat,
  double iterFactor,
  RNG rng,
);

@ffi.Native<CvStatus Function(Mat, Scalar, Scalar)>(
    symbol: 'RandU', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RandU(
  Mat mat,
  Scalar low,
  Scalar high,
);

@ffi.Native<CvStatus Function(Mat, Rect, Scalar, ffi.Int)>(
    symbol: 'Rectangle', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Rectangle(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
);

@ffi.Native<CvStatus Function(Mat, Rect, Scalar, ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'RectangleWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RectangleWithParams(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'Remap', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Remap(
  Mat src,
  Mat dst,
  Mat map1,
  Mat map2,
  int interpolation,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<CvStatus Function(Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>(
    symbol: 'Resize', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Resize(
  Mat src,
  Mat dst,
  Size sz,
  double fx,
  double fy,
  int interp,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<RNG>)>(
    symbol: 'Rng_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Rng_Close(
  ffi.Pointer<RNG> rng,
);

@ffi.Native<CvStatus Function(ffi.Pointer<RNG>)>(
    symbol: 'Rng_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Rng_New(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<CvStatus Function(ffi.Uint64, ffi.Pointer<RNG>)>(
    symbol: 'Rng_NewWithState', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Rng_NewWithState(
  int state,
  ffi.Pointer<RNG> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'Rotate', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Rotate(
  Mat src,
  Mat dst,
  int rotateCode,
);

@ffi.Native<CvStatus Function(RotatedRect, ffi.Pointer<Rect>)>(
    symbol: 'RotatedRect_BoundingRect',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RotatedRect_BoundingRect(
  RotatedRect rect,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<CvStatus Function(RotatedRect, ffi.Pointer<Rect2f>)>(
    symbol: 'RotatedRect_BoundingRect2f',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RotatedRect_BoundingRect2f(
  RotatedRect rect,
  ffi.Pointer<Rect2f> rval,
);

@ffi.Native<CvStatus Function(RotatedRect, ffi.Pointer<VecPoint2f>)>(
    symbol: 'RotatedRect_Points',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus RotatedRect_Points(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> pts,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SIFT>)>(
    symbol: 'SIFT_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void SIFT_Close(
  ffi.Pointer<SIFT> f,
);

@ffi.Native<CvStatus Function(ffi.Pointer<SIFT>)>(
    symbol: 'SIFT_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SIFT_Create(
  ffi.Pointer<SIFT> rval,
);

@ffi.Native<CvStatus Function(SIFT, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'SIFT_Detect', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SIFT_Detect(
  SIFT f,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'SIFT_DetectAndCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SIFT_DetectAndCompute(
  SIFT f,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, ffi.Int)>(
    symbol: 'SVD_Compute', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SVD_Compute(
  Mat src,
  Mat w,
  Mat u,
  Mat vt,
  int flags,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double,
            ffi.Double, ffi.Int)>(
    symbol: 'Scharr', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Scharr(
  Mat src,
  Mat dst,
  int dDepth,
  int dx,
  int dy,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Point, Mat, ffi.Int)>(
    symbol: 'SeamlessClone', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SeamlessClone(
  Mat src,
  Mat dst,
  Mat mask,
  Point p,
  Mat blend,
  int flags,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Int, Mat, Mat, Point, ffi.Double, ffi.Int)>(
    symbol: 'SepFilter2D', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SepFilter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernelX,
  Mat kernelY,
  Point anchor,
  double delta,
  int borderType,
);

@ffi.Native<CvStatus Function(ffi.Int)>(
    symbol: 'SetNumThreads', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SetNumThreads(
  int n,
);

@ffi.Native<CvStatus Function(ffi.Int)>(
    symbol: 'SetRNGSeed', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SetRNGSeed(
  int seed,
);

@ffi.Native<CvStatus Function(ffi.Pointer<SimpleBlobDetectorParams>)>(
    symbol: 'SimpleBlobDetectorParams_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SimpleBlobDetectorParams_Create(
  ffi.Pointer<SimpleBlobDetectorParams> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SimpleBlobDetector>)>(
    symbol: 'SimpleBlobDetector_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void SimpleBlobDetector_Close(
  ffi.Pointer<SimpleBlobDetector> b,
);

@ffi.Native<CvStatus Function(ffi.Pointer<SimpleBlobDetector>)>(
    symbol: 'SimpleBlobDetector_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SimpleBlobDetector_Create(
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
        CvStatus Function(
            SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>(
    symbol: 'SimpleBlobDetector_Create_WithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SimpleBlobDetector_Create_WithParams(
  SimpleBlobDetectorParams params,
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
        CvStatus Function(SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'SimpleBlobDetector_Detect',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SimpleBlobDetector_Detect(
  SimpleBlobDetector b,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
            ffi.Double, ffi.Double, ffi.Int)>(
    symbol: 'Sobel', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Sobel(
  Mat src,
  Mat dst,
  int ddepth,
  int dx,
  int dy,
  int ksize,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>(
    symbol: 'SpatialGradient', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SpatialGradient(
  Mat src,
  Mat dx,
  Mat dy,
  int ksize,
  int borderType,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, Size)>(
    symbol: 'SqBoxFilter', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus SqBoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  Size ps,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<PtrStitcher>)>(
    symbol: 'Stitcher_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Stitcher_Close(
  ffi.Pointer<PtrStitcher> stitcher,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<VecInt>)>(
    symbol: 'Stitcher_Component',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_Component(
  Stitcher self,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<CvStatus Function(Stitcher, Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_ComposePanorama',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_ComposePanorama(
  Stitcher self,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_ComposePanorama_1',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_ComposePanorama_1(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Pointer<PtrStitcher>)>(
    symbol: 'Stitcher_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_Create(
  int mode,
  ffi.Pointer<PtrStitcher> rval,
);

@ffi.Native<CvStatus Function(Stitcher, VecMat, VecMat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_EstimateTransform',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_EstimateTransform(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(PtrStitcher, ffi.Pointer<Stitcher>)>(
    symbol: 'Stitcher_Get', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_Get(
  PtrStitcher self,
  ffi.Pointer<Stitcher> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Double>)>(
    symbol: 'Stitcher_GetCompositingResol',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetCompositingResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_GetInterpolationFlags',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetInterpolationFlags(
  Stitcher self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Double>)>(
    symbol: 'Stitcher_GetPanoConfidenceThresh',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetPanoConfidenceThresh(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Double>)>(
    symbol: 'Stitcher_GetRegistrationResol',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetRegistrationResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Double>)>(
    symbol: 'Stitcher_GetSeamEstimationResol',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetSeamEstimationResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_GetWaveCorrectKind',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetWaveCorrectKind(
  Stitcher self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Pointer<ffi.Bool>)>(
    symbol: 'Stitcher_GetWaveCorrection',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_GetWaveCorrection(
  Stitcher self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Double)>(
    symbol: 'Stitcher_SetCompositingResol',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetCompositingResol(
  Stitcher self,
  double inval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Int)>(
    symbol: 'Stitcher_SetInterpolationFlags',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetInterpolationFlags(
  Stitcher self,
  int inval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Double)>(
    symbol: 'Stitcher_SetPanoConfidenceThresh',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetPanoConfidenceThresh(
  Stitcher self,
  double inval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Double)>(
    symbol: 'Stitcher_SetRegistrationResol',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetRegistrationResol(
  Stitcher self,
  double inval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Double)>(
    symbol: 'Stitcher_SetSeamEstimationResol',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetSeamEstimationResol(
  Stitcher self,
  double inval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Int)>(
    symbol: 'Stitcher_SetWaveCorrectKind',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetWaveCorrectKind(
  Stitcher self,
  int inval,
);

@ffi.Native<CvStatus Function(Stitcher, ffi.Bool)>(
    symbol: 'Stitcher_SetWaveCorrection',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_SetWaveCorrection(
  Stitcher self,
  bool inval,
);

@ffi.Native<CvStatus Function(Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_Stitch', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_Stitch(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(Stitcher, VecMat, VecMat, Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'Stitcher_Stitch_1',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stitcher_Stitch_1(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Float, ffi.Float)>(
    symbol: 'Stylization', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Stylization(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<TermCriteria>)>(
    symbol: 'TermCriteria_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void TermCriteria_Close(
  ffi.Pointer<TermCriteria> tc,
);

@ffi.Native<CvStatus Function(TermCriteria, ffi.Pointer<ffi.Double>)>(
    symbol: 'TermCriteria_Epsilon',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TermCriteria_Epsilon(
  TermCriteria tc,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(TermCriteria, ffi.Pointer<ffi.Int>)>(
    symbol: 'TermCriteria_MaxCount',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TermCriteria_MaxCount(
  TermCriteria tc,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Int, ffi.Int, ffi.Double, ffi.Pointer<TermCriteria>)>(
    symbol: 'TermCriteria_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TermCriteria_New(
  int typ,
  int maxCount,
  double epsilon,
  ffi.Pointer<TermCriteria> rval,
);

@ffi.Native<CvStatus Function(TermCriteria, ffi.Pointer<ffi.Int>)>(
    symbol: 'TermCriteria_Type',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TermCriteria_Type(
  TermCriteria tc,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Int)>(
    symbol: 'TextureFlattening',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TextureFlattening(
  Mat src,
  Mat mask,
  Mat dst,
  double low_threshold,
  double high_threshold,
  int kernel_size,
);

@ffi.Native<CvStatus Function(ffi.Pointer<RNG>)>(
    symbol: 'TheRNG', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TheRNG(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<
        CvStatus Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
            ffi.Pointer<ffi.Double>)>(
    symbol: 'Threshold', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Threshold(
  Mat src,
  Mat dst,
  double thresh,
  double maxvalue,
  int typ,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'Trackbar_Create', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Trackbar_Create(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int max,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Int>, ffi.Int)>(
    symbol: 'Trackbar_CreateWithValue',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Trackbar_CreateWithValue(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Int> value,
  int max,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Int>)>(
    symbol: 'Trackbar_GetPos', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Trackbar_GetPos(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'Trackbar_SetMax', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Trackbar_SetMax(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'Trackbar_SetMin', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Trackbar_SetMin(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'Trackbar_SetPos', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Trackbar_SetPos(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<TrackerMIL>)>(
    symbol: 'TrackerMIL_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void TrackerMIL_Close(
  ffi.Pointer<TrackerMIL> self,
);

@ffi.Native<CvStatus Function(ffi.Pointer<TrackerMIL>)>(
    symbol: 'TrackerMIL_Create',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TrackerMIL_Create(
  ffi.Pointer<TrackerMIL> rval,
);

@ffi.Native<CvStatus Function(TrackerMIL, Mat, Rect)>(
    symbol: 'TrackerMIL_Init', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TrackerMIL_Init(
  TrackerMIL self,
  Mat image,
  Rect bbox,
);

@ffi.Native<
        CvStatus Function(
            TrackerMIL, Mat, ffi.Pointer<Rect>, ffi.Pointer<ffi.Bool>)>(
    symbol: 'TrackerMIL_Update',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus TrackerMIL_Update(
  TrackerMIL self,
  Mat image,
  ffi.Pointer<Rect> boundingBox,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, Mat)>(
    symbol: 'Undistort', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Undistort(
  Mat src,
  Mat dst,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat newCameraMatrix,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Mat, Mat, Mat, TermCriteria)>(
    symbol: 'UndistortPoints', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus UndistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat r,
  Mat p,
  TermCriteria criteria,
);

@ffi.Native<CvStatus Function(VecChar, ffi.Char)>(
    symbol: 'VecChar_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_Append(
  VecChar vec,
  int i,
);

@ffi.Native<CvStatus Function(VecChar, ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'VecChar_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_At(
  VecChar vec,
  int idx,
  ffi.Pointer<ffi.Char> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>)>(
    symbol: 'VecChar_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecChar_Close(
  ffi.Pointer<VecChar> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecChar>)>(
    symbol: 'VecChar_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_New(
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<VecChar>)>(
    symbol: 'VecChar_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_NewFromPointer(
  ffi.Pointer<ffi.Char> p,
  int length,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<CvStatus Function(VecChar, ffi.Pointer<VecChar>)>(
    symbol: 'VecChar_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_NewFromVec(
  VecChar vec,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<CvStatus Function(VecChar, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecChar_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_Size(
  VecChar vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
        CvStatus Function(
            VecChar, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecChar_ToString', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecChar_ToString(
  VecChar vec,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<CvStatus Function(VecDMatch, DMatch)>(
    symbol: 'VecDMatch_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDMatch_Append(
  VecDMatch vec,
  DMatch dm,
);

@ffi.Native<CvStatus Function(VecDMatch, ffi.Int, ffi.Pointer<DMatch>)>(
    symbol: 'VecDMatch_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDMatch_At(
  VecDMatch vec,
  int idx,
  ffi.Pointer<DMatch> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>)>(
    symbol: 'VecDMatch_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecDMatch_Close(
  ffi.Pointer<VecDMatch> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecDMatch>)>(
    symbol: 'VecDMatch_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDMatch_New(
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<DMatch>, ffi.Int, ffi.Pointer<VecDMatch>)>(
    symbol: 'VecDMatch_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDMatch_NewFromPointer(
  ffi.Pointer<DMatch> matches,
  int length,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<CvStatus Function(VecDMatch, ffi.Pointer<VecDMatch>)>(
    symbol: 'VecDMatch_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDMatch_NewFromVec(
  VecDMatch vec,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<CvStatus Function(VecDMatch, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecDMatch_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDMatch_Size(
  VecDMatch vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecDouble, ffi.Double)>(
    symbol: 'VecDouble_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDouble_Append(
  VecDouble vec,
  double d,
);

@ffi.Native<CvStatus Function(VecDouble, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'VecDouble_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDouble_At(
  VecDouble vec,
  int idx,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDouble>)>(
    symbol: 'VecDouble_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecDouble_Close(
  ffi.Pointer<VecDouble> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecDouble>)>(
    symbol: 'VecDouble_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDouble_New(
  ffi.Pointer<VecDouble> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Double>, ffi.Int, ffi.Pointer<VecDouble>)>(
    symbol: 'VecDouble_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDouble_NewFromPointer(
  ffi.Pointer<ffi.Double> p,
  int length,
  ffi.Pointer<VecDouble> rval,
);

@ffi.Native<CvStatus Function(VecDouble, ffi.Pointer<VecDouble>)>(
    symbol: 'VecDouble_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDouble_NewFromVec(
  VecDouble vec,
  ffi.Pointer<VecDouble> rval,
);

@ffi.Native<CvStatus Function(VecDouble, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecDouble_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecDouble_Size(
  VecDouble vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecFloat, ffi.Float)>(
    symbol: 'VecFloat_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecFloat_Append(
  VecFloat vec,
  double f,
);

@ffi.Native<CvStatus Function(VecFloat, ffi.Int, ffi.Pointer<ffi.Float>)>(
    symbol: 'VecFloat_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecFloat_At(
  VecFloat vec,
  int idx,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecFloat>)>(
    symbol: 'VecFloat_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecFloat_Close(
  ffi.Pointer<VecFloat> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecFloat>)>(
    symbol: 'VecFloat_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecFloat_New(
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<VecFloat>)>(
    symbol: 'VecFloat_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecFloat_NewFromPointer(
  ffi.Pointer<ffi.Float> p,
  int length,
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<CvStatus Function(VecFloat, ffi.Pointer<VecFloat>)>(
    symbol: 'VecFloat_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecFloat_NewFromVec(
  VecFloat vec,
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<CvStatus Function(VecFloat, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecFloat_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecFloat_Size(
  VecFloat vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Int)>(
    symbol: 'VecInt_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecInt_Append(
  VecInt vec,
  int i,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecInt_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecInt_At(
  VecInt vec,
  int idx,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecInt>)>(
    symbol: 'VecInt_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecInt_Close(
  ffi.Pointer<VecInt> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecInt>)>(
    symbol: 'VecInt_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecInt_New(
  ffi.Pointer<VecInt> rval,
);

/// Copy from a pointer
@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<VecInt>)>(
    symbol: 'VecInt_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecInt_NewFromPointer(
  ffi.Pointer<ffi.Int> p,
  int length,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Pointer<VecInt>)>(
    symbol: 'VecInt_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecInt_NewFromVec(
  VecInt vec,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<CvStatus Function(VecInt, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecInt_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecInt_Size(
  VecInt vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecKeyPoint, KeyPoint)>(
    symbol: 'VecKeyPoint_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecKeyPoint_Append(
  VecKeyPoint vec,
  KeyPoint kp,
);

@ffi.Native<CvStatus Function(VecKeyPoint, ffi.Int, ffi.Pointer<KeyPoint>)>(
    symbol: 'VecKeyPoint_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecKeyPoint_At(
  VecKeyPoint vec,
  int idx,
  ffi.Pointer<KeyPoint> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>)>(
    symbol: 'VecKeyPoint_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecKeyPoint_Close(
  ffi.Pointer<VecKeyPoint> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecKeyPoint>)>(
    symbol: 'VecKeyPoint_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecKeyPoint_New(
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<KeyPoint>, ffi.Int, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'VecKeyPoint_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecKeyPoint_NewFromPointer(
  ffi.Pointer<KeyPoint> keypoints,
  int length,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(VecKeyPoint, ffi.Pointer<VecKeyPoint>)>(
    symbol: 'VecKeyPoint_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecKeyPoint_NewFromVec(
  VecKeyPoint vec,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<CvStatus Function(VecKeyPoint, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecKeyPoint_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecKeyPoint_Size(
  VecKeyPoint vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecMat, Mat)>(
    symbol: 'VecMat_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecMat_Append(
  VecMat vec,
  Mat mat,
);

@ffi.Native<CvStatus Function(VecMat, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'VecMat_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecMat_At(
  VecMat vec,
  int i,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>)>(
    symbol: 'VecMat_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecMat_Close(
  ffi.Pointer<VecMat> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecMat>)>(
    symbol: 'VecMat_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecMat_New(
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<Mat>, ffi.Int, ffi.Pointer<VecMat>)>(
    symbol: 'VecMat_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecMat_NewFromPointer(
  ffi.Pointer<Mat> mats,
  int length,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<CvStatus Function(VecMat, ffi.Pointer<VecMat>)>(
    symbol: 'VecMat_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecMat_NewFromVec(
  VecMat vec,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<CvStatus Function(VecMat, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecMat_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecMat_Size(
  VecMat vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecPoint2f, Point2f)>(
    symbol: 'VecPoint2f_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_Append(
  VecPoint2f vec,
  Point2f p,
);

@ffi.Native<CvStatus Function(VecPoint2f, ffi.Int, ffi.Pointer<Point2f>)>(
    symbol: 'VecPoint2f_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_At(
  VecPoint2f vec,
  int idx,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>)>(
    symbol: 'VecPoint2f_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecPoint2f_Close(
  ffi.Pointer<VecPoint2f> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecPoint2f>)>(
    symbol: 'VecPoint2f_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_New(
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecPoint2f>)>(
    symbol: 'VecPoint2f_NewFromMat',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_NewFromMat(
  Mat mat,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<Point2f>, ffi.Int, ffi.Pointer<VecPoint2f>)>(
    symbol: 'VecPoint2f_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_NewFromPointer(
  ffi.Pointer<Point2f> pts,
  int length,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<CvStatus Function(VecPoint2f, ffi.Pointer<VecPoint2f>)>(
    symbol: 'VecPoint2f_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_NewFromVec(
  VecPoint2f vec,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<CvStatus Function(VecPoint2f, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecPoint2f_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint2f_Size(
  VecPoint2f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecPoint3f, Point3f)>(
    symbol: 'VecPoint3f_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_Append(
  VecPoint3f vec,
  Point3f point,
);

@ffi.Native<CvStatus Function(VecPoint3f, ffi.Int, ffi.Pointer<Point3f>)>(
    symbol: 'VecPoint3f_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_At(
  VecPoint3f vec,
  int idx,
  ffi.Pointer<Point3f> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>)>(
    symbol: 'VecPoint3f_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecPoint3f_Close(
  ffi.Pointer<VecPoint3f> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecPoint3f>)>(
    symbol: 'VecPoint3f_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_New(
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecPoint3f>)>(
    symbol: 'VecPoint3f_NewFromMat',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_NewFromMat(
  Mat mat,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<Point3f>, ffi.Int, ffi.Pointer<VecPoint3f>)>(
    symbol: 'VecPoint3f_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_NewFromPointer(
  ffi.Pointer<Point3f> points,
  int length,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<CvStatus Function(VecPoint3f, ffi.Pointer<VecPoint3f>)>(
    symbol: 'VecPoint3f_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_NewFromVec(
  VecPoint3f vec,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<CvStatus Function(VecPoint3f, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecPoint3f_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint3f_Size(
  VecPoint3f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecPoint, Point)>(
    symbol: 'VecPoint_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_Append(
  VecPoint vec,
  Point p,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Int, ffi.Pointer<Point>)>(
    symbol: 'VecPoint_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_At(
  VecPoint vec,
  int idx,
  ffi.Pointer<Point> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>)>(
    symbol: 'VecPoint_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecPoint_Close(
  ffi.Pointer<VecPoint> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecPoint>)>(
    symbol: 'VecPoint_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_New(
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<CvStatus Function(Mat, ffi.Pointer<VecPoint>)>(
    symbol: 'VecPoint_NewFromMat',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_NewFromMat(
  Mat mat,
  ffi.Pointer<VecPoint> rval,
);

/// Copy from a pointer
@ffi.Native<
        CvStatus Function(ffi.Pointer<Point>, ffi.Int, ffi.Pointer<VecPoint>)>(
    symbol: 'VecPoint_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_NewFromPointer(
  ffi.Pointer<Point> points,
  int length,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<VecPoint>)>(
    symbol: 'VecPoint_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_NewFromVec(
  VecPoint vec,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<CvStatus Function(VecPoint, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecPoint_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecPoint_Size(
  VecPoint vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecRect, Rect)>(
    symbol: 'VecRect_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecRect_Append(
  VecRect vec,
  Rect rect,
);

@ffi.Native<CvStatus Function(VecRect, ffi.Int, ffi.Pointer<Rect>)>(
    symbol: 'VecRect_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecRect_At(
  VecRect vec,
  int idx,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>)>(
    symbol: 'VecRect_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecRect_Close(
  ffi.Pointer<VecRect> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecRect>)>(
    symbol: 'VecRect_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecRect_New(
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<Rect>, ffi.Int, ffi.Pointer<VecRect>)>(
    symbol: 'VecRect_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecRect_NewFromPointer(
  ffi.Pointer<Rect> rects,
  int length,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<CvStatus Function(VecRect, ffi.Pointer<VecRect>)>(
    symbol: 'VecRect_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecRect_NewFromVec(
  VecRect vec,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<CvStatus Function(VecRect, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecRect_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecRect_Size(
  VecRect vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecUChar, uchar)>(
    symbol: 'VecUChar_Append', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecUChar_Append(
  VecUChar vec,
  int i,
);

@ffi.Native<CvStatus Function(VecUChar, ffi.Int, ffi.Pointer<uchar>)>(
    symbol: 'VecUChar_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecUChar_At(
  VecUChar vec,
  int idx,
  ffi.Pointer<uchar> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>)>(
    symbol: 'VecUChar_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecUChar_Close(
  ffi.Pointer<VecUChar> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecUChar>)>(
    symbol: 'VecUChar_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecUChar_New(
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<uchar>, ffi.Int, ffi.Pointer<VecUChar>)>(
    symbol: 'VecUChar_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecUChar_NewFromPointer(
  ffi.Pointer<uchar> p,
  int length,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<CvStatus Function(VecUChar, ffi.Pointer<VecUChar>)>(
    symbol: 'VecUChar_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecUChar_NewFromVec(
  VecUChar vec,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<CvStatus Function(VecUChar, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecUChar_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecUChar_Size(
  VecUChar vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecVecChar, VecChar)>(
    symbol: 'VecVecChar_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_Append(
  VecVecChar vec,
  VecChar v,
);

@ffi.Native<CvStatus Function(VecVecChar, ffi.Pointer<ffi.Char>)>(
    symbol: 'VecVecChar_Append_Str',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_Append_Str(
  VecVecChar vec,
  ffi.Pointer<ffi.Char> str,
);

@ffi.Native<CvStatus Function(VecVecChar, ffi.Int, ffi.Pointer<VecChar>)>(
    symbol: 'VecVecChar_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_At(
  VecVecChar vec,
  int idx,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
        CvStatus Function(VecVecChar, ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecVecChar_At_Str',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_At_Str(
  VecVecChar vec,
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>)>(
    symbol: 'VecVecChar_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecVecChar_Close(
  ffi.Pointer<VecVecChar> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecVecChar>)>(
    symbol: 'VecVecChar_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_New(
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<CvStatus Function(VecVecChar, ffi.Pointer<VecVecChar>)>(
    symbol: 'VecVecChar_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_NewFromVec(
  VecVecChar vec,
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<CvStatus Function(VecVecChar, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecVecChar_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecChar_Size(
  VecVecChar vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecVecDMatch, VecDMatch)>(
    symbol: 'VecVecDMatch_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecDMatch_Append(
  VecVecDMatch vec,
  VecDMatch dm,
);

@ffi.Native<CvStatus Function(VecVecDMatch, ffi.Int, ffi.Pointer<VecDMatch>)>(
    symbol: 'VecVecDMatch_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecDMatch_At(
  VecVecDMatch vec,
  int idx,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>)>(
    symbol: 'VecVecDMatch_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecVecDMatch_Close(
  ffi.Pointer<VecVecDMatch> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecVecDMatch>)>(
    symbol: 'VecVecDMatch_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecDMatch_New(
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<VecDMatch>, ffi.Int, ffi.Pointer<VecVecDMatch>)>(
    symbol: 'VecVecDMatch_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecDMatch_NewFromPointer(
  ffi.Pointer<VecDMatch> matches,
  int length,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<CvStatus Function(VecVecDMatch, ffi.Pointer<VecVecDMatch>)>(
    symbol: 'VecVecDMatch_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecDMatch_NewFromVec(
  VecVecDMatch vec,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<CvStatus Function(VecVecDMatch, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecVecDMatch_Size',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecDMatch_Size(
  VecVecDMatch vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint2f, VecPoint2f)>(
    symbol: 'VecVecPoint2f_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint2f_Append(
  VecVecPoint2f vec,
  VecPoint2f pv,
);

@ffi.Native<CvStatus Function(VecVecPoint2f, ffi.Int, ffi.Pointer<VecPoint2f>)>(
    symbol: 'VecVecPoint2f_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint2f_At(
  VecVecPoint2f vec,
  int idx,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint2f>)>(
    symbol: 'VecVecPoint2f_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecVecPoint2f_Close(
  ffi.Pointer<VecVecPoint2f> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecVecPoint2f>)>(
    symbol: 'VecVecPoint2f_New',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint2f_New(
  ffi.Pointer<VecVecPoint2f> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<VecPoint2f>, ffi.Int, ffi.Pointer<VecVecPoint2f>)>(
    symbol: 'VecVecPoint2f_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint2f_NewFromPointer(
  ffi.Pointer<VecPoint2f> points,
  int length,
  ffi.Pointer<VecVecPoint2f> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint2f, ffi.Pointer<VecVecPoint2f>)>(
    symbol: 'VecVecPoint2f_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint2f_NewFromVec(
  VecVecPoint2f vec,
  ffi.Pointer<VecVecPoint2f> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint2f, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecVecPoint2f_Size',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint2f_Size(
  VecVecPoint2f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint3f, VecPoint3f)>(
    symbol: 'VecVecPoint3f_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint3f_Append(
  VecVecPoint3f vec,
  VecPoint3f pv,
);

@ffi.Native<CvStatus Function(VecVecPoint3f, ffi.Int, ffi.Pointer<VecPoint3f>)>(
    symbol: 'VecVecPoint3f_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint3f_At(
  VecVecPoint3f vec,
  int idx,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3f>)>(
    symbol: 'VecVecPoint3f_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecVecPoint3f_Close(
  ffi.Pointer<VecVecPoint3f> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecVecPoint3f>)>(
    symbol: 'VecVecPoint3f_New',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint3f_New(
  ffi.Pointer<VecVecPoint3f> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<VecPoint3f>, ffi.Int, ffi.Pointer<VecVecPoint3f>)>(
    symbol: 'VecVecPoint3f_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint3f_NewFromPointer(
  ffi.Pointer<VecPoint3f> points,
  int length,
  ffi.Pointer<VecVecPoint3f> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint3f, ffi.Pointer<VecVecPoint3f>)>(
    symbol: 'VecVecPoint3f_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint3f_NewFromVec(
  VecVecPoint3f vec,
  ffi.Pointer<VecVecPoint3f> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint3f, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecVecPoint3f_Size',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint3f_Size(
  VecVecPoint3f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint, VecPoint)>(
    symbol: 'VecVecPoint_Append',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint_Append(
  VecVecPoint vec,
  VecPoint pv,
);

@ffi.Native<CvStatus Function(VecVecPoint, ffi.Int, ffi.Pointer<VecPoint>)>(
    symbol: 'VecVecPoint_At', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint_At(
  VecVecPoint vec,
  int idx,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>)>(
    symbol: 'VecVecPoint_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VecVecPoint_Close(
  ffi.Pointer<VecVecPoint> vec,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VecVecPoint>)>(
    symbol: 'VecVecPoint_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint_New(
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<VecPoint>, ffi.Int, ffi.Pointer<VecVecPoint>)>(
    symbol: 'VecVecPoint_NewFromPointer',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint_NewFromPointer(
  ffi.Pointer<VecPoint> points,
  int length,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint, ffi.Pointer<VecVecPoint>)>(
    symbol: 'VecVecPoint_NewFromVec',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint_NewFromVec(
  VecVecPoint vec,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<CvStatus Function(VecVecPoint, ffi.Pointer<ffi.Int>)>(
    symbol: 'VecVecPoint_Size', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VecVecPoint_Size(
  VecVecPoint vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VideoCapture>)>(
    symbol: 'VideoCapture_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VideoCapture_Close(
  ffi.Pointer<VideoCapture> self,
);

@ffi.Native<CvStatus Function(VideoCapture, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'VideoCapture_Get', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_Get(
  VideoCapture self,
  int prop,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(VideoCapture, ffi.Int)>(
    symbol: 'VideoCapture_Grab',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_Grab(
  VideoCapture self,
  int skip,
);

@ffi.Native<CvStatus Function(VideoCapture, ffi.Pointer<ffi.Int>)>(
    symbol: 'VideoCapture_IsOpened',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_IsOpened(
  VideoCapture self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VideoCapture>)>(
    symbol: 'VideoCapture_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_New(
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<VideoCapture>)>(
    symbol: 'VideoCapture_NewFromFile',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Pointer<VideoCapture>)>(
    symbol: 'VideoCapture_NewFromIndex',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_NewFromIndex(
  int index,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
        CvStatus Function(
            VideoCapture, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>(
    symbol: 'VideoCapture_Open',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_Open(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(VideoCapture, ffi.Int, ffi.Pointer<ffi.Bool>)>(
    symbol: 'VideoCapture_OpenDevice',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_OpenDevice(
  VideoCapture self,
  int device,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(
            VideoCapture, ffi.Int, ffi.Int, ffi.Pointer<ffi.Bool>)>(
    symbol: 'VideoCapture_OpenDeviceWithAPI',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_OpenDeviceWithAPI(
  VideoCapture self,
  int device,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
        CvStatus Function(VideoCapture, ffi.Pointer<ffi.Char>, ffi.Int,
            ffi.Pointer<ffi.Bool>)>(
    symbol: 'VideoCapture_OpenWithAPI',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_OpenWithAPI(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<CvStatus Function(VideoCapture, Mat, ffi.Pointer<ffi.Int>)>(
    symbol: 'VideoCapture_Read',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_Read(
  VideoCapture self,
  Mat buf,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VideoCapture)>(
    symbol: 'VideoCapture_Release',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_Release(
  VideoCapture self,
);

@ffi.Native<CvStatus Function(VideoCapture, ffi.Int, ffi.Double)>(
    symbol: 'VideoCapture_Set', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoCapture_Set(
  VideoCapture self,
  int prop,
  double param,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VideoWriter>)>(
    symbol: 'VideoWriter_Close',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void VideoWriter_Close(
  ffi.Pointer<VideoWriter> self,
);

@ffi.Native<
        CvStatus Function(
            ffi.Char, ffi.Char, ffi.Char, ffi.Char, ffi.Pointer<ffi.Int>)>(
    symbol: 'VideoWriter_Fourcc',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoWriter_Fourcc(
  int c1,
  int c2,
  int c3,
  int c4,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(VideoWriter, ffi.Pointer<ffi.Int>)>(
    symbol: 'VideoWriter_IsOpened',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoWriter_IsOpened(
  VideoWriter self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<VideoWriter>)>(
    symbol: 'VideoWriter_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoWriter_New(
  ffi.Pointer<VideoWriter> rval,
);

@ffi.Native<
        CvStatus Function(VideoWriter, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>, ffi.Double, ffi.Int, ffi.Int, ffi.Bool)>(
    symbol: 'VideoWriter_Open', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoWriter_Open(
  VideoWriter self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Char> codec,
  double fps,
  int width,
  int height,
  bool isColor,
);

@ffi.Native<CvStatus Function(VideoWriter)>(
    symbol: 'VideoWriter_Release',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoWriter_Release(
  VideoWriter self,
);

@ffi.Native<CvStatus Function(VideoWriter, Mat)>(
    symbol: 'VideoWriter_Write',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus VideoWriter_Write(
  VideoWriter self,
  Mat img,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Size)>(
    symbol: 'WarpAffine', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus WarpAffine(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'WarpAffineWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus WarpAffineWithParams(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Size)>(
    symbol: 'WarpPerspective', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus WarpPerspective(
  Mat src,
  Mat dst,
  Mat m,
  Size dsize,
);

@ffi.Native<CvStatus Function(Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>(
    symbol: 'WarpPerspectiveWithParams',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus WarpPerspectiveWithParams(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'Watershed', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Watershed(
  Mat image,
  Mat markers,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'Window_Close', assetId: 'package:opencv_dart/opencv_dart.dart')
external void Window_Close(
  ffi.Pointer<ffi.Char> winname,
);

@ffi.Native<
        CvStatus Function(
            ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'Window_GetProperty',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_GetProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, Mat)>(
    symbol: 'Window_IMShow', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_IMShow(
  ffi.Pointer<ffi.Char> winname,
  Mat mat,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>(
    symbol: 'Window_Move', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_Move(
  ffi.Pointer<ffi.Char> winname,
  int x,
  int y,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'Window_New', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_New(
  ffi.Pointer<ffi.Char> winname,
  int flags,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>(
    symbol: 'Window_Resize', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_Resize(
  ffi.Pointer<ffi.Char> winname,
  int width,
  int height,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<Rect>)>(
    symbol: 'Window_SelectROI', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_SelectROI(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<
        CvStatus Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecRect>)>(
    symbol: 'Window_SelectROIs',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_SelectROIs(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double)>(
    symbol: 'Window_SetProperty',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_SetProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  double value,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'Window_SetTitle', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_SetTitle(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> title,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'Window_WaitKey', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Window_WaitKey(
  int delay,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>(
    symbol: 'Zeros', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus Zeros(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Int32 Function(ffi.Int32, ffi.Int32)>(
    symbol: 'addtest', assetId: 'package:opencv_dart/opencv_dart.dart')
external int addtest(
  int a,
  int b,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'averageHashCompare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus averageHashCompare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'averageHashCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus averageHashCompute(
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'blockMeanHashCompare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus blockMeanHashCompare(
  Mat a,
  Mat b,
  int mode,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Int)>(
    symbol: 'blockMeanHashCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus blockMeanHashCompute(
  Mat inputArr,
  Mat outputArr,
  int mode,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'colorMomentHashCompare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus colorMomentHashCompare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'colorMomentHashCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus colorMomentHashCompute(
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<CvStatus Function()>(
    symbol: 'destroyAllWindows',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus destroyAllWindows();

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'getBuildInfo', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus getBuildInfo(
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<CvStatus Function(ffi.Int, ffi.Pointer<ArucoDictionary>)>(
    symbol: 'getPredefinedDictionary',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus getPredefinedDictionary(
  int dictionaryId,
  ffi.Pointer<ArucoDictionary> rval,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Float, ffi.Float, ffi.Pointer<ffi.Double>)>(
    symbol: 'marrHildrethHashCompare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus marrHildrethHashCompare(
  Mat a,
  Mat b,
  double alpha,
  double scale,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Float, ffi.Float)>(
    symbol: 'marrHildrethHashCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus marrHildrethHashCompute(
  Mat inputArr,
  Mat outputArr,
  double alpha,
  double scale,
);

@ffi.Native<CvStatus Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'openCVVersion', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus openCVVersion(
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Pointer<ffi.Double>)>(
    symbol: 'pHashCompare', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus pHashCompare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat)>(
    symbol: 'pHashCompute', assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus pHashCompute(
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<
        CvStatus Function(
            Mat, Mat, ffi.Double, ffi.Int, ffi.Pointer<ffi.Double>)>(
    symbol: 'radialVarianceHashCompare',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus radialVarianceHashCompare(
  Mat a,
  Mat b,
  double sigma,
  int numOfAngleLine,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<CvStatus Function(Mat, Mat, ffi.Double, ffi.Int)>(
    symbol: 'radialVarianceHashCompute',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external CvStatus radialVarianceHashCompute(
  Mat inputArr,
  Mat outputArr,
  double sigma,
  int numOfAngleLine,
);

@ffi.Native<ffi.Void Function(ErrorCallback)>(
    symbol: 'registerErrorCallback',
    assetId: 'package:opencv_dart/opencv_dart.dart')
external void registerErrorCallback(
  ErrorCallback callback,
);

final class AKAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AKAZEPtr = ffi.Pointer<AKAZE>;

final class AgastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AgastFeatureDetectorPtr = ffi.Pointer<AgastFeatureDetector>;

final class AlignMTB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AlignMTBPtr = ffi.Pointer<AlignMTB>;

final class ArucoDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class ArucoDetectorParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDetectorParametersPtr = ffi.Pointer<ArucoDetectorParameters>;
typedef ArucoDetectorPtr = ffi.Pointer<ArucoDetector>;

final class ArucoDictionary extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDictionaryPtr = ffi.Pointer<ArucoDictionary>;

final class AsyncArray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AsyncArrayPtr = ffi.Pointer<AsyncArray>;

final class BFMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BFMatcherPtr = ffi.Pointer<BFMatcher>;

const int BLOCK_MEAN_HASH_MODE_0 = 0;

const int BLOCK_MEAN_HASH_MODE_1 = 1;

final class BRISK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BRISKPtr = ffi.Pointer<BRISK>;

final class BackgroundSubtractorKNN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorKNNPtr = ffi.Pointer<BackgroundSubtractorKNN>;

final class BackgroundSubtractorMOG2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorMOG2Ptr = ffi.Pointer<BackgroundSubtractorMOG2>;

final class BlockMeanHash extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BlockMeanHashPtr = ffi.Pointer<BlockMeanHash>;

final class CLAHE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CLAHEPtr = ffi.Pointer<CLAHE>;

final class CascadeClassifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CascadeClassifierPtr = ffi.Pointer<CascadeClassifier>;

final class CvStatus extends ffi.Struct {
  @ffi.Int()
  external int code;

  external ffi.Pointer<ffi.Char> msg;

  external ffi.Pointer<ffi.Char> err;

  external ffi.Pointer<ffi.Char> func;

  external ffi.Pointer<ffi.Char> file;

  @ffi.Int()
  external int line;
}

final class DMatch extends ffi.Struct {
  @ffi.Int()
  external int queryIdx;

  @ffi.Int()
  external int trainIdx;

  @ffi.Int()
  external int imgIdx;

  @ffi.Float()
  external double distance;
}

typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(
    int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    int line,
    ffi.Pointer<ffi.Void> userdata);

final class FastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FastFeatureDetectorPtr = ffi.Pointer<FastFeatureDetector>;

final class FlannBasedMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FlannBasedMatcherPtr = ffi.Pointer<FlannBasedMatcher>;

final class GFTTDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFTTDetectorPtr = ffi.Pointer<GFTTDetector>;

final class HOGDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef HOGDescriptorPtr = ffi.Pointer<HOGDescriptor>;

final class InputOutputArray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef InputOutputArrayPtr = ffi.Pointer<InputOutputArray>;

final class KAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KAZEPtr = ffi.Pointer<KAZE>;

final class KalmanFilter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KalmanFilterPtr = ffi.Pointer<KalmanFilter>;

final class KeyPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double size;

  @ffi.Double()
  external double angle;

  @ffi.Double()
  external double response;

  @ffi.Int()
  external int octave;

  @ffi.Int()
  external int classID;
}

final class Layer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef LayerPtr = ffi.Pointer<Layer>;

final class MSER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MSERPtr = ffi.Pointer<MSER>;

final class Mat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MatPtr = ffi.Pointer<Mat>;

final class MergeMertens extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MergeMertensPtr = ffi.Pointer<MergeMertens>;

final class Moment extends ffi.Struct {
  @ffi.Double()
  external double m00;

  @ffi.Double()
  external double m10;

  @ffi.Double()
  external double m01;

  @ffi.Double()
  external double m20;

  @ffi.Double()
  external double m11;

  @ffi.Double()
  external double m02;

  @ffi.Double()
  external double m30;

  @ffi.Double()
  external double m21;

  @ffi.Double()
  external double m12;

  @ffi.Double()
  external double m03;

  @ffi.Double()
  external double mu20;

  @ffi.Double()
  external double mu11;

  @ffi.Double()
  external double mu02;

  @ffi.Double()
  external double mu30;

  @ffi.Double()
  external double mu21;

  @ffi.Double()
  external double mu12;

  @ffi.Double()
  external double mu03;

  @ffi.Double()
  external double nu20;

  @ffi.Double()
  external double nu11;

  @ffi.Double()
  external double nu02;

  @ffi.Double()
  external double nu30;

  @ffi.Double()
  external double nu21;

  @ffi.Double()
  external double nu12;

  @ffi.Double()
  external double nu03;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_AKAZEPtr extends ffi.Struct {
  external ffi.Pointer<AKAZEPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_AgastFeatureDetectorPtr extends ffi.Struct {
  external ffi.Pointer<AgastFeatureDetectorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_AlignMTBPtr extends ffi.Struct {
  external ffi.Pointer<AlignMTBPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_ArucoDetectorParametersPtr extends ffi.Struct {
  external ffi.Pointer<ArucoDetectorParametersPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_ArucoDetectorPtr extends ffi.Struct {
  external ffi.Pointer<ArucoDetectorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_ArucoDictionaryPtr extends ffi.Struct {
  external ffi.Pointer<ArucoDictionaryPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_AsyncArrayPtr extends ffi.Struct {
  external ffi.Pointer<AsyncArrayPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_BFMatcherPtr extends ffi.Struct {
  external ffi.Pointer<BFMatcherPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_BRISKPtr extends ffi.Struct {
  external ffi.Pointer<BRISKPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_BackgroundSubtractorKNNPtr extends ffi.Struct {
  external ffi.Pointer<BackgroundSubtractorKNNPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_BackgroundSubtractorMOG2Ptr extends ffi.Struct {
  external ffi.Pointer<BackgroundSubtractorMOG2Ptr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_BlockMeanHashPtr extends ffi.Struct {
  external ffi.Pointer<BlockMeanHashPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_CLAHEPtr extends ffi.Struct {
  external ffi.Pointer<CLAHEPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_CascadeClassifierPtr extends ffi.Struct {
  external ffi.Pointer<CascadeClassifierPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_FastFeatureDetectorPtr extends ffi.Struct {
  external ffi.Pointer<FastFeatureDetectorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_FlannBasedMatcherPtr extends ffi.Struct {
  external ffi.Pointer<FlannBasedMatcherPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_GFTTDetectorPtr extends ffi.Struct {
  external ffi.Pointer<GFTTDetectorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_HOGDescriptorPtr extends ffi.Struct {
  external ffi.Pointer<HOGDescriptorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_InputOutputArrayPtr extends ffi.Struct {
  external ffi.Pointer<InputOutputArrayPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_KAZEPtr extends ffi.Struct {
  external ffi.Pointer<KAZEPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_KalmanFilterPtr extends ffi.Struct {
  external ffi.Pointer<KalmanFilterPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_LayerPtr extends ffi.Struct {
  external ffi.Pointer<LayerPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_MSERPtr extends ffi.Struct {
  external ffi.Pointer<MSERPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_MatPtr extends ffi.Struct {
  external ffi.Pointer<MatPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_MergeMertensPtr extends ffi.Struct {
  external ffi.Pointer<MergeMertensPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_NetPtr extends ffi.Struct {
  external ffi.Pointer<NetPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_ORBPtr extends ffi.Struct {
  external ffi.Pointer<ORBPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_PtrStitcherPtr extends ffi.Struct {
  external ffi.Pointer<PtrStitcherPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_QRCodeDetectorPtr extends ffi.Struct {
  external ffi.Pointer<QRCodeDetectorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_RNGPtr extends ffi.Struct {
  external ffi.Pointer<RNGPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_SIFTPtr extends ffi.Struct {
  external ffi.Pointer<SIFTPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_SimpleBlobDetectorPtr extends ffi.Struct {
  external ffi.Pointer<SimpleBlobDetectorPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_StitcherPtr extends ffi.Struct {
  external ffi.Pointer<StitcherPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_TermCriteriaPtr extends ffi.Struct {
  external ffi.Pointer<TermCriteriaPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_TrackerGOTURNPtr extends ffi.Struct {
  external ffi.Pointer<TrackerGOTURNPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_TrackerMILPtr extends ffi.Struct {
  external ffi.Pointer<TrackerMILPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_TrackerPtr extends ffi.Struct {
  external ffi.Pointer<TrackerPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecCharPtr extends ffi.Struct {
  external ffi.Pointer<VecCharPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecDMatchPtr extends ffi.Struct {
  external ffi.Pointer<VecDMatchPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecDoublePtr extends ffi.Struct {
  external ffi.Pointer<VecDoublePtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecFloatPtr extends ffi.Struct {
  external ffi.Pointer<VecFloatPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecIntPtr extends ffi.Struct {
  external ffi.Pointer<VecIntPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecKeyPointPtr extends ffi.Struct {
  external ffi.Pointer<VecKeyPointPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecMatPtr extends ffi.Struct {
  external ffi.Pointer<VecMatPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecPoint2fPtr extends ffi.Struct {
  external ffi.Pointer<VecPoint2fPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecPoint3fPtr extends ffi.Struct {
  external ffi.Pointer<VecPoint3fPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecPointPtr extends ffi.Struct {
  external ffi.Pointer<VecPointPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecRectPtr extends ffi.Struct {
  external ffi.Pointer<VecRectPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecUCharPtr extends ffi.Struct {
  external ffi.Pointer<VecUCharPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecVecCharPtr extends ffi.Struct {
  external ffi.Pointer<VecVecCharPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecVecDMatchPtr extends ffi.Struct {
  external ffi.Pointer<VecVecDMatchPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecVecPoint2fPtr extends ffi.Struct {
  external ffi.Pointer<VecVecPoint2fPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecVecPoint3fPtr extends ffi.Struct {
  external ffi.Pointer<VecVecPoint3fPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VecVecPointPtr extends ffi.Struct {
  external ffi.Pointer<VecVecPointPtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VideoCapturePtr extends ffi.Struct {
  external ffi.Pointer<VideoCapturePtr> p;
}

/// \
/// Dart ffigen will not generate typedefs if not referred                                                  \
/// so here we confirm they are included                                                                    \
final class NO_USE_VideoWriterPtr extends ffi.Struct {
  external ffi.Pointer<VideoWriterPtr> p;
}

final class Net extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef NetPtr = ffi.Pointer<Net>;

final class ORB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ORBPtr = ffi.Pointer<ORB>;

final class Point extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

final class Point2f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

final class Point3f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

final class PtrStitcher extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef PtrStitcherPtr = ffi.Pointer<PtrStitcher>;

final class QRCodeDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QRCodeDetectorPtr = ffi.Pointer<QRCodeDetector>;

final class RNG extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef RNGPtr = ffi.Pointer<RNG>;

final class Rect extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

final class Rect2f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

final class RotatedRect extends ffi.Struct {
  external Point2f center;

  external Size2f size;

  @ffi.Double()
  external double angle;
}

final class SIFT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef SIFTPtr = ffi.Pointer<SIFT>;

const int STITCHING_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3;

const int STITCHING_ERR_HOMOGRAPHY_EST_FAIL = 2;

const int STITCHING_ERR_NEED_MORE_IMGS = 1;

const int STITCHING_OK = 0;

const int STITCHING_PANORAMA = 0;

const int STITCHING_SCANS = 1;

final class Scalar extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;
}

final class SimpleBlobDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

typedef SimpleBlobDetectorPtr = ffi.Pointer<SimpleBlobDetector>;

final class Size extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

final class Size2f extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

final class Stitcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef StitcherPtr = ffi.Pointer<Stitcher>;

final class TermCriteria extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TermCriteriaPtr = ffi.Pointer<TermCriteria>;

final class Tracker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerGOTURN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerGOTURNPtr = ffi.Pointer<TrackerGOTURN>;

final class TrackerMIL extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerMILPtr = ffi.Pointer<TrackerMIL>;
typedef TrackerPtr = ffi.Pointer<Tracker>;

final class Vec2b extends ffi.Struct {
  @uchar()
  external int val1;

  @uchar()
  external int val2;
}

final class Vec2d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;
}

final class Vec2f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;
}

final class Vec2i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;
}

final class Vec2s extends ffi.Struct {
  @ffi.Short()
  external int val1;

  @ffi.Short()
  external int val2;
}

final class Vec2w extends ffi.Struct {
  @ushort()
  external int val1;

  @ushort()
  external int val2;
}

final class Vec3b extends ffi.Struct {
  @uchar()
  external int val1;

  @uchar()
  external int val2;

  @uchar()
  external int val3;
}

final class Vec3d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;
}

final class Vec3f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;

  @ffi.Float()
  external double val3;
}

final class Vec3i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;
}

final class Vec3s extends ffi.Struct {
  @ffi.Short()
  external int val1;

  @ffi.Short()
  external int val2;

  @ffi.Short()
  external int val3;
}

final class Vec3w extends ffi.Struct {
  @ushort()
  external int val1;

  @ushort()
  external int val2;

  @ushort()
  external int val3;
}

final class Vec4b extends ffi.Struct {
  @uchar()
  external int val1;

  @uchar()
  external int val2;

  @uchar()
  external int val3;

  @uchar()
  external int val4;
}

final class Vec4d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;
}

final class Vec4f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;

  @ffi.Float()
  external double val3;

  @ffi.Float()
  external double val4;
}

final class Vec4i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;

  @ffi.Int()
  external int val4;
}

final class Vec4s extends ffi.Struct {
  @ffi.Short()
  external int val1;

  @ffi.Short()
  external int val2;

  @ffi.Short()
  external int val3;

  @ffi.Short()
  external int val4;
}

final class Vec4w extends ffi.Struct {
  @ushort()
  external int val1;

  @ushort()
  external int val2;

  @ushort()
  external int val3;

  @ushort()
  external int val4;
}

final class Vec6d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;

  @ffi.Double()
  external double val5;

  @ffi.Double()
  external double val6;
}

final class Vec6f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;

  @ffi.Float()
  external double val3;

  @ffi.Float()
  external double val4;

  @ffi.Float()
  external double val5;

  @ffi.Float()
  external double val6;
}

final class Vec6i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;

  @ffi.Int()
  external int val4;

  @ffi.Int()
  external int val5;

  @ffi.Int()
  external int val6;
}

final class Vec8i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;

  @ffi.Int()
  external int val4;

  @ffi.Int()
  external int val5;

  @ffi.Int()
  external int val6;

  @ffi.Int()
  external int val7;

  @ffi.Int()
  external int val8;
}

final class VecChar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecCharPtr = ffi.Pointer<VecChar>;

final class VecDMatch extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecDMatchPtr = ffi.Pointer<VecDMatch>;

final class VecDouble extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecDoublePtr = ffi.Pointer<VecDouble>;

final class VecFloat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecFloatPtr = ffi.Pointer<VecFloat>;

final class VecInt extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecIntPtr = ffi.Pointer<VecInt>;

final class VecKeyPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecKeyPointPtr = ffi.Pointer<VecKeyPoint>;

final class VecMat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecMatPtr = ffi.Pointer<VecMat>;

final class VecPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class VecPoint2f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecPoint2fPtr = ffi.Pointer<VecPoint2f>;

final class VecPoint3f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecPoint3fPtr = ffi.Pointer<VecPoint3f>;
typedef VecPointPtr = ffi.Pointer<VecPoint>;

final class VecRect extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecRectPtr = ffi.Pointer<VecRect>;

final class VecUChar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecUCharPtr = ffi.Pointer<VecUChar>;

final class VecVecChar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecCharPtr = ffi.Pointer<VecVecChar>;

final class VecVecDMatch extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecDMatchPtr = ffi.Pointer<VecVecDMatch>;

final class VecVecPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class VecVecPoint2f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecPoint2fPtr = ffi.Pointer<VecVecPoint2f>;

final class VecVecPoint3f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecPoint3fPtr = ffi.Pointer<VecVecPoint3f>;
typedef VecVecPointPtr = ffi.Pointer<VecVecPoint>;

final class VideoCapture extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoCapturePtr = ffi.Pointer<VideoCapture>;

final class VideoWriter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoWriterPtr = ffi.Pointer<VideoWriter>;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
typedef uchar = ffi.UnsignedChar;
typedef Dartuchar = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
